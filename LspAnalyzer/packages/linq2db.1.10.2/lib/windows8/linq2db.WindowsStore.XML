<?xml version="1.0"?>
<doc>
    <assembly>
        <name>linq2db.WindowsStore</name>
    </assembly>
    <members>
        <member name="T:LinqToDB.AsyncExtensions">
            <summary>
            Provides helper methods for asynchronous operations.
            </summary>
        </member>
        <member name="M:LinqToDB.AsyncExtensions.GetActionTask(System.Action,System.Threading.CancellationToken)">
            <summary>
            Executes provided action using task scheduler.
            </summary>
            <param name="action">Action to execute.</param>
            <param name="token">Asynchronous operation cancellation token.</param>
            <returns>Asynchronous operation completion task.</returns>
        </member>
        <member name="M:LinqToDB.AsyncExtensions.GetTask``1(System.Func{``0})">
            <summary>
            Executes provided function using task scheduler.
            </summary>
            <typeparam name="T">Function result type.</typeparam>
            <param name="func">Function to execute.</param>
            <returns>Asynchronous operation completion task.</returns>
        </member>
        <member name="M:LinqToDB.AsyncExtensions.GetTask``1(System.Func{``0},System.Threading.CancellationToken)">
            <summary>
            Executes provided function using task scheduler.
            </summary>
            <typeparam name="T">Function result type.</typeparam>
            <param name="func">Function to execute.</param>
            <param name="token">Asynchronous operation cancellation token.</param>
            <returns>Asynchronous operation completion task.</returns>
        </member>
        <member name="M:LinqToDB.AsyncExtensions.ForEachAsync``1(System.Linq.IQueryable{``0},System.Action{``0},System.Threading.CancellationToken)">
            <summary>
            Asynchronously apply provided action to each element in source sequence.
            Sequence elements processed sequentially.
            </summary>
            <typeparam name="TSource">Source sequence element type.</typeparam>
            <param name="source">Source sequence.</param>
            <param name="action">Action to apply to each sequence element.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Asynchronous operation completion task.</returns>
        </member>
        <member name="M:LinqToDB.AsyncExtensions.ForEachUntilAsync``1(System.Linq.IQueryable{``0},System.Func{``0,System.Boolean},System.Threading.CancellationToken)">
            <summary>
            Asynchronously apply provided function to each element in source sequence sequentially.
            Sequence enumeration stops if function returns <c>false</c>.
            </summary>
            <typeparam name="TSource">Source sequence element type.</typeparam>
            <param name="source">Source sequence.</param>
            <param name="func">Function to apply to each sequence element. Returning <c>false</c> from function will stop numeration.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Asynchronous operation completion task.</returns>
        </member>
        <member name="M:LinqToDB.AsyncExtensions.ToListAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
            <summary>
            Asynchronously loads data from query to a list.
            </summary>
            <typeparam name="TSource">Query element type.</typeparam>
            <param name="source">Source query.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>List with query results.</returns>
        </member>
        <member name="M:LinqToDB.AsyncExtensions.ToArrayAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
            <summary>
            Asynchronously loads data from query to an array.
            </summary>
            <typeparam name="TSource">Query element type.</typeparam>
            <param name="source">Source query.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Array with query results.</returns>
        </member>
        <member name="M:LinqToDB.AsyncExtensions.ToDictionaryAsync``2(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Threading.CancellationToken)">
            <summary>
            Asynchronously loads data from query to a dictionary.
            </summary>
            <typeparam name="TSource">Query element type.</typeparam>
            <typeparam name="TKey">Dictionary key type.</typeparam>
            <param name="source">Source query.</param>
            <param name="keySelector">Source element key selector.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Dictionary with query results.</returns>
        </member>
        <member name="M:LinqToDB.AsyncExtensions.ToDictionaryAsync``2(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)">
            <summary>
            Asynchronously loads data from query to a dictionary.
            </summary>
            <typeparam name="TSource">Query element type.</typeparam>
            <typeparam name="TKey">Dictionary key type.</typeparam>
            <param name="source">Source query.</param>
            <param name="keySelector">Source element key selector.</param>
            <param name="comparer">Dictionary key comparer.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Dictionary with query results.</returns>
        </member>
        <member name="M:LinqToDB.AsyncExtensions.ToDictionaryAsync``3(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Threading.CancellationToken)">
            <summary>
            Asynchronously loads data from query to a dictionary.
            </summary>
            <typeparam name="TSource">Query element type.</typeparam>
            <typeparam name="TKey">Dictionary key type.</typeparam>
            <typeparam name="TElement">Dictionary element type.</typeparam>
            <param name="source">Source query.</param>
            <param name="keySelector">Source element key selector.</param>
            <param name="elementSelector">Dictionary element selector.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Dictionary with query results.</returns>
        </member>
        <member name="M:LinqToDB.AsyncExtensions.ToDictionaryAsync``3(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)">
            <summary>
            Asynchronously loads data from query to a dictionary.
            </summary>
            <typeparam name="TSource">Query element type.</typeparam>
            <typeparam name="TKey">Dictionary key type.</typeparam>
            <typeparam name="TElement">Dictionary element type.</typeparam>
            <param name="source">Source query.</param>
            <param name="keySelector">Source element key selector.</param>
            <param name="elementSelector">Dictionary element selector.</param>
            <param name="comparer">Dictionary key comparer.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Dictionary with query results.</returns>
        </member>
        <member name="T:LinqToDB.Common.Array`1">
            <summary>
            Empty array instance helper.
            </summary>
            <typeparam name="T">Aray element type.</typeparam>
        </member>
        <member name="F:LinqToDB.Common.Array`1.Empty">
            <summary>
            Static instance of empty array of specific type.
            </summary>
        </member>
        <member name="T:LinqToDB.Common.Configuration">
            <summary>
            Contains global linq2db settings.
            </summary>
        </member>
        <member name="F:LinqToDB.Common.Configuration.IsStructIsScalarType">
            <summary>
            If <c>true</c> - non-primitive and non-enum value types (structures) will be treated as scalar types (e.g. <see cref="T:System.DateTime"/>) during mapping;
            otherwise they will be treated the same way as classes.
            Default value: <c>true</c>.
            </summary>
        </member>
        <member name="F:LinqToDB.Common.Configuration.AvoidSpecificDataProviderAPI">
            <summary>
            If <c>true</c> - data providers will try to use standard ADO.NET interfaces instead of provider-specific functionality when possible. This option could be usefull if you need to intercept
            database calls using tools such as <a href="https://github.com/MiniProfiler/dotnet">MiniProfiler</a>.
            Default value: <c>false</c>.
            </summary>
        </member>
        <member name="T:LinqToDB.Common.Configuration.Linq">
            <summary>
            LINQ query settings.
            </summary>
        </member>
        <member name="F:LinqToDB.Common.Configuration.Linq.PreloadGroups">
            <summary>
            Controls how group data for LINQ queries ended with GroupBy will be loaded:
            - if <c>true</c> - group data will be loaded together with main query, resulting in 1 + N queries, where N - number of groups;
            - if <c>false</c> - group data will be loaded when you call enumerator for specific group <see cref="T:System.Linq.IGrouping`2"/>.
            Default value: <c>false</c>.
            </summary>
        </member>
        <member name="F:LinqToDB.Common.Configuration.Linq.IgnoreEmptyUpdate">
            <summary>
            Controls behavior of linq2db when there is no updateable fields in Update query:
            - if <c>true</c> - query not executed and Update operation returns 0 as number of affected records;
            - if <c>false</c> - <see cref="T:LinqToDB.Linq.LinqException"/> will be thrown.
            Default value: <c>false</c>.
            </summary>
        </member>
        <member name="F:LinqToDB.Common.Configuration.Linq.AllowMultipleQuery">
            <summary>
            Controls behavior of linq2db when multiple queries required to load requested data:
            - if <c>true</c> - multiple queries allowed;
            - if <c>false</c> - <see cref="T:LinqToDB.Linq.LinqException"/> will be thrown.
            This option required, if you want to select related collections, e.g. using <see cref="M:LinqToDB.LinqExtensions.LoadWith``1(LinqToDB.ITable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})"/> method.
            Default value: <c>false</c>.
            </summary>
        </member>
        <member name="F:LinqToDB.Common.Configuration.Linq.GenerateExpressionTest">
            <summary>
            Enables generation of test class for each LINQ query, executed while this option is enabled.
            This option could be usefull for issue reporting, when you need to provide reproduceable case.
            Test file will be placed to <c>linq2db</c> subfolder of temp folder and exact file path will be logged
            to data connection tracing infrastructure.
            See <see cref="!:DataConnection.TraceSwitch"/> for more details.
            Default value: <c>false</c>.
            </summary>
        </member>
        <member name="F:LinqToDB.Common.Configuration.Linq.TraceMapperExpression">
            <summary>
            Enables logging of generated mapping expression to data connection tracing infrastructure.
            See <see cref="!:DataConnection.TraceSwitch"/> for more details.
            Default value: <c>false</c>.
            </summary>
        </member>
        <member name="F:LinqToDB.Common.Configuration.Linq.DoNotClearOrderBys">
            <summary>
            Controls behavior, when LINQ query chain contains multiple <see cref="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})"/> or <see cref="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})"/> calls:
            - if <c>true</c> - non-first OrderBy* call will be treated as ThenBy* call;
            - if <c>false</c> - OrdredBy* call will discard sort specifications, added by previous OrderBy* and ThenBy* calls.
            Default value: <c>false</c>.
            </summary>
        </member>
        <member name="F:LinqToDB.Common.Configuration.Linq.OptimizeJoins">
            <summary>
            If enabled, linq2db will try to reduce number of generated SQL JOINs for LINQ query.
            Attempted optimizations:
            - removes duplicate joins by unique target table key;
            - removes self-joins by unique key;
            - removes left joins if joined table is not used in query.
            Default value: <c>true</c>.
            </summary>
        </member>
        <member name="F:LinqToDB.Common.Configuration.Linq.CompareNullsAsValues">
            <summary>
            If set to true nullable fields would be checked for IS NULL in Equal/NotEqual comparasions.
            This affects: Equal, NotEqual, Not Contains
            Default value: <c>true</c>.
            </summary>
            <example>
            <code>
            public class MyEntity
            {
                public int? Value;
            }
            
            db.MyEntity.Where(e => e.Value != 10)
            
            from e1 in db.MyEntity
            join e2 in db.MyEntity on e1.Value equals e2.Value
            select e1
            
            var filter = new [] {1, 2, 3};
            db.MyEntity.Where(e => ! filter.Contains(e.Value))
            </code>
            
            Would be converted to next queries:
            <code>
            SELECT Value FROM MyEntity WHERE Value IS NULL OR Value != 10
            
            SELECT e1.Value
            FROM MyEntity e1
            INNER JOIN MyEntity e2 ON e1.Value = e2.Value OR (e1.Value IS NULL AND e2.Value IS NULL)
            
            SELECT Value FROM MyEntity WHERE Value IS NULL OR NOT Value IN (1, 2, 3)
            </code>
            </example>
        </member>
        <member name="F:LinqToDB.Common.Configuration.Linq.GuardGrouping">
            <summary>
            Controls behavior of LINQ query, which ends with GroupBy call.
            - if <c>true</c> - <seealso cref="T:LinqToDB.LinqToDBException"/> will be thrown for such queries;
            - if <c>false</c> - behavior is controlled by <see cref="F:LinqToDB.Common.Configuration.Linq.PreloadGroups"/> option.
            Default value: <c>false</c>.
            </summary>
            <remarks>
            <a href="https://github.com/linq2db/linq2db/issues/365">More details</a>.
            </remarks>
        </member>
        <member name="F:LinqToDB.Common.Configuration.Linq.UseBinaryAggregateExpression">
            <summary>
            Used to optimize huge logical operations with large number of operands like expr1.and.axpr2...and.exprN into balanced tree.
            Without this option, such conditions could lead to <seealso cref="!:StackOverflowException"/>.
            Default value: <c>false</c>.
            </summary>
        </member>
        <member name="F:LinqToDB.Common.Configuration.Linq.DisableQueryCache">
            <summary>
            Used to disable LINQ expressions caching for queries.
            This cache reduces time, required for query parsing but have several side-effects:
            <para/>
            - cached LINQ expressions could contain references to external objects as parameters, which could lead to memory leaks if those objects are not used anymore by other code
            <para/>
            - cache access synchronization could lead to bigger latencies than it saves.
            <para/>
            Default value: <c>false</c>.
            <para/>
            It is not recommended to enable this option as it could lead to severe slowdown. Better approach will be
            to call <see cref="M:LinqToDB.Linq.Query`1.ClearCache"/> method to cleanup cache after queries, that produce severe memory leaks you need to fix.
            <para/>
            <a href="https://github.com/linq2db/linq2db/issues/256">More details</a>.
            </summary>
        </member>
        <member name="T:LinqToDB.Common.Configuration.LinqService">
            <summary>
            Linq over WCF global settings.
            </summary>
        </member>
        <member name="F:LinqToDB.Common.Configuration.LinqService.SerializeAssemblyQualifiedName">
            <summary>
            Controls format of type name, sent over WCF:
            - if <c>true</c> - name from <see cref="P:System.Type.AssemblyQualifiedName"/> used;
            - if <c>false</c> - name from <see cref="P:System.Type.FullName"/> used.
            Default value: <c>false</c>.
            </summary>
        </member>
        <member name="F:LinqToDB.Common.Configuration.LinqService.ThrowUnresolvedTypeException">
            <summary>
            Controls behavior of linq2db, when it cannot load <see cref="T:System.Type"/> by type name on query deserialization:
            - if <c>true</c> - <see cref="T:LinqToDB.LinqToDBException"/> will be thrown;
            - if <c>false</c> - type load error will be ignored.
            Default value: <c>false</c>.
            </summary>
        </member>
        <member name="T:LinqToDB.Common.Converter">
            <summary>
            Type conversion manager.
            </summary>
        </member>
        <member name="M:LinqToDB.Common.Converter.SetConverter``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Sets custom converter from <typeparamref name="TFrom"/> to <typeparamref name="TTo"/> type.
            </summary>
            <typeparam name="TFrom">Source conversion type.</typeparam>
            <typeparam name="TTo">Target conversion type.</typeparam>
            <param name="expr">Converter expression.</param>
        </member>
        <member name="M:LinqToDB.Common.Converter.GetConverter(System.Type,System.Type)">
            <summary>
            Tries to get converter from <paramref name="from"/> to <paramref name="to"/> type.
            </summary>
            <param name="from">Source conversion type.</param>
            <param name="to">Target conversion type.</param>
            <returns>Conversion expression or null, of converter not found.</returns>
        </member>
        <member name="M:LinqToDB.Common.Converter.ChangeType(System.Object,System.Type,LinqToDB.Mapping.MappingSchema)">
            <summary>
            Converts value to <paramref name="conversionType"/> type.
            </summary>
            <param name="value">Value to convert.</param>
            <param name="conversionType">Target conversion type.</param>
            <param name="mappingSchema">Optional mapping schema.</param>
            <returns>Converted value.</returns>
        </member>
        <member name="M:LinqToDB.Common.Converter.ChangeTypeTo``1(System.Object,LinqToDB.Mapping.MappingSchema)">
            <summary>
            Converts value to <typeparamref name="T"/> type.
            </summary>
            <typeparam name="T">Target conversion type.</typeparam>
            <param name="value">Value to convert.</param>
            <param name="mappingSchema">Optional mapping schema.</param>
            <returns>Converted value.</returns>
        </member>
        <member name="M:LinqToDB.Common.Converter.IsDefaultValuePlaceHolder(System.Linq.Expressions.Expression)">
            <summary>
            Returns true, if expression value is <see cref="T:LinqToDB.Expressions.DefaultValueExpression"/> or
            <code>
            DefaultValue&lt;T&gt;.Value
            </code>
            </summary>
            <param name="expr">Expression to inspect.</param>
            <returns><c>true</c>, if expression represents default value.</returns>
        </member>
        <member name="M:LinqToDB.Common.Converter.GetDefaultMappingFromEnumType(LinqToDB.Mapping.MappingSchema,System.Type)">
            <summary>
            Returns type, to which provided enumeration values should be mapped.
            </summary>
            <param name="mappingSchema">Current mapping schema</param>
            <param name="enumType">Enumeration type.</param>
            <returns>Underlying mapping type.</returns>
        </member>
        <member name="T:LinqToDB.Common.ConvertTo`1">
            <summary>
            Value converter to <typeparamref name="TTo"/> type.
            </summary>
            <typeparam name="TTo">Target conversion type.</typeparam>
        </member>
        <member name="M:LinqToDB.Common.ConvertTo`1.From``1(``0)">
            <summary>
            Converts value from <typeparamref name="TFrom"/> to <typeparamref name="TTo"/> type.
            </summary>
            <typeparam name="TFrom">Source conversion type.</typeparam>
            <param name="o">Value to convert.</param>
            <returns>Converted value.</returns>
        </member>
        <member name="T:LinqToDB.Common.Convert`2">
            <summary>
            Converters provider for value conversion from <typeparamref name="TFrom"/> to <typeparamref name="TTo"/> type.
            </summary>
            <typeparam name="TFrom">Source conversion type.</typeparam>
            <typeparam name="TTo">Target conversion type.</typeparam>
        </member>
        <member name="P:LinqToDB.Common.Convert`2.Expression">
            <summary>
            Gets or sets conversion function as expression.
            Setter updates both expression and delegate forms of converter.
            Assigning <c>null</c> value will reset converter to default conversion logic.
            Assigning non-null value will also set converter as default converter.
            </summary>
        </member>
        <member name="P:LinqToDB.Common.Convert`2.Lambda">
            <summary>
            Gets or sets conversion function as delegate.
            Setter updates both expression and delegate forms of converter.
            Assigning <c>null</c> value will reset converter to default conversion logic.
            Assigning non-null value will also set converter as default converter.
            </summary>
        </member>
        <member name="P:LinqToDB.Common.Convert`2.From">
            <summary>
            Gets conversion function delegate.
            </summary>
        </member>
        <member name="T:LinqToDB.Common.DefaultValue">
            <summary>
            Default value provider.
            Default value used for mapping from NULL database value to C# value.
            </summary>
        </member>
        <member name="M:LinqToDB.Common.DefaultValue.GetValue(System.Type,LinqToDB.Mapping.MappingSchema)">
            <summary>
            Returns default value for provided type.
            </summary>
            <param name="type">Type, for which default value requested.</param>
            <param name="mappingSchema">Optional mapping schema to provide mapping information for enum type.</param>
            <returns>Default value for specific type.</returns>
        </member>
        <member name="M:LinqToDB.Common.DefaultValue.GetValue``1">
            <summary>
            Returns default value for provided type.
            </summary>
            <typeparam name="T">Type, for which default value requested.</typeparam>
            <returns>Default value for specific type.</returns>
        </member>
        <member name="M:LinqToDB.Common.DefaultValue.SetValue``1(``0)">
            <summary>
            Sets default value for provided type.
            </summary>
            <typeparam name="T">Type, for which default value set.</typeparam>
            <param name="value">Default value for specific type.</param>
        </member>
        <member name="T:LinqToDB.Common.DefaultValue`1">
            <summary>
            Default value provider for specific type.
            Default value used for mapping from NULL database value to C# value.
            </summary>
            <typeparam name="T">Type parameter.</typeparam>
        </member>
        <member name="P:LinqToDB.Common.DefaultValue`1.Value">
            <summary>
            Gets or sets default value for specific type.
            </summary>
        </member>
        <member name="T:LinqToDB.Common.LinqToDBConvertException">
            <summary>
            Defines the base class for the namespace exceptions.
            </summary>
            <remarks>
            This class is the base class for exceptions that may occur during
            execution of the namespace members.
            </remarks>
        </member>
        <member name="T:LinqToDB.LinqToDBException">
            <summary>
            Defines the base class for the namespace exceptions.
            </summary>
            <remarks>
            This class is the base class for exceptions that may occur during
            execution of the namespace members.
            </remarks>
        </member>
        <member name="M:LinqToDB.LinqToDBException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LinqToDB.LinqToDBException"/> class.
            </summary>
            <remarks>
            This constructor initializes the <see cref="P:System.Exception.Message"/>
            property of the new instance such as "A Build Type exception has occurred.".
            </remarks>
        </member>
        <member name="M:LinqToDB.LinqToDBException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:LinqToDB.LinqToDBException"/> class
            with the specified error message.
            </summary>
            <param name="message">The message to display to the client when the
            exception is thrown.</param>
            <seealso cref="P:System.Exception.Message"/>
        </member>
        <member name="M:LinqToDB.LinqToDBException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:LinqToDB.LinqToDBException"/> class
            with the specified error message and InnerException property.
            </summary>
            <param name="message">The message to display to the client when the
            exception is thrown.</param>
            <param name="innerException">The InnerException, if any, that threw
            the current exception.</param>
            <seealso cref="P:System.Exception.Message"/>
            <seealso cref="P:System.Exception.InnerException"/>
        </member>
        <member name="M:LinqToDB.LinqToDBException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:LinqToDB.LinqToDBException"/> class
            with the specified InnerException property.
            </summary>
            <param name="innerException">The InnerException, if any, that threw
            the current exception.</param>
            <seealso cref="P:System.Exception.InnerException"/>
        </member>
        <member name="M:LinqToDB.Common.LinqToDBConvertException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LinqToDB.Common.LinqToDBConvertException"/> class.
            </summary>
            <remarks>
            This constructor initializes the <see cref="P:System.Exception.Message"/>
            property of the new instance such as "A Build Type exception has occurred."
            </remarks>
        </member>
        <member name="M:LinqToDB.Common.LinqToDBConvertException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:LinqToDB.Common.LinqToDBConvertException"/> class
            with the specified error message.
            </summary>
            <param name="message">The message to display to the client when the
            exception is thrown.</param>
            <seealso cref="P:System.Exception.Message"/>
        </member>
        <member name="M:LinqToDB.Common.LinqToDBConvertException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:LinqToDB.Common.LinqToDBConvertException"/> class
            with the specified error message and InnerException property.
            </summary>
            <param name="message">The message to display to the client when the
            exception is thrown.</param>
            <param name="innerException">The InnerException, if any, that threw
            the current exception.</param>
            <seealso cref="P:System.Exception.Message"/>
            <seealso cref="P:System.Exception.InnerException"/>
        </member>
        <member name="M:LinqToDB.Common.LinqToDBConvertException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:LinqToDB.Common.LinqToDBConvertException"/> class
            with the specified InnerException property.
            </summary>
            <param name="innerException">The InnerException, if any, that threw
            the current exception.</param>
            <seealso cref="P:System.Exception.InnerException"/>
        </member>
        <member name="T:LinqToDB.Common.Option`1">
            <summary>
            Option type implementation.
            <a href="https://en.wikipedia.org/wiki/Option_type">Option type</a>.
            </summary>
            <typeparam name="T">Value type.</typeparam>
        </member>
        <member name="F:LinqToDB.Common.Option`1.Value">
            <summary>
            Gets value, stored in option.
            </summary>
        </member>
        <member name="M:LinqToDB.Common.Option`1.Some(`0)">
            <summary>
            Creates option with value.
            </summary>
            <param name="value">Option's value.</param>
            <returns>Option instance.</returns>
        </member>
        <member name="F:LinqToDB.Common.Option`1.None">
            <summary>
            Gets <see cref="F:LinqToDB.Common.Option`1.None"/> value for option.
            </summary>
        </member>
        <member name="P:LinqToDB.Common.Option`1.IsNone">
            <summary>
            Returns <c>true</c> of current option stores <see cref="F:LinqToDB.Common.Option`1.None"/> value.
            </summary>
        </member>
        <member name="P:LinqToDB.Common.Option`1.IsSome">
            <summary>
            Returns <c>true</c> of current option stores some value instead of <see cref="F:LinqToDB.Common.Option`1.None"/>.
            </summary>
        </member>
        <member name="T:LinqToDB.Common.Tools">
            <summary>
            Various general-purpose helpers.
            </summary>
        </member>
        <member name="M:LinqToDB.Common.Tools.Args(System.String,System.Object[])">
            <summary>
            Shortcut extension method for <see cref="!:string.Format(string, object)"/> method.
            </summary>
            <param name="format">Format string.</param>
            <param name="args">Format parameters.</param>
            <returns>String, generated from <paramref name="format"/> format string using <paramref name="args"/> parameters.</returns>
        </member>
        <member name="M:LinqToDB.Common.Tools.IsNullOrEmpty(System.Collections.ICollection)">
            <summary>
            Checks that collection is not null and have at least one element.
            </summary>
            <param name="array">Collection to check.</param>
            <returns><c>true</c> if collection is null or contains no elements, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:LinqToDB.Common.Tools.IsNullOrEmpty(System.String)">
            <summary>
            Shortcut extension method for <see cref="M:System.String.IsNullOrEmpty(System.String)"/> method.
            </summary>
            <param name="str">String value to check.</param>
            <returns><c>true</c> if string is null or empty, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:System.Data.Linq.Binary.ComputeHash">
            <summary>
            Simple hash using pseudo-random coefficients for each byte in 
            the array to achieve order dependency.
            </summary>
        </member>
        <member name="T:LinqToDB.CompiledQuery">
            <summary>
            Provides API for compilation and caching of queries for reuse.
            </summary>
        </member>
        <member name="M:LinqToDB.CompiledQuery.Invoke``2(``0)">
            <summary>
            Executes compiled query against provided database connection context.
            </summary>
            <typeparam name="TDC">Database connection context type.</typeparam>
            <typeparam name="TResult">Query result type.</typeparam>
            <param name="dataContext">Database connection context.</param>
            <returns>Query execution result.</returns>
        </member>
        <member name="M:LinqToDB.CompiledQuery.Invoke``3(``0,``1)">
            <summary>
            Executes compiled query with one parameter against provided database connection context.
            </summary>
            <typeparam name="TDC">Database connection context type.</typeparam>
            <typeparam name="T1">Query parameter type.</typeparam>
            <typeparam name="TResult">Query result type.</typeparam>
            <param name="dataContext">Database connection context.</param>
            <param name="arg1">Query parameter value.</param>
            <returns>Query execution result.</returns>
        </member>
        <member name="M:LinqToDB.CompiledQuery.Invoke``4(``0,``1,``2)">
            <summary>
            Executes compiled query with two parameters against provided database connection context.
            </summary>
            <typeparam name="TDC">Database connection context type.</typeparam>
            <typeparam name="T1">First query parameter type.</typeparam>
            <typeparam name="T2">Second query parameter type.</typeparam>
            <typeparam name="TResult">Query result type.</typeparam>
            <param name="dataContext">Database connection context.</param>
            <param name="arg1">First query parameter value.</param>
            <param name="arg2">Second query parameter value.</param>
            <returns>Query execution result.</returns>
        </member>
        <member name="M:LinqToDB.CompiledQuery.Invoke``5(``0,``1,``2,``3)">
            <summary>
            Executes compiled query with three parameters against provided database connection context.
            </summary>
            <typeparam name="TDC">Database connection context type.</typeparam>
            <typeparam name="T1">First query parameter type.</typeparam>
            <typeparam name="T2">Second query parameter type.</typeparam>
            <typeparam name="T3">Third query parameter type.</typeparam>
            <typeparam name="TResult">Query result type.</typeparam>
            <param name="dataContext">Database connection context.</param>
            <param name="arg1">First query parameter value.</param>
            <param name="arg2">Second query parameter value.</param>
            <param name="arg3">Third query parameter value.</param>
            <returns>Query execution result.</returns>
        </member>
        <member name="M:LinqToDB.CompiledQuery.Invoke``6(``0,``1,``2,``3,``4)">
            <summary>
            Executes compiled query with four parameters against provided database connection context.
            </summary>
            <typeparam name="TDC">Database connection context type.</typeparam>
            <typeparam name="T1">First query parameter type.</typeparam>
            <typeparam name="T2">Second query parameter type.</typeparam>
            <typeparam name="T3">Third query parameter type.</typeparam>
            <typeparam name="T4">Forth query parameter type.</typeparam>
            <typeparam name="TResult">Query result type.</typeparam>
            <param name="dataContext">Database connection context.</param>
            <param name="arg1">First query parameter value.</param>
            <param name="arg2">Second query parameter value.</param>
            <param name="arg3">Third query parameter value.</param>
            <param name="arg4">Forth query parameter value.</param>
            <returns>Query execution result.</returns>
        </member>
        <member name="M:LinqToDB.CompiledQuery.Invoke``7(``0,``1,``2,``3,``4,``5)">
            <summary>
            Executes compiled query with five parameters against provided database connection context.
            </summary>
            <typeparam name="TDC">Database connection context type.</typeparam>
            <typeparam name="T1">First query parameter type.</typeparam>
            <typeparam name="T2">Second query parameter type.</typeparam>
            <typeparam name="T3">Third query parameter type.</typeparam>
            <typeparam name="T4">Forth query parameter type.</typeparam>
            <typeparam name="T5">Fifth query parameter type.</typeparam>
            <typeparam name="TResult">Query result type.</typeparam>
            <param name="dataContext">Database connection context.</param>
            <param name="arg1">First query parameter value.</param>
            <param name="arg2">Second query parameter value.</param>
            <param name="arg3">Third query parameter value.</param>
            <param name="arg4">Forth query parameter value.</param>
            <param name="arg5">Fifth query parameter value.</param>
            <returns>Query execution result.</returns>
        </member>
        <member name="M:LinqToDB.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Compiles the query.
            </summary>
            <returns>
            A generic delegate that represents the compiled query.
            </returns>
            <param name="query">The query expression to be compiled.</param>
            <typeparam name="TDC">Type of data context parameter, passed to compiled query.</typeparam>
            <typeparam name="TResult">Query result type.</typeparam>
        </member>
        <member name="M:LinqToDB.CompiledQuery.Compile``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
            <summary>
            Compiles the query with parameter.
            </summary>
            <returns>
            A generic delegate that represents the compiled query.
            </returns>
            <param name="query">The query expression to be compiled.</param>
            <typeparam name="TDC">Type of data context parameter, passed to compiled query.</typeparam>
            <typeparam name="TArg1">Type of parameter for compiled query.</typeparam>
            <typeparam name="TResult">Query result type.</typeparam>
        </member>
        <member name="M:LinqToDB.CompiledQuery.Compile``4(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3}})">
            <summary>
            Compiles the query with two parameters.
            </summary>
            <returns>
            A generic delegate that represents the compiled query.
            </returns>
            <param name="query">The query expression to be compiled.</param>
            <typeparam name="TDC">Type of data context parameter, passed to compiled query.</typeparam>
            <typeparam name="TArg1">Type of first parameter for compiled query.</typeparam>
            <typeparam name="TArg2">Type of second parameter for compiled query.</typeparam>
            <typeparam name="TResult">Query result type.</typeparam>
        </member>
        <member name="M:LinqToDB.CompiledQuery.Compile``5(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4}})">
            <summary>
            Compiles the query with three parameters.
            </summary>
            <returns>
            A generic delegate that represents the compiled query.
            </returns>
            <param name="query">The query expression to be compiled.</param>
            <typeparam name="TDC">Type of data context parameter, passed to compiled query.</typeparam>
            <typeparam name="TArg1">Type of first parameter for compiled query.</typeparam>
            <typeparam name="TArg2">Type of second parameter for compiled query.</typeparam>
            <typeparam name="TArg3">Type of third parameter for compiled query.</typeparam>
            <typeparam name="TResult">Query result type.</typeparam>
        </member>
        <member name="M:LinqToDB.CompiledQuery.Compile``6(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5}})">
            <summary>
            Compiles the query with four parameters.
            </summary>
            <returns>
            A generic delegate that represents the compiled query.
            </returns>
            <param name="query">The query expression to be compiled.</param>
            <typeparam name="TDC">Type of data context parameter, passed to compiled query.</typeparam>
            <typeparam name="TArg1">Type of first parameter for compiled query.</typeparam>
            <typeparam name="TArg2">Type of second parameter for compiled query.</typeparam>
            <typeparam name="TArg3">Type of third parameter for compiled query.</typeparam>
            <typeparam name="TArg4">Type of forth parameter for compiled query.</typeparam>
            <typeparam name="TResult">Query result type.</typeparam>
        </member>
        <member name="M:LinqToDB.CompiledQuery.Compile``7(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6}})">
            <summary>
            Compiles the query with five parameters.
            </summary>
            <returns>
            A generic delegate that represents the compiled query.
            </returns>
            <param name="query">The query expression to be compiled.</param>
            <typeparam name="TDC">Type of data context parameter, passed to compiled query.</typeparam>
            <typeparam name="TArg1">Type of first parameter for compiled query.</typeparam>
            <typeparam name="TArg2">Type of second parameter for compiled query.</typeparam>
            <typeparam name="TArg3">Type of third parameter for compiled query.</typeparam>
            <typeparam name="TArg4">Type of forth parameter for compiled query.</typeparam>
            <typeparam name="TArg5">Type of fifth parameter for compiled query.</typeparam>
            <typeparam name="TResult">Query result type.</typeparam>
        </member>
        <member name="T:LinqToDB.DataExtensions">
            <summary>
            Data context extension methods.
            </summary>
        </member>
        <member name="M:LinqToDB.DataExtensions.GetTable``1(LinqToDB.IDataContext)">
            <summary>
            Returns queryable source for specified mapping class for current connection, mapped to database table or view.
            </summary>
            <typeparam name="T">Mapping class type.</typeparam>
            <param name="dataContext">Data connection context.</param>
            <returns>Queryable source.</returns>
        </member>
        <member name="M:LinqToDB.DataExtensions.GetTable``1(LinqToDB.IDataContext,System.Object,System.Reflection.MethodInfo,System.Object[])">
            <summary>
            Returns queryable source for specified mapping class for current connection, mapped to table expression or function.
            It could be used e.g. for queries to table-valued functions or to decorate queried table with hints.
            </summary>
            <typeparam name="T">Mapping class type.</typeparam>
            <param name="dataContext">Data connection context.</param>
            <param name="instance">Instance object for <paramref name="methodInfo"/> method or null for static method.</param>
            <param name="methodInfo">Method, decorated with expression attribute, based on <see cref="T:LinqToDB.Sql.TableFunctionAttribute"/>.</param>
            <param name="parameters">Parameters for <paramref name="methodInfo"/> method.</param>
            <returns>Queryable source.</returns>
        </member>
        <member name="M:LinqToDB.DataExtensions.Compile``2(LinqToDB.IDataContext,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Compiles the query.
            </summary>
            <returns>
            A generic delegate that represents the compiled query.
            </returns>
            <param name="dataContext">Data connection context.</param>
            <param name="query">The query expression to be compiled.</param>
            <typeparam name="TDc">Type of data context parameter, passed to compiled query.</typeparam>
            <typeparam name="TResult">Query result type.</typeparam>
        </member>
        <member name="M:LinqToDB.DataExtensions.Compile``3(LinqToDB.IDataContext,System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
            <summary>
            Compiles the query with parameter.
            </summary>
            <returns>
            A generic delegate that represents the compiled query.
            </returns>
            <param name="dataContext">Data connection context.</param>
            <param name="query">The query expression to be compiled.</param>
            <typeparam name="TDc">Type of data context parameter, passed to compiled query.</typeparam>
            <typeparam name="TArg1">Type of parameter for compiled query.</typeparam>
            <typeparam name="TResult">Query result type.</typeparam>
        </member>
        <member name="M:LinqToDB.DataExtensions.Compile``4(LinqToDB.IDataContext,System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3}})">
            <summary>
            Compiles the query with two parameters.
            </summary>
            <returns>
            A generic delegate that represents the compiled query.
            </returns>
            <param name="dataContext">Data connection context.</param>
            <param name="query">The query expression to be compiled.</param>
            <typeparam name="TDc">Type of data context parameter, passed to compiled query.</typeparam>
            <typeparam name="TArg1">Type of first parameter for compiled query.</typeparam>
            <typeparam name="TArg2">Type of second parameter for compiled query.</typeparam>
            <typeparam name="TResult">Query result type.</typeparam>
        </member>
        <member name="M:LinqToDB.DataExtensions.Compile``5(LinqToDB.IDataContext,System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4}})">
            <summary>
            Compiles the query with three parameters.
            </summary>
            <returns>
            A generic delegate that represents the compiled query.
            </returns>
            <param name="dataContext">Data connection context.</param>
            <param name="query">The query expression to be compiled.</param>
            <typeparam name="TDc">Type of data context parameter, passed to compiled query.</typeparam>
            <typeparam name="TArg1">Type of first parameter for compiled query.</typeparam>
            <typeparam name="TArg2">Type of second parameter for compiled query.</typeparam>
            <typeparam name="TArg3">Type of third parameter for compiled query.</typeparam>
            <typeparam name="TResult">Query result type.</typeparam>
        </member>
        <member name="M:LinqToDB.DataExtensions.Insert``1(LinqToDB.IDataContext,``0,System.String,System.String,System.String)">
            <summary>
            Inserts record into table, identified by <typeparamref name="T"/> mapping class, using values from <paramref name="obj"/> parameter.
            </summary>
            <typeparam name="T">Mapping class.</typeparam>
            <param name="dataContext">Database connection context.</param>
            <param name="obj">Object with data to insert.</param>
            <param name="tableName">Optional table name to override default table name, extracted from <typeparamref name="T"/> mapping.</param>
            <param name="databaseName">Optional database name, to override default database name. See <see cref="M:LinqToDB.LinqExtensions.DatabaseName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="schemaName">Optional schema/owner name, to override default name. See <see cref="M:LinqToDB.LinqExtensions.SchemaName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <returns>Number of affected records.</returns>
        </member>
        <member name="M:LinqToDB.DataExtensions.InsertAsync``1(LinqToDB.IDataContext,``0,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Inserts record asynchronously into table, identified by <typeparamref name="T"/> mapping class, using values from <paramref name="obj"/> parameter.
            </summary>
            <typeparam name="T">Mapping class.</typeparam>
            <param name="dataContext">Database connection context.</param>
            <param name="obj">Object with data to insert.</param>
            <param name="tableName">Optional table name to override default table name, extracted from <typeparamref name="T"/> mapping.</param>
            <param name="databaseName">Optional database name, to override default database name. See <see cref="M:LinqToDB.LinqExtensions.DatabaseName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="schemaName">Optional schema/owner name, to override default name. See <see cref="M:LinqToDB.LinqExtensions.SchemaName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Number of affected records.</returns>
        </member>
        <member name="M:LinqToDB.DataExtensions.InsertOrReplace``1(LinqToDB.IDataContext,``0)">
            <summary>
            Inserts new record into table, identified by <typeparamref name="T"/> mapping class, using values from <paramref name="obj"/> parameter
            or update exising record, identified by match on primary key value.
            </summary>
            <typeparam name="T">Mapping class.</typeparam>
            <param name="dataContext">Database connection context.</param>
            <param name="obj">Object with data to insert or update.</param>
            <returns>Number of affected records.</returns>
        </member>
        <member name="M:LinqToDB.DataExtensions.InsertOrReplaceAsync``1(LinqToDB.IDataContext,``0,System.Threading.CancellationToken)">
            <summary>
            Asynchronously inserts new record into table, identified by <typeparamref name="T"/> mapping class, using values from <paramref name="obj"/> parameter
            or update exising record, identified by match on primary key value.
            </summary>
            <typeparam name="T">Mapping class.</typeparam>
            <param name="dataContext">Database connection context.</param>
            <param name="obj">Object with data to insert or update.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Number of affected records.</returns>
        </member>
        <member name="M:LinqToDB.DataExtensions.InsertWithIdentity``1(LinqToDB.IDataContext,``0)">
            <summary>
            Inserts record into table, identified by <typeparamref name="T"/> mapping class, using values from <paramref name="obj"/> parameter.
            Returns identity value for inserted record.
            </summary>
            <typeparam name="T">Mapping class.</typeparam>
            <param name="dataContext">Database connection context.</param>
            <param name="obj">Object with data to insert.</param>
            <returns>Inserted record's identity value.</returns>
        </member>
        <member name="M:LinqToDB.DataExtensions.InsertWithInt32Identity``1(LinqToDB.IDataContext,``0)">
            <summary>
            Inserts record into table, identified by <typeparamref name="T"/> mapping class, using values from <paramref name="obj"/> parameter.
            Returns identity value for inserted record as <see cref="T:System.Int32"/> value.
            </summary>
            <typeparam name="T">Mapping class.</typeparam>
            <param name="dataContext">Database connection context.</param>
            <param name="obj">Object with data to insert.</param>
            <returns>Inserted record's identity value.</returns>
        </member>
        <member name="M:LinqToDB.DataExtensions.InsertWithInt64Identity``1(LinqToDB.IDataContext,``0)">
            <summary>
            Inserts record into table, identified by <typeparamref name="T"/> mapping class, using values from <paramref name="obj"/> parameter.
            Returns identity value for inserted record as <see cref="T:System.Int64"/> value.
            </summary>
            <typeparam name="T">Mapping class.</typeparam>
            <param name="dataContext">Database connection context.</param>
            <param name="obj">Object with data to insert.</param>
            <returns>Inserted record's identity value.</returns>
        </member>
        <member name="M:LinqToDB.DataExtensions.InsertWithDecimalIdentity``1(LinqToDB.IDataContext,``0)">
            <summary>
            Inserts record into table, identified by <typeparamref name="T"/> mapping class, using values from <paramref name="obj"/> parameter.
            Returns identity value for inserted record as <see cref="T:System.Decimal"/> value.
            </summary>
            <typeparam name="T">Mapping class.</typeparam>
            <param name="dataContext">Database connection context.</param>
            <param name="obj">Object with data to insert.</param>
            <returns>Inserted record's identity value.</returns>
        </member>
        <member name="M:LinqToDB.DataExtensions.InsertWithIdentityAsync``1(LinqToDB.IDataContext,``0,System.Threading.CancellationToken)">
            <summary>
            Asynchronously inserts record into table, identified by <typeparamref name="T"/> mapping class, using values from <paramref name="obj"/> parameter.
            Returns identity value for inserted record.
            </summary>
            <typeparam name="T">Mapping class.</typeparam>
            <param name="dataContext">Database connection context.</param>
            <param name="obj">Object with data to insert.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Inserted record's identity value.</returns>
        </member>
        <member name="M:LinqToDB.DataExtensions.InsertWithInt32IdentityAsync``1(LinqToDB.IDataContext,``0,System.Threading.CancellationToken)">
            <summary>
            Asynchronously inserts record into table, identified by <typeparamref name="T"/> mapping class, using values from <paramref name="obj"/> parameter.
            Returns identity value for inserted record as <see cref="T:System.Int32"/> value.
            </summary>
            <typeparam name="T">Mapping class.</typeparam>
            <param name="dataContext">Database connection context.</param>
            <param name="obj">Object with data to insert.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Inserted record's identity value.</returns>
        </member>
        <member name="M:LinqToDB.DataExtensions.InsertWithInt64IdentityAsync``1(LinqToDB.IDataContext,``0,System.Threading.CancellationToken)">
            <summary>
            Asynchronously inserts record into table, identified by <typeparamref name="T"/> mapping class, using values from <paramref name="obj"/> parameter.
            Returns identity value for inserted record as <see cref="T:System.Int64"/> value.
            </summary>
            <typeparam name="T">Mapping class.</typeparam>
            <param name="dataContext">Database connection context.</param>
            <param name="obj">Object with data to insert.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Inserted record's identity value.</returns>
        </member>
        <member name="M:LinqToDB.DataExtensions.InsertWithDecimalIdentityAsync``1(LinqToDB.IDataContext,``0,System.Threading.CancellationToken)">
            <summary>
            Asynchronously inserts record into table, identified by <typeparamref name="T"/> mapping class, using values from <paramref name="obj"/> parameter.
            Returns identity value for inserted record as <see cref="T:System.Decimal"/> value.
            </summary>
            <typeparam name="T">Mapping class.</typeparam>
            <param name="dataContext">Database connection context.</param>
            <param name="obj">Object with data to insert.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Inserted record's identity value.</returns>
        </member>
        <member name="M:LinqToDB.DataExtensions.Update``1(LinqToDB.IDataContext,``0)">
            <summary>
            Updates record in table, identified by <typeparamref name="T"/> mapping class, using values from <paramref name="obj"/> parameter.
            Record to update identified by match on primary key value from <paramref name="obj"/> value.
            </summary>
            <typeparam name="T">Mapping class.</typeparam>
            <param name="dataContext">Database connection context.</param>
            <param name="obj">Object with data to update.</param>
            <returns>Number of affected records.</returns>
        </member>
        <member name="M:LinqToDB.DataExtensions.UpdateAsync``1(LinqToDB.IDataContext,``0,System.Threading.CancellationToken)">
            <summary>
            Asynchronously updates record in table, identified by <typeparamref name="T"/> mapping class, using values from <paramref name="obj"/> parameter.
            Record to update identified by match on primary key value from <paramref name="obj"/> value.
            </summary>
            <typeparam name="T">Mapping class.</typeparam>
            <param name="dataContext">Database connection context.</param>
            <param name="obj">Object with data to update.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Number of affected records.</returns>
        </member>
        <member name="M:LinqToDB.DataExtensions.Delete``1(LinqToDB.IDataContext,``0)">
            <summary>
            Deletes record in table, identified by <typeparamref name="T"/> mapping class.
            Record to delete identified by match on primary key value from <paramref name="obj"/> value.
            </summary>
            <typeparam name="T">Mapping class.</typeparam>
            <param name="dataContext">Database connection context.</param>
            <param name="obj">Object with data for delete operation.</param>
            <returns>Number of affected records.</returns>
        </member>
        <member name="M:LinqToDB.DataExtensions.DeleteAsync``1(LinqToDB.IDataContext,``0,System.Threading.CancellationToken)">
            <summary>
            Asynchronously deletes record in table, identified by <typeparamref name="T"/> mapping class.
            Record to delete identified by match on primary key value from <paramref name="obj"/> value.
            </summary>
            <typeparam name="T">Mapping class.</typeparam>
            <param name="dataContext">Database connection context.</param>
            <param name="obj">Object with data for delete operation.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Number of affected records.</returns>
        </member>
        <member name="M:LinqToDB.DataExtensions.CreateTable``1(LinqToDB.IDataContext,System.String,System.String,System.String,System.String,System.String,LinqToDB.SqlQuery.DefaulNullable)">
            <summary>
            Creates new table in database for mapping class <typeparamref name="T"/>.
            Information about table name, columns names and types is taken from mapping class.
            </summary>
            <typeparam name="T">Mapping class.</typeparam>
            <param name="dataContext">Database connection context.</param>
            <param name="tableName">Optional table name to override default table name, extracted from <typeparamref name="T"/> mapping.</param>
            <param name="databaseName">Optional database name, to override default database name. See <see cref="M:LinqToDB.LinqExtensions.DatabaseName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="schemaName">Optional schema/owner name, to override default name. See <see cref="M:LinqToDB.LinqExtensions.SchemaName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="statementHeader">Optional replacement for <c>"CREATE TABLE table_name"</c> header. Header is a template with <c>{0}</c> parameter for table name.</param>
            <param name="statementFooter">Optional SQL, appended to generated create table statement.</param>
            <param name="defaulNullable">Defines how columns nullability flag should be generated:
            <para> - <see cref="F:LinqToDB.SqlQuery.DefaulNullable.Null"/> - generate only <c>NOT NULL</c> for non-nullable fields. Missing nullability information treated as <c>NULL</c> by database.</para>
            <para> - <see cref="F:LinqToDB.SqlQuery.DefaulNullable.NotNull"/> - generate only <c>NULL</c> for nullable fields. Missing nullability information treated as <c>NOT NULL</c> by database.</para>
            <para> - <see cref="F:LinqToDB.SqlQuery.DefaulNullable.None"/> - explicitly generate <c>NULL</c> and <c>NOT NULL</c> for all columns.</para>
            Default value: <see cref="F:LinqToDB.SqlQuery.DefaulNullable.None"/>.
            </param>
            <returns>Created table as queryable source.</returns>
        </member>
        <member name="M:LinqToDB.DataExtensions.CreateTableAsync``1(LinqToDB.IDataContext,System.String,System.String,System.String,System.String,System.String,LinqToDB.SqlQuery.DefaulNullable,System.Threading.CancellationToken)">
            <summary>
            Asynchronously creates new table in database for mapping class <typeparamref name="T"/>.
            Information about table name, columns names and types is taken from mapping class.
            </summary>
            <typeparam name="T">Mapping class.</typeparam>
            <param name="dataContext">Database connection context.</param>
            <param name="tableName">Optional table name to override default table name, extracted from <typeparamref name="T"/> mapping.</param>
            <param name="databaseName">Optional database name, to override default database name. See <see cref="M:LinqToDB.LinqExtensions.DatabaseName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="schemaName">Optional schema/owner name, to override default name. See <see cref="M:LinqToDB.LinqExtensions.SchemaName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="statementHeader">Optional replacement for <c>"CREATE TABLE table_name"</c> header. Header is a template with <c>{0}</c> parameter for table name.</param>
            <param name="statementFooter">Optional SQL, appended to generated create table statement.</param>
            <param name="defaulNullable">Defines how columns nullability flag should be generated:
            <para> - <see cref="F:LinqToDB.SqlQuery.DefaulNullable.Null"/> - generate only <c>NOT NULL</c> for non-nullable fields. Missing nullability information treated as <c>NULL</c> by database.</para>
            <para> - <see cref="F:LinqToDB.SqlQuery.DefaulNullable.NotNull"/> - generate only <c>NULL</c> for nullable fields. Missing nullability information treated as <c>NOT NULL</c> by database.</para>
            <para> - <see cref="F:LinqToDB.SqlQuery.DefaulNullable.None"/> - explicitly generate <c>NULL</c> and <c>NOT NULL</c> for all columns.</para>
            Default value: <see cref="F:LinqToDB.SqlQuery.DefaulNullable.None"/>.
            </param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Created table as queryable source.</returns>
        </member>
        <member name="M:LinqToDB.DataExtensions.DropTable``1(LinqToDB.IDataContext,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Drops table identified by mapping class <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Mapping class.</typeparam>
            <param name="dataContext">Database connection context.</param>
            <param name="tableName">Optional table name to override default table name, extracted from <typeparamref name="T"/> mapping.</param>
            <param name="databaseName">Optional database name, to override default database name. See <see cref="M:LinqToDB.LinqExtensions.DatabaseName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="schemaName">Optional schema/owner name, to override default name. See <see cref="M:LinqToDB.LinqExtensions.SchemaName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="throwExceptionIfNotExists">If <c>false</c>, any exception during drop operation will be silently catched and <c>0</c> returned.
            This behavior is not correct and will be fixed in future to mask only missing table exceptions.
            Tracked by <a href="https://github.com/linq2db/linq2db/issues/798">issue</a>.
            Default value: <c>true</c>.</param>
        </member>
        <member name="M:LinqToDB.DataExtensions.DropTable``1(LinqToDB.ITable{``0},System.String,System.String,System.String,System.Boolean)">
            <summary>
            Drops table identified by <paramref name="table"/> parameter.
            </summary>
            <typeparam name="T">Mapping class.</typeparam>
            <param name="table">Dropped table.</param>
            <param name="tableName">Optional table name to override default table name, extracted from <typeparamref name="T"/> mapping.</param>
            <param name="databaseName">Optional database name, to override default database name. See <see cref="M:LinqToDB.LinqExtensions.DatabaseName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="schemaName">Optional schema/owner name, to override default name. See <see cref="M:LinqToDB.LinqExtensions.SchemaName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="throwExceptionIfNotExists">If <c>false</c>, any exception during drop operation will be silently catched and <c>0</c> returned.
            This behavior is not correct and will be fixed in future to mask only missing table exceptions.
            Tracked by <a href="https://github.com/linq2db/linq2db/issues/798">issue</a>.
            Default value: <c>true</c>.</param>
        </member>
        <member name="M:LinqToDB.DataExtensions.DropTableAsync``1(LinqToDB.IDataContext,System.String,System.String,System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously drops table identified by mapping class <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">Mapping class.</typeparam>
            <param name="dataContext">Database connection context.</param>
            <param name="tableName">Optional table name to override default table name, extracted from <typeparamref name="T"/> mapping.</param>
            <param name="databaseName">Optional database name, to override default database name. See <see cref="M:LinqToDB.LinqExtensions.DatabaseName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="schemaName">Optional schema/owner name, to override default name. See <see cref="M:LinqToDB.LinqExtensions.SchemaName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="throwExceptionIfNotExists">If <c>false</c>, any exception during drop operation will be silently catched and <c>0</c> returned.
            This behavior is not correct and will be fixed in future to mask only missing table exceptions.
            Tracked by <a href="https://github.com/linq2db/linq2db/issues/798">issue</a>.
            Default value: <c>true</c>.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Asynchronous operation completion task.</returns>
        </member>
        <member name="M:LinqToDB.DataExtensions.DropTableAsync``1(LinqToDB.ITable{``0},System.String,System.String,System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously drops table identified by <paramref name="table"/> parameter.
            </summary>
            <typeparam name="T">Mapping class.</typeparam>
            <param name="table">Dropped table.</param>
            <param name="tableName">Optional table name to override default table name, extracted from <typeparamref name="T"/> mapping.</param>
            <param name="databaseName">Optional database name, to override default database name. See <see cref="M:LinqToDB.LinqExtensions.DatabaseName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="schemaName">Optional schema/owner name, to override default name. See <see cref="M:LinqToDB.LinqExtensions.SchemaName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.</param>
            <param name="throwExceptionIfNotExists">If <c>false</c>, any exception during drop operation will be silently catched and <c>0</c> returned.
            This behavior is not correct and will be fixed in future to mask only missing table exceptions.
            Tracked by <a href="https://github.com/linq2db/linq2db/issues/798">issue</a>.
            Default value: <c>true</c>.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Asynchronous operation completion task.</returns>
        </member>
        <member name="P:LinqToDB.SqlProvider.BasicSqlBuilder.WrapJoinCondition">
            <summary>
            True if it is needed to wrap join condition with ()
            </summary>
            <example>
            INNER JOIN Table2 t2 ON (t1.Value = t2.Value)
            </example>
        </member>
        <member name="F:LinqToDB.DataProvider.Firebird.FirebirdConfiguration.IsLiteralEncodingSupported">
            <summary>
            Specifies that Firebird supports literal encoding. Availiable from version 2.5.
            </summary>
        </member>
        <member name="T:LinqToDB.DataProvider.Firebird.FirebirdIdentifierQuoteMode">
            <summary>
            Possible modes for Firebird identifier quotes.
            </summary>
        </member>
        <member name="F:LinqToDB.DataProvider.Firebird.FirebirdIdentifierQuoteMode.None">
            <summary>
            Do not quote identifiers.
            </summary>
        </member>
        <member name="F:LinqToDB.DataProvider.Firebird.FirebirdIdentifierQuoteMode.Quote">
            <summary>
            Always quote identifiers.
            </summary>
        </member>
        <member name="F:LinqToDB.DataProvider.Firebird.FirebirdIdentifierQuoteMode.Auto">
            <summary>
            quote identifiers if needed.
            </summary>
        </member>
        <member name="F:LinqToDB.DataProvider.Firebird.FirebirdSqlBuilder.IdentifierQuoteMode">
            <summary>
            Specifies how identifiers like table and field names should be quoted.
            </summary>
            <remarks>
            By default identifiers will not be quoted.
            </remarks>
        </member>
        <member name="T:LinqToDB.DataType">
            <summary>
            List of data types, supported by linq2db.
            Provider-level support depends on database capabilities and current implementation
            support level and could vary for different providers.
            </summary>
        </member>
        <member name="F:LinqToDB.DataType.Undefined">
            <summary>
            Undefined data type.
            </summary>
        </member>
        <member name="F:LinqToDB.DataType.Char">
            <summary>
            A fixed-length stream of non-Unicode characters ranging between 1 and 8,000 characters.
            </summary>
        </member>
        <member name="F:LinqToDB.DataType.VarChar">
            <summary>
            A variable-length stream of non-Unicode characters ranging between 1 and 8,000 characters.
            Use VarChar when the database column is varchar(max).
            </summary>
        </member>
        <member name="F:LinqToDB.DataType.Text">
            <summary>
            A variable-length stream of non-Unicode data with a maximum length of 2 31 -1 (or 2,147,483,647) characters.
            </summary>
        </member>
        <member name="F:LinqToDB.DataType.NChar">
            <summary>
            A fixed-length stream of Unicode characters ranging between 1 and 4,000 characters.
            </summary>
        </member>
        <member name="F:LinqToDB.DataType.NVarChar">
            <summary>
            A variable-length stream of Unicode characters ranging between 1 and 4,000 characters.
            Implicit conversion fails if the string is greater than 4,000 characters.
            </summary>
        </member>
        <member name="F:LinqToDB.DataType.NText">
            <summary>
            A variable-length stream of Unicode data with a maximum length of 2 30 - 1 (or 1,073,741,823) characters.
            </summary>
        </member>
        <member name="F:LinqToDB.DataType.Binary">
            <summary>
            A fixed-length stream of binary data ranging between 1 and 8,000 bytes.
            </summary>
        </member>
        <member name="F:LinqToDB.DataType.VarBinary">
            <summary>
            A variable-length stream of binary data ranging between 1 and 8,000 bytes.
            Implicit conversion fails if the byte array is greater than 8,000 bytes.
            </summary>
        </member>
        <member name="F:LinqToDB.DataType.Blob">
            <summary>
            Binary large object.
            </summary>
        </member>
        <member name="F:LinqToDB.DataType.Image">
            <summary>
            A variable-length stream of binary data ranging from 0 to 2 31 -1 (or 2,147,483,647) bytes.
            </summary>
        </member>
        <member name="F:LinqToDB.DataType.Boolean">
            <summary>
            A simple type representing Boolean values of true or false.
            </summary>
        </member>
        <member name="F:LinqToDB.DataType.Guid">
            <summary>
            A globally unique identifier (or GUID).
            </summary>
        </member>
        <member name="F:LinqToDB.DataType.SByte">
            <summary>
            An integral type representing signed 8-bit integers with values between -128 and 127.
            </summary>
        </member>
        <member name="F:LinqToDB.DataType.Int16">
            <summary>
            An integral type representing signed 16-bit integers with values between -32768 and 32767.
            </summary>
        </member>
        <member name="F:LinqToDB.DataType.Int32">
            <summary>
            An integral type representing signed 32-bit integers with values between -2147483648 and 2147483647.
            </summary>
        </member>
        <member name="F:LinqToDB.DataType.Int64">
            <summary>
            An integral type representing signed 64-bit integers with values between -9223372036854775808 and 9223372036854775807.
            </summary>
        </member>
        <member name="F:LinqToDB.DataType.Byte">
            <summary>
            An 8-bit unsigned integer ranging in value from 0 to 255.
            </summary>
        </member>
        <member name="F:LinqToDB.DataType.UInt16">
            <summary>
            An integral type representing unsigned 16-bit integers with values between 0 and 65535.
            </summary>
        </member>
        <member name="F:LinqToDB.DataType.UInt32">
            <summary>
            An integral type representing unsigned 32-bit integers with values between 0 and 4294967295.
            </summary>
        </member>
        <member name="F:LinqToDB.DataType.UInt64">
            <summary>
            An integral type representing unsigned 64-bit integers with values between 0 and 18446744073709551615.
            </summary>
        </member>
        <member name="F:LinqToDB.DataType.Single">
            <summary>
            A floating point number within the range of -3.40E +38 through 3.40E +38.
            </summary>
        </member>
        <member name="F:LinqToDB.DataType.Double">
            <summary>
            A floating point number within the range of -1.79E +308 through 1.79E +308.
            </summary>
        </member>
        <member name="F:LinqToDB.DataType.Decimal">
            <summary>
            A simple type representing values with fixed precision and scale numbers.
            When maximum precision is used, valid values are from -10^38+1 through 10^38-1.
            </summary>
        </member>
        <member name="F:LinqToDB.DataType.Money">
            <summary>
            A currency value ranging from -2 63 (or -9,223,372,036,854,775,808) to 2 63 -1 (or +9,223,372,036,854,775,807)
            with an accuracy to a ten-thousandth of a currency unit.
            </summary>
        </member>
        <member name="F:LinqToDB.DataType.SmallMoney">
            <summary>
            A currency value ranging from -214,748.3648 to +214,748.3647 with an accuracy to a ten-thousandth of a currency unit.
            </summary>
        </member>
        <member name="F:LinqToDB.DataType.Date">
            <summary>
            A type representing a date value.
            </summary>
        </member>
        <member name="F:LinqToDB.DataType.Time">
            <summary>
            A type representing a time value.
            </summary>
        </member>
        <member name="F:LinqToDB.DataType.DateTime">
            <summary>
            Date and time data ranging in value from January 1, 1753 to December 31, 9999 to an accuracy of 3.33 milliseconds.
            </summary>
        </member>
        <member name="F:LinqToDB.DataType.DateTime2">
            <summary>
            Date and time data.
            Date value range is from January 1,1 AD through December 31, 9999 AD.
            Time value range is 00:00:00 through 23:59:59.9999999 with an accuracy of 100 nanoseconds.
            </summary>
        </member>
        <member name="F:LinqToDB.DataType.SmallDateTime">
            <summary>
            Date and time data ranging in value from January 1, 1900 to June 6, 2079 to an accuracy of one minute.
            </summary>
        </member>
        <member name="F:LinqToDB.DataType.DateTimeOffset">
            <summary>
            Date and time data with time zone awareness.
            Date value range is from January 1,1 AD through December 31, 9999 AD.
            Time value range is 00:00:00 through 23:59:59.9999999 with an accuracy of 100 nanoseconds.
            Time zone value range is -14:00 through +14:00.
            </summary>
        </member>
        <member name="F:LinqToDB.DataType.Timestamp">
            <summary>
            Array of type Byte.
            Automatically generated binary numbers, which are guaranteed to be unique within a database.
            timestamp is used typically as a mechanism for version-stamping table rows. The storage size is 8 bytes.
            </summary>
        </member>
        <member name="F:LinqToDB.DataType.Xml">
            <summary>
            An XML value. Obtain the XML as a string using the GetValue method or Value property,
            or as an XmlReader by calling the CreateReader method.
            </summary>
        </member>
        <member name="F:LinqToDB.DataType.Variant">
            <summary>
            A general type representing any reference or value type not explicitly represented by another DataType value.
            </summary>
        </member>
        <member name="F:LinqToDB.DataType.VarNumeric">
            <summary>
            A variable-length numeric value.
            </summary>
        </member>
        <member name="F:LinqToDB.DataType.Udt">
            <summary>
            A SQL Server 2005 user-defined type (UDT).
            </summary>
        </member>
        <member name="F:LinqToDB.DataType.BitArray">
            <summary>
            Array of bits.
            </summary>
        </member>
        <member name="F:LinqToDB.DataType.Dictionary">
            <summary>
            Dictionary type for key-value pairs.
            </summary>
        </member>
        <member name="F:LinqToDB.DataType.Cursor">
            <summary>
            Result set (for example OracleDbType.RefCursor).
            </summary>
        </member>
        <member name="F:LinqToDB.DataType.Json">
            <summary>
            Json type utilized in postgres provider.
            </summary>
        </member>
        <member name="F:LinqToDB.DataType.BinaryJson">
            <summary>
            Binary type utilized postgres provider (jsonb).
            </summary>
        </member>
        <member name="P:LinqToDB.Data.DataParameter.DataType">
            <summary>
            Gets or sets the <see cref="T:LinqToDB.DataType"/> of the parameter.
            </summary>
            <returns>
            One of the <see cref="T:LinqToDB.DataType"/> values. The default is <see cref="F:LinqToDB.DataType.Undefined"/>.
            </returns>
        </member>
        <member name="P:LinqToDB.Data.DataParameter.Direction">
            <summary>
            Gets or sets a value indicating whether the parameter is input-only, output-only, bidirectional, or a stored procedure return value parameter.
            </summary>
            <returns>
            One of the <see cref="T:System.Data.ParameterDirection"/> values. The default is Input.
            </returns>
        </member>
        <member name="P:LinqToDB.Data.DataParameter.Name">
            <summary>
            Gets or sets the name of the <see cref="T:LinqToDB.Data.DataParameter"/>.
            </summary>
            <returns>
            The name of the <see cref="T:LinqToDB.Data.DataParameter"/>. The default is an empty string.
            </returns>
        </member>
        <member name="P:LinqToDB.Data.DataParameter.Size">
            <summary>
            Gets or sets the maximum size, in bytes, of the data within the column.
            </summary>
            
            <returns>
            The maximum size, in bytes, of the data within the column. The default value is inferred from the parameter value.
            </returns>
        </member>
        <member name="P:LinqToDB.Data.DataParameter.Value">
            <summary>
            Gets or sets the value of the parameter.
            </summary>
            <returns>
            An <see cref="T:System.Object"/> that is the value of the parameter. The default value is null.
            </returns>
        </member>
        <member name="T:LinqToDB.ExpressionMethodAttribute">
            <summary>
            When applied to method or property, tells linq2db to replace them in queryable LINQ expression with another expression,
            returned by method, specified in this attribute.
            
            Requirements to expression method:
            <para>
            - expression method should be in the same class and replaced property of method;
            - method could be private.
            </para>
            <para>
            When applied to property, expression:
            - method should return function expression with the same return type as property type;
            - expression method could take up to two parameters in any order - current object parameter and database connection context object.
            </para>
            <para>
            When applied to method:
            - expression method should return function expression with the same return type as method return type;
            - method cannot have void return type;
            - parameters in expression method should go in the same order as in substituted method;
            - expression could take method instance object as first parameter;
            - expression could take database connection context object as last parameter;
            - last method parameters could be ommited from expression method, but only if you don't add database connection context parameter.
            </para>
            </summary>
        </member>
        <member name="M:LinqToDB.ExpressionMethodAttribute.#ctor(System.String)">
            <summary>
            Creates instance of attribute.
            </summary>
            <param name="methodName">Name of method in the same class that returns substitution expression.</param>
        </member>
        <member name="M:LinqToDB.ExpressionMethodAttribute.#ctor(System.String,System.String)">
            <summary>
            Creates instance of attribute.
            </summary>
            <param name="configuration">Connection configuration, for which this attribute should be taken into account.</param>
            <param name="methodName">Name of method in the same class that returns substitution expression.</param>
        </member>
        <member name="P:LinqToDB.ExpressionMethodAttribute.Configuration">
            <summary>
            Mapping schema configuration name, for which this attribute should be taken into account.
            <see cref="T:LinqToDB.ProviderName"/> for standard names.
            Attributes with <c>null</c> or empty string <see cref="P:LinqToDB.ExpressionMethodAttribute.Configuration"/> value applied to all configurations (if no attribute found for current configuration).
            </summary>
        </member>
        <member name="P:LinqToDB.ExpressionMethodAttribute.MethodName">
            <summary>
            Name of method in the same class that returns substitution expression.
            </summary>
        </member>
        <member name="M:LinqToDB.Expressions.Extensions.GetDebugView(System.Linq.Expressions.Expression)">
            <summary>
            Gets the DebugView internal property value of provided expression.
            </summary>
            <param name="expression">Expression to get DebugView.</param>
            <returns>DebugView value.</returns>
        </member>
        <member name="M:LinqToDB.Expressions.Extensions.GetCount(System.Linq.Expressions.Expression,System.Func{System.Linq.Expressions.Expression,System.Boolean})">
            <summary>
            Returns the total number of expression items which are matching the given.
            <paramref name="func"/>.
            </summary>
            <param name="expr">Expression-Tree which gets counted.</param>
            <param name="func">Predicate which is used to test if the given expression should be counted.</param>
        </member>
        <member name="M:LinqToDB.Expressions.Extensions.Visit(System.Linq.Expressions.Expression,System.Action{System.Linq.Expressions.Expression})">
            <summary>
            Calls the given <paramref name="func"/> for each child node of the <paramref name="expr"/>.
            </summary>
        </member>
        <member name="M:LinqToDB.Expressions.Extensions.Visit(System.Linq.Expressions.Expression,System.Func{System.Linq.Expressions.Expression,System.Boolean})">
            <summary>
            Calls the given <paramref name="func"/> for each node of the <paramref name="expr"/>.
            If the <paramref name="func"/> returns false, no childs of the tested expression will be enumerated.
            </summary>
        </member>
        <member name="M:LinqToDB.Expressions.Extensions.Find(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Enumerates the expression tree and returns the <paramref name="exprToFind"/> if it's
            contained within the <paramref name="expr"/>.
            </summary>
        </member>
        <member name="M:LinqToDB.Expressions.Extensions.Find(System.Linq.Expressions.Expression,System.Func{System.Linq.Expressions.Expression,System.Boolean})">
            <summary>
            Enumerates the given <paramref name="expr"/> and returns the first sub-expression
            which matches the given <paramref name="func"/>. If no expression was found, null is returned.
            </summary>
        </member>
        <member name="M:LinqToDB.Expressions.Extensions.GetBody(System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.Expression)">
            <summary>
            Returns the body of <paramref name="lambda"/> but replaces the first parameter of that
            lambda expression with the <paramref name="exprToReplaceParameter"/> expression.
            </summary>
        </member>
        <member name="M:LinqToDB.Expressions.Extensions.GetBody(System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Returns the body of <paramref name="lambda"/> but replaces the first two parameters of
            that lambda expression with the given replace expressions.
            </summary>
        </member>
        <member name="M:LinqToDB.Expressions.Extensions.Transform(System.Linq.Expressions.Expression,System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <summary>
            Enumerates the expression tree of <paramref name="expr"/> and might
            replace expression with the returned value of the given <paramref name="func"/>.
            </summary>
            <returns>The modified expression.</returns>
        </member>
        <member name="T:LinqToDB.Expressions.IGenericInfoProvider">
            <summary>
            Generic conversions provider.
            Implementation class must be generic, as type parameters will be used for conversion initialization in
            <see cref="M:LinqToDB.Expressions.IGenericInfoProvider.SetInfo(LinqToDB.Mapping.MappingSchema)"/> method.
            <example>
            // this conversion provider adds conversion from IEnumerable`T to ImmutableList`T for specific T type parameter
            class EnumerableToImmutableListConvertProvider&lt;T&gt; : IGenericInfoProvider
            {
                public void SetInfo(MappingSchema mappingSchema)
                {
                    mappingSchema.SetConvertExpression&lt;IEnumerable&lt;T&gt;,ImmutableList&lt;T&gt;&gt;(
                        t =&gt; ImmutableList.Create(t.ToArray()));
                }
            }
            </example>
            <see cref="M:LinqToDB.Mapping.MappingSchema.SetGenericConvertProvider(System.Type)"/> for more details.
            </summary>
        </member>
        <member name="M:LinqToDB.Expressions.IGenericInfoProvider.SetInfo(LinqToDB.Mapping.MappingSchema)">
            <summary>
            IMplementation should use this method to provide conversions for generic types with type parameters, used
            to instantiate instance of current class.
            </summary>
            <param name="mappingSchema">Mapping schema, to which conversions should be added.</param>
        </member>
        <member name="T:LinqToDB.Expressions.SqlQueryDependentAttribute">
            <summary>
            Used for controlling query caching of custom SQL Functions. 
            Parameter with this attribute will be evaluated on client side before generating SQL.
            </summary>
        </member>
        <member name="M:LinqToDB.Extensions.ReflectionExtensions.GetMemberEx(System.Type,System.Reflection.MemberInfo)">
            <summary>
            Returns <see cref="T:System.Reflection.MemberInfo"/> of <paramref name="type"/> described by <paramref name="memberInfo"/>
            It us useful when member's declared and reflected types are not the same
            </summary>
            <remarks>This method searches only properties, fields and methods</remarks>
            <param name="type"><see cref="T:System.Type"/> to find member info</param>
            <param name="memberInfo"><see cref="T:System.Reflection.MemberInfo"/> </param>
            <returns><see cref="T:System.Reflection.MemberInfo"/> or null</returns>
        </member>
        <member name="M:LinqToDB.Extensions.ReflectionExtensions.GetAttributes``1(System.Type)">
            <summary>
            Returns an array of custom attributes applied to a type.
            </summary>
            <param name="type">A type instance.</param>
            <typeparam name="T">The type of attribute to search for.
            Only attributes that are assignable to this type are returned.</typeparam>
            <returns>An array of custom attributes applied to this type,
            or an array with zero (0) elements if no attributes have been applied.</returns>
        </member>
        <member name="M:LinqToDB.Extensions.ReflectionExtensions.GetFirstAttribute``1(System.Type)">
            <summary>
            Retrieves a custom attribute applied to a type.
            </summary>
            <param name="type">A type instance.</param>
            <typeparam name="T">The type of attribute to search for.
            Only attributes that are assignable to this type are returned.</typeparam>
            <returns>A reference to the first custom attribute of type attributeType
            that is applied to element, or null if there is no such attribute.</returns>
        </member>
        <member name="M:LinqToDB.Extensions.ReflectionExtensions.IsNullable(System.Type)">
            <summary>
            Gets a value indicating whether a type (or type's element type)
            instance can be null in the underlying data store.
            </summary>
            <param name="type">A <see cref="T:System.Type"/> instance. </param>
            <returns> True, if the type parameter is a closed generic nullable type; otherwise, False.</returns>
            <remarks>Arrays of Nullable types are treated as Nullable types.</remarks>
        </member>
        <member name="M:LinqToDB.Extensions.ReflectionExtensions.ToUnderlying(System.Type)">
            <summary>
            Returns the underlying type argument of the specified type.
            </summary>
            <param name="type">A <see cref="T:System.Type"/> instance. </param>
            <returns><list>
            <item>The type argument of the type parameter,
            if the type parameter is a closed generic nullable type.</item>
            <item>The underlying Type if the type parameter is an enum type.</item>
            <item>Otherwise, the type itself.</item>
            </list>
            </returns>
        </member>
        <member name="M:LinqToDB.Extensions.ReflectionExtensions.IsSameOrParentOf(System.Type,System.Type)">
            <summary>
            Determines whether the specified types are considered equal.
            </summary>
            <param name="parent">A <see cref="T:System.Type"/> instance. </param>
            <param name="child">A type possible derived from the <c>parent</c> type</param>
            <returns>True, when an object instance of the type <c>child</c>
            can be used as an object of the type <c>parent</c>; otherwise, false.</returns>
            <remarks>Note that nullable types does not have a parent-child relation to it's underlying type.
            For example, the 'int?' type (nullable int) and the 'int' type
            aren't a parent and it's child.</remarks>
        </member>
        <member name="M:LinqToDB.Extensions.ReflectionExtensions.GetListItemType(System.Collections.IEnumerable)">
            <summary>
             Gets the Type of a list item.
            </summary>
             <param name="list">A <see cref="T:System.Object"/> instance. </param>
            <returns>The Type instance that represents the exact runtime type of a list item.</returns>
        </member>
        <member name="M:LinqToDB.Extensions.ReflectionExtensions.GetListItemType(System.Type)">
            <summary>
             Gets the Type of a list item.
            </summary>
             <param name="listType">A <see cref="T:System.Type"/> instance. </param>
            <returns>The Type instance that represents the exact runtime type of a list item.</returns>
        </member>
        <member name="M:LinqToDB.Extensions.ReflectionExtensions.IsScalar(System.Type,System.Boolean)">
            <summary>
            Gets a value indicating whether a type can be used as a db primitive.
            </summary>
            <param name="type">A <see cref="T:System.Type"/> instance. </param>
            <param name="checkArrayElementType"></param>
            <returns> True, if the type parameter is a primitive type; otherwise, False.</returns>
            <remarks><see cref="T:System.String"/>. <see cref="T:System.IO.Stream"/>. 
            <see cref="T:System.Xml.XmlReader"/>. <see cref="!:XmlDocument"/>. are specially handled by the library
            and, therefore, can be treated as scalar types.</remarks>
        </member>
        <member name="M:LinqToDB.Extensions.ReflectionExtensions.GetGenericArguments(System.Type,System.Type)">
            <summary>
             Returns an array of Type objects that represent the type arguments
             of a generic type or the type parameters of a generic type definition.
            </summary>
             <param name="type">A <see cref="T:System.Type"/> instance.</param>
            <param name="baseType">Non generic base type.</param>
            <returns>An array of Type objects that represent the type arguments
             of a generic type. Returns an empty array if the current type is not a generic type.</returns>
        </member>
        <member name="T:LinqToDB.IDataContext">
            <summary>
            Database connection abstraction interface.
            </summary>
        </member>
        <member name="M:LinqToDB.IDataContext.GetReaderExpression(LinqToDB.Mapping.MappingSchema,System.Data.IDataReader,System.Int32,System.Linq.Expressions.Expression,System.Type)">
            <summary>
            Returns column value reader expression.
            </summary>
            <param name="mappingSchema">Current mapping schema.</param>
            <param name="reader">Data reader instance.</param>
            <param name="idx">Column index.</param>
            <param name="readerExpression">Data reader accessor expression.</param>
            <param name="toType">Expected value type.</param>
            <returns>Column read expression.</returns>
        </member>
        <member name="M:LinqToDB.IDataContext.IsDBNullAllowed(System.Data.IDataReader,System.Int32)">
            <summary>
            Returns true, of data reader column could contain <see cref="T:System.DBNull"/> value.
            </summary>
            <param name="reader">Data reader instance.</param>
            <param name="idx">Column index.</param>
            <returns><c>true</c> or <c>null</c> if column could contain <see cref="T:System.DBNull"/>.</returns>
        </member>
        <member name="M:LinqToDB.IDataContext.Clone(System.Boolean)">
            <summary>
            Clones current context.
            </summary>
            <returns>Cloned context.</returns>
        </member>
        <member name="M:LinqToDB.IDataContext.Close">
            <summary>
            Closes context connection and disposes underlying resources.
            </summary>
        </member>
        <member name="M:LinqToDB.IDataContext.GetQueryRunner(LinqToDB.Linq.Query,System.Int32,System.Linq.Expressions.Expression,System.Object[])">
            <summary>
            Returns query runner service for current context.
            </summary>
            <param name="query">Query batch object.</param>
            <param name="queryNumber">Index of query in query batch.</param>
            <param name="expression">Query results mapping expression.</param>
            <param name="parameters">Query parameters.</param>
            <returns>Query runner service.</returns>
        </member>
        <member name="P:LinqToDB.IDataContext.ContextID">
            <summary>
            Provider identifier.
            </summary>
        </member>
        <member name="P:LinqToDB.IDataContext.CreateSqlProvider">
            <summary>
            Gets SQL builder service factory method for current context data provider.
            </summary>
        </member>
        <member name="P:LinqToDB.IDataContext.GetSqlOptimizer">
            <summary>
            Gets SQL optimizer service factory method for current context data provider.
            </summary>
        </member>
        <member name="P:LinqToDB.IDataContext.SqlProviderFlags">
            <summary>
            Gets SQL support flags for current context data provider.
            </summary>
        </member>
        <member name="P:LinqToDB.IDataContext.DataReaderType">
            <summary>
            Gets data reader implementation type for current context data provider.
            </summary>
        </member>
        <member name="P:LinqToDB.IDataContext.MappingSchema">
            <summary>
            Gets maping schema, used for current context.
            </summary>
        </member>
        <member name="P:LinqToDB.IDataContext.InlineParameters">
            <summary>
            Gets or sets option to force inline parameter values as literals into command text. If parameter inlining not supported
            for specific value type, it will be used as parameter.
            </summary>
        </member>
        <member name="P:LinqToDB.IDataContext.QueryHints">
            <summary>
            Gets list of query hints (writable collection), that will be used for all queries, executed using current context.
            </summary>
        </member>
        <member name="P:LinqToDB.IDataContext.NextQueryHints">
            <summary>
            Gets list of query hints (writable collection), that will be used only for next query, executed using current context.
            </summary>
        </member>
        <member name="P:LinqToDB.IDataContext.CloseAfterUse">
            <summary>
            Gets or sets flag to close context after query execution or leave it open.
            </summary>
        </member>
        <member name="E:LinqToDB.IDataContext.OnClosing">
            <summary>
            Event, triggered before context connection closed using <see cref="M:LinqToDB.IDataContext.Close"/> method.
            </summary>
        </member>
        <member name="M:LinqToDB.Linq.IQueryRunner.ExecuteNonQuery">
            <summary>
            Executes query and returns number of affected records.
            </summary>
            <returns>Number of affected records.</returns>
        </member>
        <member name="M:LinqToDB.Linq.IQueryRunner.ExecuteScalar">
            <summary>
            Executes query and returns scalar value.
            </summary>
            <returns>Scalar value.</returns>
        </member>
        <member name="M:LinqToDB.Linq.IQueryRunner.ExecuteReader">
            <summary>
            Executes query and returns data reader.
            </summary>
            <returns>Data reader with query results.</returns>
        </member>
        <member name="M:LinqToDB.Linq.IQueryRunner.ExecuteNonQueryAsync(System.Threading.CancellationToken)">
            <summary>
            Executes query asynchronously and returns number of affected records.
            </summary>
            <param name="cancellationToken">Asynchronous operation cancellation token.</param>
            <returns>Number of affected records.</returns>
        </member>
        <member name="M:LinqToDB.Linq.IQueryRunner.ExecuteScalarAsync(System.Threading.CancellationToken)">
            <summary>
            Executes query asynchronously and returns scalar value.
            </summary>
            <param name="cancellationToken">Asynchronous operation cancellation token.</param>
            <returns>Scalar value.</returns>
        </member>
        <member name="M:LinqToDB.Linq.IQueryRunner.ExecuteReaderAsync(System.Threading.CancellationToken)">
            <summary>
            Executes query asynchronously and returns data reader.
            </summary>
            <param name="cancellationToken">Asynchronous operation cancellation token.</param>
            <returns>Data reader with query results.</returns>
        </member>
        <member name="M:LinqToDB.Linq.IQueryRunner.GetSqlText">
            <summary>
            Returns SQL text for query.
            </summary>
            <returns>Query SQL text.</returns>
        </member>
        <member name="T:LinqToDB.Mapping.MappingSchema">
            <summary>
            Mapping schema.
            </summary>
        </member>
        <member name="M:LinqToDB.Mapping.MappingSchema.#ctor">
            <summary>
            Creates mapping schema instance.
            </summary>
        </member>
        <member name="M:LinqToDB.Mapping.MappingSchema.#ctor(LinqToDB.Mapping.MappingSchema[])">
            <summary>
            Creates mapping schema, derived from other mapping schemas.
            </summary>
            <param name="schemas">Base mapping schemas.</param>
        </member>
        <member name="M:LinqToDB.Mapping.MappingSchema.#ctor(System.String)">
            <summary>
            Creates mapping schema for specified configuration name.
            </summary>
            <param name="configuration">Mapping schema configuration name.
            <see cref="T:LinqToDB.ProviderName"/> for standard names.</param>
        </member>
        <member name="M:LinqToDB.Mapping.MappingSchema.#ctor(System.String,LinqToDB.Mapping.MappingSchema[])">
            <summary>
            Creates mapping schema with specified configuration name and base mapping schemas.
            </summary>
            <param name="configuration">Mapping schema configuration name.
            <see cref="T:LinqToDB.ProviderName"/> for standard names.</param>
            <param name="schemas">Base mapping schemas.</param>
        </member>
        <member name="M:LinqToDB.Mapping.MappingSchema.SetValueToSqlConverter(System.Type,System.Action{System.Text.StringBuilder,LinqToDB.SqlQuery.SqlDataType,System.Object})">
            <summary>
            Sets value to SQL converter action for specific value type.
            </summary>
            <param name="type">Value type.</param>
            <param name="converter">Converter action. Action accepts three parameters:
            - SQL string builder to write generated value SQL to;
            - value SQL type descriptor;
            - value.
            </param>
        </member>
        <member name="M:LinqToDB.Mapping.MappingSchema.GetDefaultValue(System.Type)">
            <summary>
            Returns default value for specified type.
            Default value is a value, used instead of <c>NULL</c> value, read from database.
            </summary>
            <param name="type">Value type.</param>
            <returns>Returns default value for type.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.MappingSchema.SetDefaultValue(System.Type,System.Object)">
            <summary>
            Sets default value for specific type.
            Default value is a value, used instead of <c>NULL</c> value, read from database.
            </summary>
            <param name="type">Value type.</param>
            <param name="value">Default value.</param>
        </member>
        <member name="M:LinqToDB.Mapping.MappingSchema.GetCanBeNull(System.Type)">
            <summary>
            Returns <c>true</c>, if value of specified type could contain <c>null</c>.
            </summary>
            <param name="type">Value type.</param>
            <returns>Returns <c>true</c> if specified type supports <c>null</c> values.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.MappingSchema.SetCanBeNull(System.Type,System.Boolean)">
            <summary>
            Sets <c>null</c> value support flag for specified type.
            </summary>
            <param name="type">Value type.</param>
            <param name="value">If <c>true</c>, specified type value could contain <c>null</c>.</param>
        </member>
        <member name="M:LinqToDB.Mapping.MappingSchema.InitGenericConvertProvider``1">
            <summary>
            Initialize generic conversions for specific type parameter.
            </summary>
            <typeparam name="T">Generic type parameter, for which converters should be initialized.</typeparam>
        </member>
        <member name="M:LinqToDB.Mapping.MappingSchema.InitGenericConvertProvider(System.Type[])">
            <summary>
            Initialize generic conversions for specific type parameters.
            </summary>
            <param name="types">Generic type parameters.</param>
            <returns>Returns <c>true</c> if new generic type conversions could have added to mapping schema.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.MappingSchema.SetGenericConvertProvider(System.Type)">
            <summary>
            Adds generic type conversions provider.
            Type converter must implement <see cref="T:LinqToDB.Expressions.IGenericInfoProvider"/> interface.
            <see cref="T:LinqToDB.Expressions.IGenericInfoProvider"/> for more details and examples.
            </summary>
            <param name="type">Generic type conversions provider.</param>
        </member>
        <member name="M:LinqToDB.Mapping.MappingSchema.ChangeTypeTo``1(System.Object)">
            <summary>
            Converts value to specified type.
            </summary>
            <typeparam name="T">Target type.</typeparam>
            <param name="value">Value to convert.</param>
            <returns>Converted value.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.MappingSchema.ChangeType(System.Object,System.Type)">
            <summary>
            Converts value to specified type.
            </summary>
            <param name="value">Value to convert.</param>
            <param name="conversionType">Target type.</param>
            <returns>Converted value.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.MappingSchema.EnumToValue(System.Enum)">
            <summary>
            Converts enum value to database value.
            </summary>
            <param name="value">Enum value.</param>
            <returns>Database value.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.MappingSchema.TryGetConvertExpression(System.Type,System.Type)">
            <summary>
            Returns custom value conversion expression from <paramref name="from"/> type to <paramref name="to"/> type if it
            is defined in mapping schema, or <c>null</c> otherwise.
            </summary>
            <param name="from">Source type.</param>
            <param name="to">Target type.</param>
            <returns>Conversion expression or <c>null</c>, if conversion is not defined.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.MappingSchema.GetConvertExpression``2(System.Boolean,System.Boolean)">
            <summary>
            Returns conversion expression from <typeparamref name="TFrom"/> type to <typeparamref name="TTo"/> type.
            </summary>
            <typeparam name="TFrom">Source type.</typeparam>
            <typeparam name="TTo">Target type.</typeparam>
            <param name="checkNull">If <c>true</c>, and source type could contain <c>null</c>, conversion expression will check converted value for <c>null</c> and replace it with default value.
            <see cref="M:LinqToDB.Mapping.MappingSchema.SetDefaultValue(System.Type,System.Object)"/> for more details.
            </param>
            <param name="createDefault">Create new conversion expression, if conversion is not defined.</param>
            <returns>Conversion expression or <c>null</c>, if there is no such conversion and <paramref name="createDefault"/> is <c>false</c>.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.MappingSchema.GetConvertExpression(System.Type,System.Type,System.Boolean,System.Boolean)">
            <summary>
            Returns conversion expression from <paramref name="from"/> type to <paramref name="to"/> type.
            </summary>
            <param name="from">Source type.</param>
            <param name="to">Target type.</param>
            <param name="checkNull">If <c>true</c>, and source type could contain <c>null</c>, conversion expression will check converted value for <c>null</c> and replace it with default value.
            <see cref="M:LinqToDB.Mapping.MappingSchema.SetDefaultValue(System.Type,System.Object)"/> for more details.
            </param>
            <param name="createDefault">Create new conversion expression, if conversion is not defined.</param>
            <returns>Conversion expression or <c>null</c>, if there is no such conversion and <paramref name="createDefault"/> is <c>false</c>.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.MappingSchema.GetConverter``2">
            <summary>
            Returns conversion delegate for conversion from <typeparamref name="TFrom"/> type to <typeparamref name="TTo"/> type.
            </summary>
            <typeparam name="TFrom">Source type.</typeparam>
            <typeparam name="TTo">Target type.</typeparam>
            <returns>Conversion delegate.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.MappingSchema.SetConvertExpression(System.Type,System.Type,System.Linq.Expressions.LambdaExpression,System.Boolean)">
            <summary>
            Specify conversion expression for conversion from <paramref name="fromType"/> type to <paramref name="toType"/> type.
            </summary>
            <param name="fromType">Source type.</param>
            <param name="toType">Target type.</param>
            <param name="expr">Conversion expression.</param>
            <param name="addNullCheck">If <c>true</c>, conversion expression will be wrapped with default value substitution logic for <c>null</c> values.
            Wrapper will be added only if source type can have <c>null</c> values and conversion expression doesn't use
            default value provider.
            See <see cref="T:LinqToDB.Common.DefaultValue`1"/> and <see cref="T:LinqToDB.Common.DefaultValue"/> types for more details.
            </param>
        </member>
        <member name="M:LinqToDB.Mapping.MappingSchema.SetConvertExpression``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Boolean)">
            <summary>
            Specify conversion expression for conversion from <typeparamref name="TFrom"/> type to <typeparamref name="TTo"/> type.
            </summary>
            <typeparam name="TFrom">Source type.</typeparam>
            <typeparam name="TTo">Target type.</typeparam>
            <param name="expr">Conversion expression.</param>
            <param name="addNullCheck">If <c>true</c>, conversion expression will be wrapped with default value substitution logic for <c>null</c> values.
            Wrapper will be added only if source type can have <c>null</c> values and conversion expression doesn't use
            default value provider.
            See <see cref="T:LinqToDB.Common.DefaultValue`1"/> and <see cref="T:LinqToDB.Common.DefaultValue"/> types for more details.
            </param>
        </member>
        <member name="M:LinqToDB.Mapping.MappingSchema.SetConvertExpression``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Specify conversion expression for conversion from <typeparamref name="TFrom"/> type to <typeparamref name="TTo"/> type.
            </summary>
            <typeparam name="TFrom">Source type.</typeparam>
            <typeparam name="TTo">Target type.</typeparam>
            <param name="checkNullExpr"><c>null</c> values conversion expression.</param>
            <param name="expr">Conversion expression.</param>
        </member>
        <member name="M:LinqToDB.Mapping.MappingSchema.SetConverter``2(System.Func{``0,``1})">
            <summary>
            Specify conversion delegate for conversion from <typeparamref name="TFrom"/> type to <typeparamref name="TTo"/> type.
            </summary>
            <typeparam name="TFrom">Source type.</typeparam>
            <typeparam name="TTo">Target type.</typeparam>
            <param name="func">Conversion delegate.</param>
        </member>
        <member name="M:LinqToDB.Mapping.MappingSchema.SetCultureInfo(System.Globalization.CultureInfo)">
            <summary>
            Set conversion expressions for conversion from and to <c>string</c> for basic types
            (<c>byte</c>, <c>sbyte</c>, <c>short</c>, <c>ushort</c>, <c>int</c>, <c>uint</c>, <c>long</c>, <c>ulong</c>
            , <c>float</c>, <c>double</c>, <c>decimal</c>, <c>DateTime</c>, <c>DateTimeOffset</c>)
            using provided culture format providers.
            </summary>
            <param name="info">Culture with format providers for conversions.</param>
        </member>
        <member name="M:LinqToDB.Mapping.MappingSchema.AddMetadataReader(LinqToDB.Metadata.IMetadataReader)">
            <summary>
            Adds additional metadata attributes provider to current schema.
            </summary>
            <param name="reader">Metadata attributes provider.</param>
        </member>
        <member name="M:LinqToDB.Mapping.MappingSchema.GetAttributes``1(System.Type,System.Boolean)">
            <summary>
            Gets attributes of specified type, associated with specified type.
            </summary>
            <typeparam name="T">Attribute type.</typeparam>
            <param name="type">Attributes owner type.</param>
            <param name="inherit">If <c>true</c> - include inherited attributes.</param>
            <returns>Attributes of specified type.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.MappingSchema.GetAttributes``1(System.Type,System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Gets attributes of specified type, associated with specified type member.
            </summary>
            <typeparam name="T">Attribute type.</typeparam>
            <param name="type">Member's owner type.</param>
            <param name="memberInfo">Attributes owner member.</param>
            <param name="inherit">If <c>true</c> - include inherited attributes.</param>
            <returns>Attributes of specified type.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.MappingSchema.GetAttribute``1(System.Type,System.Boolean)">
            <summary>
            Gets attribute of specified type, associated with specified type.
            </summary>
            <typeparam name="T">Attribute type.</typeparam>
            <param name="type">Attribute owner type.</param>
            <param name="inherit">If <c>true</c> - include inherited attribute.</param>
            <returns>First found attribute of specified type or <c>null</c>, if no attributes found.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.MappingSchema.GetAttribute``1(System.Type,System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Gets attribute of specified type, associated with specified type member.
            </summary>
            <typeparam name="T">Attribute type.</typeparam>
            <param name="type">Member's owner type.</param>
            <param name="memberInfo">Attribute owner member.</param>
            <param name="inherit">If <c>true</c> - include inherited attribute.</param>
            <returns>First found attribute of specified type or <c>null</c>, if no attributes found.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.MappingSchema.GetAttributes``1(System.Type,System.Func{``0,System.String},System.Boolean)">
            <summary>
            Gets attributes of specified type, associated with specified type.
            Attributes filtered by schema's configuration names (see  <see cref="P:LinqToDB.Mapping.MappingSchema.ConfigurationList"/>).
            </summary>
            <typeparam name="T">Attribute type.</typeparam>
            <param name="type">Attributes owner type.</param>
            <param name="configGetter">Attribute configuration name provider.</param>
            <param name="inherit">If <c>true</c> - include inherited attributes.</param>
            <returns>Attributes of specified type.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.MappingSchema.GetAttributes``1(System.Type,System.Reflection.MemberInfo,System.Func{``0,System.String},System.Boolean)">
            <summary>
            Gets attributes of specified type, associated with specified type member.
            Attributes filtered by schema's configuration names (see  <see cref="P:LinqToDB.Mapping.MappingSchema.ConfigurationList"/>).
            </summary>
            <typeparam name="T">Attribute type.</typeparam>
            <param name="type">Member's owner type.</param>
            <param name="memberInfo">Attributes owner member.</param>
            <param name="configGetter">Attribute configuration name provider.</param>
            <param name="inherit">If <c>true</c> - include inherited attributes.</param>
            <returns>Attributes of specified type.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.MappingSchema.GetAttribute``1(System.Type,System.Func{``0,System.String},System.Boolean)">
            <summary>
            Gets attribute of specified type, associated with specified type.
            Attributes filtered by schema's configuration names (see  <see cref="P:LinqToDB.Mapping.MappingSchema.ConfigurationList"/>).
            </summary>
            <typeparam name="T">Attribute type.</typeparam>
            <param name="type">Attribute owner type.</param>
            <param name="configGetter">Attribute configuration name provider.</param>
            <param name="inherit">If <c>true</c> - include inherited attribute.</param>
            <returns>First found attribute of specified type or <c>null</c>, if no attributes found.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.MappingSchema.GetAttribute``1(System.Type,System.Reflection.MemberInfo,System.Func{``0,System.String},System.Boolean)">
            <summary>
            Gets attribute of specified type, associated with specified type member.
            Attributes filtered by schema's configuration names (see  <see cref="P:LinqToDB.Mapping.MappingSchema.ConfigurationList"/>).
            </summary>
            <typeparam name="T">Attribute type.</typeparam>
            <param name="type">Member's owner type.</param>
            <param name="memberInfo">Attribute owner member.</param>
            <param name="configGetter">Attribute configuration name provider.</param>
            <param name="inherit">If <c>true</c> - include inherited attribute.</param>
            <returns>First found attribute of specified type or <c>null</c>, if no attributes found.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.MappingSchema.GetFluentMappingBuilder">
            <summary>
            Gets fluent mapping builder for current schema.
            </summary>
            <returns>Fluent mapping builder.</returns>
        </member>
        <member name="F:LinqToDB.Mapping.MappingSchema.Default">
            <summary>
            Default mapping schema, used by LINQ to DB, when more specific mapping schema not provided.
            </summary>
        </member>
        <member name="M:LinqToDB.Mapping.MappingSchema.IsScalarType(System.Type)">
            <summary>
            Returns <c>true</c>, if provided type mapped to scalar database type in current schema.
            </summary>
            <param name="type">Type to check.</param>
            <returns><c>true</c>, if type mapped to scalar database type.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.MappingSchema.SetScalarType(System.Type,System.Boolean)">
            <summary>
            Configure how provided type should be handled during mapping to database - as scalar value or composite type.
            </summary>
            <param name="type">Type to configure.</param>
            <param name="isScalarType"><c>true</c>, if provided type should be mapped to scalar database value.</param>
        </member>
        <member name="M:LinqToDB.Mapping.MappingSchema.AddScalarType(System.Type,System.Object,LinqToDB.DataType)">
            <summary>
            Configure provided type mapping to scalar database type.
            </summary>
            <param name="type">Type to configure.</param>
            <param name="defaultValue">Default value. See <see cref="M:LinqToDB.Mapping.MappingSchema.SetDefaultValue(System.Type,System.Object)"/> for more details.</param>
            <param name="dataType">Optional scalar data type.</param>
        </member>
        <member name="M:LinqToDB.Mapping.MappingSchema.AddScalarType(System.Type,System.Object,System.Boolean,LinqToDB.DataType)">
            <summary>
            Configure provided type mapping to scalar database type.
            </summary>
            <param name="type">Type to configure.</param>
            <param name="defaultValue">Default value. See <see cref="M:LinqToDB.Mapping.MappingSchema.SetDefaultValue(System.Type,System.Object)"/> for more details.</param>
            <param name="canBeNull">Set <c>null</c> value support flag. See <see cref="M:LinqToDB.Mapping.MappingSchema.SetCanBeNull(System.Type,System.Boolean)"/> for more details.</param>
            <param name="dataType">Optional scalar data type.</param>
        </member>
        <member name="M:LinqToDB.Mapping.MappingSchema.AddScalarType(System.Type,LinqToDB.DataType)">
            <summary>
            Configure provided type mapping to scalar database type.
            </summary>
            <param name="type">Type to configure.</param>
            <param name="dataType">Optional scalar data type.</param>
        </member>
        <member name="M:LinqToDB.Mapping.MappingSchema.GetDataType(System.Type)">
            <summary>
            Returns database type mapping information for specified type.
            </summary>
            <param name="type">Mapped type.</param>
            <returns>Database type information.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.MappingSchema.SetDataType(System.Type,LinqToDB.DataType)">
            <summary>
            Associate specified type with LINQ to DB data type.
            </summary>
            <param name="type">Mapped type.</param>
            <param name="dataType">LINQ to DB data type.</param>
        </member>
        <member name="M:LinqToDB.Mapping.MappingSchema.SetDataType(System.Type,LinqToDB.SqlQuery.SqlDataType)">
            <summary>
            Associate specified type with database data type.
            </summary>
            <param name="type">Mapped type.</param>
            <param name="dataType">Database data type.</param>
        </member>
        <member name="M:LinqToDB.Mapping.MappingSchema.GetUnderlyingDataType(System.Type,System.Boolean@)">
            <summary>
            Returns scalar database type mapping information for provided type.
            </summary>
            <param name="type">Mapped type.</param>
            <param name="canBeNull">Returns <c>true</c>, if <paramref name="type"/> type is enum with mapping to <c>null</c> value.
            Initial parameter value, passed to this method is not used.</param>
            <returns>Scalar database type information.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.MappingSchema.GetMapValues(System.Type)">
            <summary>
            Returns enum type mapping information or <c>null</c> for non-enum types.
            </summary>
            <param name="type">Mapped type.</param>
            <returns>Mapping values for enum type and <c>null</c> for non-enum types.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.MappingSchema.GetEntityDescriptor(System.Type)">
            <summary>
            Returns mapped entity descriptor.
            </summary>
            <param name="type">Mapped type.</param>
            <returns>Mapping descriptor.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.MappingSchema.GetEntites">
            <summary>
            Returns types for cached <see cref="T:LinqToDB.Mapping.EntityDescriptor"/>s.
            </summary>
            <seealso cref="M:LinqToDB.Mapping.MappingSchema.GetEntityDescriptor(System.Type)"/>
            <returns>
            Mapping types.
            </returns>
        </member>
        <member name="M:LinqToDB.Mapping.MappingSchema.GetDefaultFromEnumType(System.Type)">
            <summary>
            Returns type, to which provided enumeration type is mapped or <c>null</c>, if type is not configured.
            See <see cref="M:LinqToDB.Mapping.MappingSchema.SetDefaultFromEnumType(System.Type,System.Type)"/>.
            </summary>
            <param name="enumType">Enumeration type.</param>
            <returns>Mapped type or <c>null</c>.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.MappingSchema.SetDefaultFromEnumType(System.Type,System.Type)">
            <summary>
            Sets type, to which provided enumeration type should be mapped.
            </summary>
            <param name="enumType">Enumeration type.</param>
            <param name="defaultFromType">Mapped type.</param>
        </member>
        <member name="P:LinqToDB.Mapping.MappingSchema.ValueToSqlConverter">
            <summary>
            Gets value to SQL (usually literal) converter.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.MappingSchema.MetadataReader">
            <summary>
            Gets or sets metadata attributes provider for current schema.
            Metadata providers, shipped with LINQ to DB:
            - <see cref="T:LinqToDB.Metadata.MetadataReader"/> - aggregation metadata provider over collection of other providers;
            - <see cref="T:LinqToDB.Metadata.AttributeReader"/> - .NET attributes provider;
            - <see cref="T:LinqToDB.Metadata.FluentMetadataReader"/> - fluent mappings metadata provider;
            - <see cref="!:SystemDataLinqAttributeReader"/> - metadata provider that converts <see cref="!:System.Data.Linq.Mapping"/> attributes to LINQ to DB mapping attributes;
            - <see cref="!:SystemDataSqlServerAttributeReader"/> - metadata provider that converts <see cref="!:Microsoft.SqlServer.Server"/> attributes to LINQ to DB mapping attributes;
            - <see cref="T:LinqToDB.Metadata.XmlAttributeReader"/> - XML-based mappings metadata provider.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.MappingSchema.ConfigurationID">
            <summary>
            Unique schema configuration identifier. For internal use only.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.MappingSchema.ConfigurationList">
            <summary>
            Gets configurations, associated with current mapping schema.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.MappingSchema.ColumnComparisonOption">
            <summary>
            Gets or sets column name comparison rules for comparison of column names in mapping with column name,
            returned by provider's data reader.
            </summary>
        </member>
        <member name="T:LinqToDB.ITable`1">
            <summary>
            Table-like queryable source, e.g. table, view or table-valued function.
            </summary>
            <typeparam name="T">Record mapping type.</typeparam>
        </member>
        <member name="T:LinqToDB.LinqExtensions">
            <summary>
            Contains extension methods for LINQ queries.
            </summary>
        </member>
        <member name="M:LinqToDB.LinqExtensions.TableName``1(LinqToDB.ITable{``0},System.String)">
            <summary>
            Overrides table or view name with new name for current query.
            </summary>
            <typeparam name="T">Table record mapping class.</typeparam>
            <param name="table">Table-like query source.</param>
            <param name="name">Name of table.</param>
            <returns>Table-like query source with new name.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.DatabaseName``1(LinqToDB.ITable{``0},System.String)">
            <summary>
            Overrides database name with new name for current query. This call will have effect only for databases that support
            database name in fully-qualified table name.
            <para>Supported by: Access, DB2, MySQL, PostgreSQL, SAP HANA, SQLite, Informix, SQL Server, Sybase ASE.</para>
            <para>Requires schema name (see <see cref="M:LinqToDB.LinqExtensions.SchemaName``1(LinqToDB.ITable{``0},System.String)"/>): DB2, SAP HANA, PostgreSQL.</para>
            <para>PostgreSQL supports only name of current database.</para>
            </summary>
            <typeparam name="T">Table record mapping class.</typeparam>
            <param name="table">Table-like query source.</param>
            <param name="name">Name of database.</param>
            <returns>Table-like query source with new database name.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.OwnerName``1(LinqToDB.ITable{``0},System.String)">
            <summary>
            Overrides owner/schema name with new name for current query. This call will have effect only for databases that support
            owner/schema name in fully-qualified table name.
            <see cref="M:LinqToDB.LinqExtensions.SchemaName``1(LinqToDB.ITable{``0},System.String)"/> method is a synonym of this method.
            <para>Supported by: DB2, Oracle, PostgreSQL, SAP HANA, Informix, SQL Server, Sybase ASE.</para>
            </summary>
            <typeparam name="T">Table record mapping class.</typeparam>
            <param name="table">Table-like query source.</param>
            <param name="name">Name of owner/schema.</param>
            <returns>Table-like query source with new owner/schema name.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.SchemaName``1(LinqToDB.ITable{``0},System.String)">
            <summary>
            Overrides owner/schema name with new name for current query. This call will have effect only for databases that support
            owner/schema name in fully-qualified table name.
            <see cref="M:LinqToDB.LinqExtensions.OwnerName``1(LinqToDB.ITable{``0},System.String)"/> method is a synonym of this method.
            <para>Supported by: DB2, Oracle, PostgreSQL, SAP HANA, Informix, SQL Server, Sybase ASE.</para>
            </summary>
            <typeparam name="T">Table record mapping class.</typeparam>
            <param name="table">Table-like query source.</param>
            <param name="name">Name of owner/schema.</param>
            <returns>Table-like query source with new owner/schema name.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.WithTableExpression``1(LinqToDB.ITable{``0},System.String)">
            <summary>
            Replaces access to a table in generated query with SQL expression.
            Example below adds hint to a table. Also see <see cref="M:LinqToDB.LinqExtensions.With``1(LinqToDB.ITable{``0},System.String)"/> method.
            <code>
            var tableWithHint = db.Table.WithTableExpression("{0} {1} with (UpdLock)");
            </code>
            </summary>
            <typeparam name="T">Table record mapping class.</typeparam>
            <param name="table">Table-like query source.</param>
            <param name="expression">SQL template to use instead of table name. Template supports two parameters:
            <para> - {0} original table name;</para>
            <para> - {1} table alias.</para>
            </param>
            <returns>Table-like query source with new table source expression.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.With``1(LinqToDB.ITable{``0},System.String)">
            <summary>
            Adds table hints to a table in generated query.
            Also see <see cref="M:LinqToDB.LinqExtensions.WithTableExpression``1(LinqToDB.ITable{``0},System.String)"/> method.
            <code>
            // will produce following SQL code in generated query: table tablealias with(UpdLock)
            var tableWithHint = db.Table.With("UpdLock");
            </code>
            </summary>
            <typeparam name="T">Table record mapping class.</typeparam>
            <param name="table">Table-like query source.</param>
            <param name="args">SQL text, added to WITH({0}) after table name in generated query.</param>
            <returns>Table-like query source with table hints.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.LoadWith``1(LinqToDB.ITable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
             <summary>
             Specifies associations, that should be loaded for each loaded record from current table.
             All associations, specified in <paramref name="selector"/> expression, will be loaded.
             Take into account that use of this method could require multiple queries to load all requested associations.
             Some usage examples:
             <code>
             // loads records from Table1 with Reference association loaded for each Table1 record
             db.Table1.LoadWith(r => r.Reference);
            
             // loads records from Table1 with Reference1 association loaded for each Table1 record
             // loads records from Reference2 association for each loaded Reference1 record
             db.Table1.LoadWith(r => r.Reference1.Reference2);
            
             // loads records from Table1 with References collection association loaded for each Table1 record
             db.Table1.LoadWith(r => r.References);
            
             // loads records from Table1 with Reference1 collection association loaded for each Table1 record
             // loads records from Reference2 collection association for each loaded Reference1 record
             // loads records from Reference3 association for each loaded Reference2 record
             // note that a way you access collection association record (by index, using First() method) doesn't affect
             // query results and allways select all records
             db.Table1.LoadWith(r => r.References1[0].References2.First().Reference3);
             </code>
             </summary>
             <typeparam name="T">Table record mapping class.</typeparam>
             <param name="table">Table-like query source.</param>
             <param name="selector">Association selection expression.</param>
             <returns>Table-like query source.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.Select``1(LinqToDB.IDataContext,System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Loads scalar value or record from database without explicit table source.
            Could be usefull for function calls, querying of database variables or properties, subqueries, execution of code on server side.
            </summary>
            <typeparam name="T">Type of result.</typeparam>
            <param name="dataContext">Database connection context.</param>
            <param name="selector">Value selection expression.</param>
            <returns>Requested value.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.SelectAsync``1(LinqToDB.IDataContext,System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Loads scalar value or record from database without explicit table source asynchronously.
            Could be usefull for function calls, querying of database variables or properties, subqueries, execution of code on server side.
            </summary>
            <typeparam name="T">Type of result.</typeparam>
            <param name="dataContext">Database connection context.</param>
            <param name="selector">Value selection expression.</param>
            <returns>Requested value.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.Delete``1(System.Linq.IQueryable{``0})">
            <summary>
            Executes delete operation, using source query as filter for records, that should be deleted.
            </summary>
            <typeparam name="T">Mapping class for delete operation target table.</typeparam>
            <param name="source">Query that returns records to delete.</param>
            <returns>Number of deleted records.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.DeleteAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
            <summary>
            Executes delete operation asynchronously, using source query as filter for records, that should be deleted.
            </summary>
            <typeparam name="T">Mapping class for delete operation target table.</typeparam>
            <param name="source">Query that returns records to delete.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Number of deleted records.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.Delete``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Executes delete operation, using source query as initial filter for records, that should be deleted, and predicate expression as additional filter.
            </summary>
            <typeparam name="T">Mapping class for delete operation target table.</typeparam>
            <param name="source">Query that returns records to delete.</param>
            <param name="predicate">Filter expression, to specify what records from source should be deleted.</param>
            <returns>Number of deleted records.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.DeleteAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            Executes delete operation asynchronously, using source query as initial filter for records, that should be deleted, and predicate expression as additional filter.
            </summary>
            <typeparam name="T">Mapping class for delete operation target table.</typeparam>
            <param name="source">Query that returns records to delete.</param>
            <param name="predicate">Filter expression, to specify what records from source should be deleted.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Number of deleted records.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.Update``2(System.Linq.IQueryable{``0},LinqToDB.ITable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Executes update-from-source operation against target table.
            </summary>
            <typeparam name="TSource">Source query record type.</typeparam>
            <typeparam name="TTarget">Target table mapping class.</typeparam>
            <param name="source">Source data query.</param>
            <param name="target">Target table.</param>
            <param name="setter">Update expression. Uses record from source query as parameter. Expression supports only target table record new expression with field initializers.</param>
            <returns>Number of updated records.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.UpdateAsync``2(System.Linq.IQueryable{``0},LinqToDB.ITable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Threading.CancellationToken)">
            <summary>
            Executes update-from-source operation asynchronously against target table.
            </summary>
            <typeparam name="TSource">Source query record type.</typeparam>
            <typeparam name="TTarget">Target table mapping class.</typeparam>
            <param name="source">Source data query.</param>
            <param name="target">Target table.</param>
            <param name="setter">Update expression. Uses record from source query as parameter. Expression supports only target table record new expression with field initializers.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Number of updated records.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.Update``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``0}})">
            <summary>
            Executes update operation using source query as record filter.
            </summary>
            <typeparam name="T">Updated table record type.</typeparam>
            <param name="source">Source data query.</param>
            <param name="setter">Update expression. Uses updated record as parameter. Expression supports only target table record new expression with field initializers.</param>
            <returns>Number of updated records.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.UpdateAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``0}},System.Threading.CancellationToken)">
            <summary>
            Executes update operation asynchronously using source query as record filter.
            </summary>
            <typeparam name="T">Updated table record type.</typeparam>
            <param name="source">Source data query.</param>
            <param name="setter">Update expression. Uses updated record as parameter. Expression supports only target table record new expression with field initializers.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Number of updated records.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.Update``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,``0}})">
            <summary>
            Executes update operation using source query as record filter with additional filter expression.
            </summary>
            <typeparam name="T">Updated table record type.</typeparam>
            <param name="source">Source data query.</param>
            <param name="predicate">Filter expression, to specify what records from source query should be updated.</param>
            <param name="setter">Update expression. Uses updated record as parameter. Expression supports only target table record new expression with field initializers.</param>
            <returns>Number of updated records.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.UpdateAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,``0}},System.Threading.CancellationToken)">
            <summary>
            Executes update operation asynchronously using source query as record filter with additional filter expression.
            </summary>
            <typeparam name="T">Updated table record type.</typeparam>
            <param name="source">Source data query.</param>
            <param name="predicate">Filter expression, to specify what records from source query should be updated.</param>
            <param name="setter">Update expression. Uses updated record as parameter. Expression supports only target table record new expression with field initializers.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Number of updated records.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.Update``1(LinqToDB.Linq.IUpdatable{``0})">
            <summary>
            Executes update operation for already configured update query.
            </summary>
            <typeparam name="T">Updated table record type.</typeparam>
            <param name="source">Update query.</param>
            <returns>Number of updated records.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.UpdateAsync``1(LinqToDB.Linq.IUpdatable{``0},System.Threading.CancellationToken)">
            <summary>
            Executes update operation asynchronously for already configured update query.
            </summary>
            <typeparam name="T">Updated table record type.</typeparam>
            <param name="source">Update query.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Number of updated records.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.Update``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Executes update-from-source operation against target table.
            Also see <seealso cref="M:LinqToDB.LinqExtensions.Update``2(System.Linq.IQueryable{``0},LinqToDB.ITable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1}})"/> method.
            </summary>
            <typeparam name="TSource">Source query record type.</typeparam>
            <typeparam name="TTarget">Target table mapping class.</typeparam>
            <param name="source">Source data query.</param>
            <param name="target">Target table selection expression.</param>
            <param name="setter">Update expression. Uses record from source query as parameter. Expression supports only target table record new expression with field initializers.</param>
            <returns>Number of updated records.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.UpdateAsync``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Threading.CancellationToken)">
            <summary>
            Executes update-from-source operation asynchronously against target table.
            Also see <seealso cref="M:LinqToDB.LinqExtensions.UpdateAsync``2(System.Linq.IQueryable{``0},LinqToDB.ITable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Threading.CancellationToken)"/> method.
            </summary>
            <typeparam name="TSource">Source query record type.</typeparam>
            <typeparam name="TTarget">Target table mapping class.</typeparam>
            <param name="source">Source data query.</param>
            <param name="target">Target table selection expression.</param>
            <param name="setter">Update expression. Uses record from source query as parameter. Expression supports only target table record new expression with field initializers.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Number of updated records.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.AsUpdatable``1(System.Linq.IQueryable{``0})">
            <summary>
            Casts <see cref="T:System.Linq.IQueryable`1"/> query to <see cref="T:LinqToDB.Linq.IUpdatable`1"/> query.
            </summary>
            <typeparam name="T">Query record type.</typeparam>
            <param name="source">Source <see cref="T:System.Linq.IQueryable`1"/> query.</param>
            <returns><see cref="T:LinqToDB.Linq.IUpdatable`1"/> query.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.Set``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Adds update field expression to query.
            </summary>
            <typeparam name="T">Updated record type.</typeparam>
            <typeparam name="TV">Updated field type.</typeparam>
            <param name="source">Source query with records to update.</param>
            <param name="extract">Updated field selector expression.</param>
            <param name="update">Updated field setter expression. Uses updated record as parameter.</param>
            <returns><see cref="T:LinqToDB.Linq.IUpdatable`1"/> query.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.Set``2(LinqToDB.Linq.IUpdatable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Adds update field expression to query.
            </summary>
            <typeparam name="T">Updated record type.</typeparam>
            <typeparam name="TV">Updated field type.</typeparam>
            <param name="source">Source query with records to update.</param>
            <param name="extract">Updated field selector expression.</param>
            <param name="update">Updated field setter expression. Uses updated record as parameter.</param>
            <returns><see cref="T:LinqToDB.Linq.IUpdatable`1"/> query.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.Set``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1}})">
            <summary>
            Adds update field expression to query.
            </summary>
            <typeparam name="T">Updated record type.</typeparam>
            <typeparam name="TV">Updated field type.</typeparam>
            <param name="source">Source query with records to update.</param>
            <param name="extract">Updated field selector expression.</param>
            <param name="update">Updated field setter expression.</param>
            <returns><see cref="T:LinqToDB.Linq.IUpdatable`1"/> query.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.Set``2(LinqToDB.Linq.IUpdatable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1}})">
            <summary>
            Adds update field expression to query.
            </summary>
            <typeparam name="T">Updated record type.</typeparam>
            <typeparam name="TV">Updated field type.</typeparam>
            <param name="source">Source query with records to update.</param>
            <param name="extract">Updated field selector expression.</param>
            <param name="update">Updated field setter expression.</param>
            <returns><see cref="T:LinqToDB.Linq.IUpdatable`1"/> query.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.Set``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},``1)">
            <summary>
            Adds update field expression to query.
            </summary>
            <typeparam name="T">Updated record type.</typeparam>
            <typeparam name="TV">Updated field type.</typeparam>
            <param name="source">Source query with records to update.</param>
            <param name="extract">Updated field selector expression.</param>
            <param name="value">Value, assigned to updated field.</param>
            <returns><see cref="T:LinqToDB.Linq.IUpdatable`1"/> query.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.Set``2(LinqToDB.Linq.IUpdatable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},``1)">
            <summary>
            Adds update field expression to query.
            </summary>
            <typeparam name="T">Updated record type.</typeparam>
            <typeparam name="TV">Updated field type.</typeparam>
            <param name="source">Source query with records to update.</param>
            <param name="extract">Updated field selector expression.</param>
            <param name="value">Value, assigned to updated field.</param>
            <returns><see cref="T:LinqToDB.Linq.IUpdatable`1"/> query.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.Insert``1(LinqToDB.ITable{``0},System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Inserts single record into target table.
            </summary>
            <typeparam name="T">Inserted record type.</typeparam>
            <param name="target">Target table.</param>
            <param name="setter">Insert expression. Expression supports only target table record new expression with field initializers.</param>
            <returns>Number of affected records.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.InsertAsync``1(LinqToDB.ITable{``0},System.Linq.Expressions.Expression{System.Func{``0}},System.Threading.CancellationToken)">
            <summary>
            Inserts single record into target table asynchronously.
            </summary>
            <typeparam name="T">Inserted record type.</typeparam>
            <param name="target">Target table.</param>
            <param name="setter">Insert expression. Expression supports only target table record new expression with field initializers.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Number of affected records.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.InsertWithIdentity``1(LinqToDB.ITable{``0},System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Inserts single record into target table and returns identity value of inserted record.
            </summary>
            <typeparam name="T">Inserted record type.</typeparam>
            <param name="target">Target table.</param>
            <param name="setter">Insert expression. Expression supports only target table record new expression with field initializers.</param>
            <returns>Inserted record's identity value.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.InsertWithInt32Identity``1(LinqToDB.ITable{``0},System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Inserts single record into target table and returns identity value of inserted record as <see cref="T:System.Int32"/> value.
            </summary>
            <typeparam name="T">Inserted record type.</typeparam>
            <param name="target">Target table.</param>
            <param name="setter">Insert expression. Expression supports only target table record new expression with field initializers.</param>
            <returns>Inserted record's identity value.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.InsertWithInt64Identity``1(LinqToDB.ITable{``0},System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Inserts single record into target table and returns identity value of inserted record as <see cref="T:System.Int64"/> value.
            </summary>
            <typeparam name="T">Inserted record type.</typeparam>
            <param name="target">Target table.</param>
            <param name="setter">Insert expression. Expression supports only target table record new expression with field initializers.</param>
            <returns>Inserted record's identity value.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.InsertWithDecimalIdentity``1(LinqToDB.ITable{``0},System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Inserts single record into target table and returns identity value of inserted record as <see cref="T:System.Decimal"/> value.
            </summary>
            <typeparam name="T">Inserted record type.</typeparam>
            <param name="target">Target table.</param>
            <param name="setter">Insert expression. Expression supports only target table record new expression with field initializers.</param>
            <returns>Inserted record's identity value.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.InsertWithIdentityAsync``1(LinqToDB.ITable{``0},System.Linq.Expressions.Expression{System.Func{``0}},System.Threading.CancellationToken)">
            <summary>
            Inserts single record into target table asynchronously and returns identity value of inserted record.
            </summary>
            <typeparam name="T">Inserted record type.</typeparam>
            <param name="target">Target table.</param>
            <param name="setter">Insert expression. Expression supports only target table record new expression with field initializers.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Inserted record's identity value.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.InsertWithInt32IdentityAsync``1(LinqToDB.ITable{``0},System.Linq.Expressions.Expression{System.Func{``0}},System.Threading.CancellationToken)">
            <summary>
            Inserts single record into target table asynchronously and returns identity value of inserted record as <see cref="T:System.Int32"/> value.
            </summary>
            <typeparam name="T">Inserted record type.</typeparam>
            <param name="target">Target table.</param>
            <param name="setter">Insert expression. Expression supports only target table record new expression with field initializers.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Inserted record's identity value.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.InsertWithInt64IdentityAsync``1(LinqToDB.ITable{``0},System.Linq.Expressions.Expression{System.Func{``0}},System.Threading.CancellationToken)">
            <summary>
            Inserts single record into target table asynchronously and returns identity value of inserted record as <see cref="T:System.Int64"/> value.
            </summary>
            <typeparam name="T">Inserted record type.</typeparam>
            <param name="target">Target table.</param>
            <param name="setter">Insert expression. Expression supports only target table record new expression with field initializers.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Inserted record's identity value.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.InsertWithDecimalIdentityAsync``1(LinqToDB.ITable{``0},System.Linq.Expressions.Expression{System.Func{``0}},System.Threading.CancellationToken)">
            <summary>
            Inserts single record into target table asynchronously and returns identity value of inserted record as <see cref="T:System.Decimal"/> value.
            </summary>
            <typeparam name="T">Inserted record type.</typeparam>
            <param name="target">Target table.</param>
            <param name="setter">Insert expression. Expression supports only target table record new expression with field initializers.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Inserted record's identity value.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.Into``1(LinqToDB.IDataContext,LinqToDB.ITable{``0})">
            <summary>
            Starts insert operation LINQ query definition.
            </summary>
            <typeparam name="T">Target table mapping class.</typeparam>
            <param name="dataContext">Database connection context.</param>
            <param name="target">Target table.</param>
            <returns>Insertable source query.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.Value``2(LinqToDB.ITable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1}})">
            <summary>
            Starts insert operation LINQ query definition from field setter expression.
            </summary>
            <typeparam name="T">Target table record type.</typeparam>
            <typeparam name="TV">Setter field type.</typeparam>
            <param name="source">Source table to insert to.</param>
            <param name="field">Setter field selector expression.</param>
            <param name="value">Setter field value expression.</param>
            <returns>Insert query.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.Value``2(LinqToDB.ITable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},``1)">
            <summary>
            Starts insert operation LINQ query definition from field setter expression.
            </summary>
            <typeparam name="T">Target table record type.</typeparam>
            <typeparam name="TV">Setter field type.</typeparam>
            <param name="source">Source table to insert to.</param>
            <param name="field">Setter field selector expression.</param>
            <param name="value">Setter field value.</param>
            <returns>Insert query.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.Value``2(LinqToDB.Linq.IValueInsertable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1}})">
            <summary>
            Add field setter to insert operation LINQ query.
            </summary>
            <typeparam name="T">Target table record type.</typeparam>
            <typeparam name="TV">Setter field type.</typeparam>
            <param name="source">Insert query.</param>
            <param name="field">Setter field selector expression.</param>
            <param name="value">Setter field value expression.</param>
            <returns>Insert query.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.Value``2(LinqToDB.Linq.IValueInsertable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},``1)">
            <summary>
            Add field setter to insert operation LINQ query.
            </summary>
            <typeparam name="T">Target table record type.</typeparam>
            <typeparam name="TV">Setter field type.</typeparam>
            <param name="source">Insert query.</param>
            <param name="field">Setter field selector expression.</param>
            <param name="value">Setter field value.</param>
            <returns>Insert query.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.Insert``1(LinqToDB.Linq.IValueInsertable{``0})">
            <summary>
            Executes insert query.
            </summary>
            <typeparam name="T">Target table record type.</typeparam>
            <param name="source">Insert query.</param>
            <returns>Number of affected records.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.InsertAsync``1(LinqToDB.Linq.IValueInsertable{``0},System.Threading.CancellationToken)">
            <summary>
            Executes insert query asynchronously.
            </summary>
            <typeparam name="T">Target table record type.</typeparam>
            <param name="source">Insert query.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Number of affected records.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.InsertWithIdentity``1(LinqToDB.Linq.IValueInsertable{``0})">
            <summary>
            Executes insert query and returns identity value of inserted record.
            </summary>
            <typeparam name="T">Target table record type.</typeparam>
            <param name="source">Insert query.</param>
            <returns>Inserted record's identity value.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.InsertWithInt32Identity``1(LinqToDB.Linq.IValueInsertable{``0})">
            <summary>
            Executes insert query and returns identity value of inserted record as <see cref="T:System.Int32"/> value.
            </summary>
            <typeparam name="T">Target table record type.</typeparam>
            <param name="source">Insert query.</param>
            <returns>Inserted record's identity value.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.InsertWithInt64Identity``1(LinqToDB.Linq.IValueInsertable{``0})">
            <summary>
            Executes insert query and returns identity value of inserted record as <see cref="T:System.Int64"/> value.
            </summary>
            <typeparam name="T">Target table record type.</typeparam>
            <param name="source">Insert query.</param>
            <returns>Inserted record's identity value.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.InsertWithDecimalIdentity``1(LinqToDB.Linq.IValueInsertable{``0})">
            <summary>
            Executes insert query and returns identity value of inserted record as <see cref="T:System.Decimal"/> value.
            </summary>
            <typeparam name="T">Target table record type.</typeparam>
            <param name="source">Insert query.</param>
            <returns>Inserted record's identity value.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.InsertWithIdentityAsync``1(LinqToDB.Linq.IValueInsertable{``0},System.Threading.CancellationToken)">
            <summary>
            Executes insert query asynchronously and returns identity value of inserted record.
            </summary>
            <typeparam name="T">Target table record type.</typeparam>
            <param name="source">Insert query.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Inserted record's identity value.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.InsertWithInt32IdentityAsync``1(LinqToDB.Linq.IValueInsertable{``0},System.Threading.CancellationToken)">
            <summary>
            Executes insert query asynchronously and returns identity value of inserted record as <see cref="T:System.Int32"/> value.
            </summary>
            <typeparam name="T">Target table record type.</typeparam>
            <param name="source">Insert query.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Inserted record's identity value.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.InsertWithInt64IdentityAsync``1(LinqToDB.Linq.IValueInsertable{``0},System.Threading.CancellationToken)">
            <summary>
            Executes insert query asynchronously and returns identity value of inserted record as <see cref="T:System.Int64"/> value.
            </summary>
            <typeparam name="T">Target table record type.</typeparam>
            <param name="source">Insert query.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Inserted record's identity value.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.InsertWithDecimalIdentityAsync``1(LinqToDB.Linq.IValueInsertable{``0},System.Threading.CancellationToken)">
            <summary>
            Executes insert query asynchronously and returns identity value of inserted record as <see cref="T:System.Decimal"/> value.
            </summary>
            <typeparam name="T">Target table record type.</typeparam>
            <param name="source">Insert query.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Inserted record's identity value.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.Insert``2(System.Linq.IQueryable{``0},LinqToDB.ITable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Inserts records from source query into target table.
            </summary>
            <typeparam name="TSource">Source query record type.</typeparam>
            <typeparam name="TTarget">Target table record type</typeparam>
            <param name="source">Source query, that returns data for insert operation.</param>
            <param name="target">Target table.</param>
            <param name="setter">Inserted record constructor expression.
            Expression supports only target table record new expression with field initializers.</param>
            <returns>Number of affected records.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.InsertAsync``2(System.Linq.IQueryable{``0},LinqToDB.ITable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Threading.CancellationToken)">
            <summary>
            Inserts records from source query into target table asynchronously.
            </summary>
            <typeparam name="TSource">Source query record type.</typeparam>
            <typeparam name="TTarget">Target table record type</typeparam>
            <param name="source">Source query, that returns data for insert operation.</param>
            <param name="target">Target table.</param>
            <param name="setter">Inserted record constructor expression.
            Expression supports only target table record new expression with field initializers.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Number of affected records.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.InsertWithIdentity``2(System.Linq.IQueryable{``0},LinqToDB.ITable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Inserts records from source query into target table and returns identity value of last inserted record.
            </summary>
            <typeparam name="TSource">Source query record type.</typeparam>
            <typeparam name="TTarget">Target table record type</typeparam>
            <param name="source">Source query, that returns data for insert operation.</param>
            <param name="target">Target table.</param>
            <param name="setter">Inserted record constructor expression.
            Expression supports only target table record new expression with field initializers.</param>
            <returns>Last inserted record's identity value.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.InsertWithInt32Identity``2(System.Linq.IQueryable{``0},LinqToDB.ITable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Inserts records from source query into target table and returns identity value of last inserted record as <see cref="T:System.Int32"/> value.
            </summary>
            <typeparam name="TSource">Source query record type.</typeparam>
            <typeparam name="TTarget">Target table record type</typeparam>
            <param name="source">Source query, that returns data for insert operation.</param>
            <param name="target">Target table.</param>
            <param name="setter">Inserted record constructor expression.
            Expression supports only target table record new expression with field initializers.</param>
            <returns>Last inserted record's identity value.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.InsertWithInt64Identity``2(System.Linq.IQueryable{``0},LinqToDB.ITable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Inserts records from source query into target table and returns identity value of last inserted record as <see cref="T:System.Int64"/> value.
            </summary>
            <typeparam name="TSource">Source query record type.</typeparam>
            <typeparam name="TTarget">Target table record type</typeparam>
            <param name="source">Source query, that returns data for insert operation.</param>
            <param name="target">Target table.</param>
            <param name="setter">Inserted record constructor expression.
            Expression supports only target table record new expression with field initializers.</param>
            <returns>Last inserted record's identity value.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.InsertWithDecimalIdentity``2(System.Linq.IQueryable{``0},LinqToDB.ITable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Inserts records from source query into target table and returns identity value of last inserted record as <see cref="T:System.Decimal"/> value.
            </summary>
            <typeparam name="TSource">Source query record type.</typeparam>
            <typeparam name="TTarget">Target table record type</typeparam>
            <param name="source">Source query, that returns data for insert operation.</param>
            <param name="target">Target table.</param>
            <param name="setter">Inserted record constructor expression.
            Expression supports only target table record new expression with field initializers.</param>
            <returns>Last inserted record's identity value.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.InsertWithIdentityAsync``2(System.Linq.IQueryable{``0},LinqToDB.ITable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Threading.CancellationToken)">
            <summary>
            Inserts records from source query into target table asynchronously and returns identity value of last inserted record.
            </summary>
            <typeparam name="TSource">Source query record type.</typeparam>
            <typeparam name="TTarget">Target table record type</typeparam>
            <param name="source">Source query, that returns data for insert operation.</param>
            <param name="target">Target table.</param>
            <param name="setter">Inserted record constructor expression.
            Expression supports only target table record new expression with field initializers.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Last inserted record's identity value.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.InsertWithInt32IdentityAsync``2(System.Linq.IQueryable{``0},LinqToDB.ITable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Threading.CancellationToken)">
            <summary>
            Inserts records from source query into target table asynchronously and returns identity value of last inserted record as <see cref="T:System.Int32"/> value.
            </summary>
            <typeparam name="TSource">Source query record type.</typeparam>
            <typeparam name="TTarget">Target table record type</typeparam>
            <param name="source">Source query, that returns data for insert operation.</param>
            <param name="target">Target table.</param>
            <param name="setter">Inserted record constructor expression.
            Expression supports only target table record new expression with field initializers.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Last inserted record's identity value.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.InsertWithInt64IdentityAsync``2(System.Linq.IQueryable{``0},LinqToDB.ITable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Threading.CancellationToken)">
            <summary>
            Inserts records from source query into target table asynchronously and returns identity value of last inserted record as <see cref="T:System.Int64"/> value.
            </summary>
            <typeparam name="TSource">Source query record type.</typeparam>
            <typeparam name="TTarget">Target table record type</typeparam>
            <param name="source">Source query, that returns data for insert operation.</param>
            <param name="target">Target table.</param>
            <param name="setter">Inserted record constructor expression.
            Expression supports only target table record new expression with field initializers.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Last inserted record's identity value.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.InsertWithDecimalIdentityAsync``2(System.Linq.IQueryable{``0},LinqToDB.ITable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Threading.CancellationToken)">
            <summary>
            Inserts records from source query into target table asynchronously and returns identity value of last inserted record as <see cref="T:System.Decimal"/> value.
            </summary>
            <typeparam name="TSource">Source query record type.</typeparam>
            <typeparam name="TTarget">Target table record type</typeparam>
            <param name="source">Source query, that returns data for insert operation.</param>
            <param name="target">Target table.</param>
            <param name="setter">Inserted record constructor expression.
            Expression supports only target table record new expression with field initializers.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Last inserted record's identity value.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.Into``2(System.Linq.IQueryable{``0},LinqToDB.ITable{``1})">
            <summary>
            Converts LINQ query into insert query with source query data as data to insert.
            </summary>
            <typeparam name="TSource">Source query record type.</typeparam>
            <typeparam name="TTarget">Target table mapping class.</typeparam>
            <param name="source">Source data query.</param>
            <param name="target">Target table.</param>
            <returns>Insertable source query.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.Value``3(LinqToDB.Linq.ISelectInsertable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``2}})">
            <summary>
            Add field setter to insert operation LINQ query.
            </summary>
            <typeparam name="TSource">Source record type.</typeparam>
            <typeparam name="TTarget">Target record type</typeparam>
            <typeparam name="TValue">Field type.</typeparam>
            <param name="source">Insert query.</param>
            <param name="field">Setter field selector expression.</param>
            <param name="value">Setter field value expression. Accepts source record as parameter.</param>
            <returns>Insert query.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.Value``3(LinqToDB.Linq.ISelectInsertable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``2}})">
            <summary>
            Add field setter to insert operation LINQ query.
            </summary>
            <typeparam name="TSource">Source record type.</typeparam>
            <typeparam name="TTarget">Target record type</typeparam>
            <typeparam name="TValue">Field type.</typeparam>
            <param name="source">Insert query.</param>
            <param name="field">Setter field selector expression.</param>
            <param name="value">Setter field value expression.</param>
            <returns>Insert query.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.Value``3(LinqToDB.Linq.ISelectInsertable{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,``2}},``2)">
            <summary>
            Add field setter to insert operation LINQ query.
            </summary>
            <typeparam name="TSource">Source record type.</typeparam>
            <typeparam name="TTarget">Target record type</typeparam>
            <typeparam name="TValue">Field type.</typeparam>
            <param name="source">Insert query.</param>
            <param name="field">Setter field selector expression.</param>
            <param name="value">Setter field value.</param>
            <returns>Insert query.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.Insert``2(LinqToDB.Linq.ISelectInsertable{``0,``1})">
            <summary>
            Executes configured insert query.
            </summary>
            <typeparam name="TSource">Source query record type.</typeparam>
            <typeparam name="TTarget">Target table record type.</typeparam>
            <param name="source">Insert query.</param>
            <returns>Number of affected records.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.InsertAsync``2(LinqToDB.Linq.ISelectInsertable{``0,``1},System.Threading.CancellationToken)">
            <summary>
            Executes configured insert query asynchronously.
            </summary>
            <typeparam name="TSource">Source query record type.</typeparam>
            <typeparam name="TTarget">Target table record type.</typeparam>
            <param name="source">Insert query.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Number of affected records.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.InsertWithIdentity``2(LinqToDB.Linq.ISelectInsertable{``0,``1})">
            <summary>
            Executes configured insert query and returns identity value of last inserted record.
            </summary>
            <typeparam name="TSource">Source query record type.</typeparam>
            <typeparam name="TTarget">Target table record type.</typeparam>
            <param name="source">Insert query.</param>
            <returns>Number of affected records.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.InsertWithInt32Identity``2(LinqToDB.Linq.ISelectInsertable{``0,``1})">
            <summary>
            Executes configured insert query and returns identity value of last inserted record as <see cref="T:System.Int32"/> value.
            </summary>
            <typeparam name="TSource">Source query record type.</typeparam>
            <typeparam name="TTarget">Target table record type.</typeparam>
            <param name="source">Insert query.</param>
            <returns>Number of affected records.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.InsertWithInt64Identity``2(LinqToDB.Linq.ISelectInsertable{``0,``1})">
            <summary>
            Executes configured insert query and returns identity value of last inserted record as <see cref="T:System.Int64"/> value.
            </summary>
            <typeparam name="TSource">Source query record type.</typeparam>
            <typeparam name="TTarget">Target table record type.</typeparam>
            <param name="source">Insert query.</param>
            <returns>Number of affected records.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.InsertWithDecimalIdentity``2(LinqToDB.Linq.ISelectInsertable{``0,``1})">
            <summary>
            Executes configured insert query and returns identity value of last inserted record as <see cref="T:System.Decimal"/> value.
            </summary>
            <typeparam name="TSource">Source query record type.</typeparam>
            <typeparam name="TTarget">Target table record type.</typeparam>
            <param name="source">Insert query.</param>
            <returns>Number of affected records.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.InsertWithIdentityAsync``2(LinqToDB.Linq.ISelectInsertable{``0,``1},System.Threading.CancellationToken)">
            <summary>
            Executes configured insert query asynchronously and returns identity value of last inserted record.
            </summary>
            <typeparam name="TSource">Source query record type.</typeparam>
            <typeparam name="TTarget">Target table record type.</typeparam>
            <param name="source">Insert query.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Number of affected records.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.InsertWithInt32IdentityAsync``2(LinqToDB.Linq.ISelectInsertable{``0,``1},System.Threading.CancellationToken)">
            <summary>
            Executes configured insert query asynchronously and returns identity value of last inserted record as <see cref="T:System.Int32"/> value.
            </summary>
            <typeparam name="TSource">Source query record type.</typeparam>
            <typeparam name="TTarget">Target table record type.</typeparam>
            <param name="source">Insert query.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Number of affected records.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.InsertWithInt64IdentityAsync``2(LinqToDB.Linq.ISelectInsertable{``0,``1},System.Threading.CancellationToken)">
            <summary>
            Executes configured insert query asynchronously and returns identity value of last inserted record as <see cref="T:System.Int64"/> value.
            </summary>
            <typeparam name="TSource">Source query record type.</typeparam>
            <typeparam name="TTarget">Target table record type.</typeparam>
            <param name="source">Insert query.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Number of affected records.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.InsertWithDecimalIdentityAsync``2(LinqToDB.Linq.ISelectInsertable{``0,``1},System.Threading.CancellationToken)">
            <summary>
            Executes configured insert query asynchronously and returns identity value of last inserted record as <see cref="T:System.Decimal"/> value.
            </summary>
            <typeparam name="TSource">Source query record type.</typeparam>
            <typeparam name="TTarget">Target table record type.</typeparam>
            <param name="source">Insert query.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Number of affected records.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.InsertOrUpdate``1(LinqToDB.ITable{``0},System.Linq.Expressions.Expression{System.Func{``0}},System.Linq.Expressions.Expression{System.Func{``0,``0}})">
            <summary>
            Inserts new record into target table or updates existing record if record with the same primary key value already exists in target table.
            </summary>
            <typeparam name="T">Table record type.</typeparam>
            <param name="target">Target table.</param>
            <param name="insertSetter">Inserted record constructor expression.
            Expression supports only target table record new expression with field initializers.</param>
            <param name="onDuplicateKeyUpdateSetter">Updated record constructor expression.
            Expression supports only target table record new expression with field initializers.
            Accepts updated record as parameter.</param>
            <returns>Number of affected records.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.InsertOrUpdateAsync``1(LinqToDB.ITable{``0},System.Linq.Expressions.Expression{System.Func{``0}},System.Linq.Expressions.Expression{System.Func{``0,``0}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously inserts new record into target table or updates existing record if record with the same primary key value already exists in target table.
            </summary>
            <typeparam name="T">Table record type.</typeparam>
            <param name="target">Target table.</param>
            <param name="insertSetter">Inserted record constructor expression.
            Expression supports only target table record new expression with field initializers.</param>
            <param name="onDuplicateKeyUpdateSetter">Updated record constructor expression.
            Expression supports only target table record new expression with field initializers.
            Accepts updated record as parameter.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Number of affected records.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.InsertOrUpdate``1(LinqToDB.ITable{``0},System.Linq.Expressions.Expression{System.Func{``0}},System.Linq.Expressions.Expression{System.Func{``0,``0}},System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Inserts new record into target table or updates existing record if record with the same key value already exists in target table.
            </summary>
            <typeparam name="T">Table record type.</typeparam>
            <param name="target">Target table.</param>
            <param name="insertSetter">Inserted record constructor expression.
            Expression supports only target table record new expression with field initializers.</param>
            <param name="onDuplicateKeyUpdateSetter">Updated record constructor expression.
            Expression supports only target table record new expression with field initializers.
            Accepts updated record as parameter.</param>
            <param name="keySelector">Key fields selector to specify what fields and values must be used as key fields for selection between insert and update operations.
            Expression supports only target table record new expression with field initializers for each key field. Assigned key field value will be used as key value by operation type selector.</param>
            <returns>Number of affected records.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.InsertOrUpdateAsync``1(LinqToDB.ITable{``0},System.Linq.Expressions.Expression{System.Func{``0}},System.Linq.Expressions.Expression{System.Func{``0,``0}},System.Linq.Expressions.Expression{System.Func{``0}},System.Threading.CancellationToken)">
            <summary>
            Asynchronously inserts new record into target table or updates existing record if record with the same key value already exists in target table.
            </summary>
            <typeparam name="T">Table record type.</typeparam>
            <param name="target">Target table.</param>
            <param name="insertSetter">Inserted record constructor expression.
            Expression supports only target table record new expression with field initializers.</param>
            <param name="onDuplicateKeyUpdateSetter">Updated record constructor expression.
            Expression supports only target table record new expression with field initializers.
            Accepts updated record as parameter.</param>
            <param name="keySelector">Key fields selector to specify what fields and values must be used as key fields for selection between insert and update operations.
            Expression supports only target table record new expression with field initializers for each key field. Assigned key field value will be used as key value by operation type selector.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Number of affected records.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.Drop``1(LinqToDB.ITable{``0},System.Boolean)">
            <summary>
            Drops database table.
            </summary>
            <typeparam name="T">Table record type.</typeparam>
            <param name="target">Dropped table.</param>
            <param name="throwExceptionIfNotExists">If <c>false</c>, any exception during drop operation will be silently catched and <c>0</c> returned.
            This behavior is not correct and will be fixed in future to mask only missing table exceptions.
            Tracked by <a href="https://github.com/linq2db/linq2db/issues/798">issue</a>.
            Default value: <c>true</c>.</param>
            <returns>Number of affected records. Usually <c>-1</c> as it is not data modification operation.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.DropAsync``1(LinqToDB.ITable{``0},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Drops database table asynchronously.
            </summary>
            <typeparam name="T">Table record type.</typeparam>
            <param name="target">Dropped table.</param>
            <param name="throwExceptionIfNotExists">If <c>false</c>, any exception during drop operation will be silently catched and <c>0</c> returned.
            This behavior is not correct and will be fixed in future to mask only missing table exceptions.
            Tracked by <a href="https://github.com/linq2db/linq2db/issues/798">issue</a>.
            Default value: <c>true</c>.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Number of affected records. Usually <c>-1</c> as it is not data modification operation.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.Take``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{System.Int32}})">
            <summary>
            Limits number of records, returned from query.
            </summary>
            <typeparam name="TSource">Source table record type.</typeparam>
            <param name="source">Source query.</param>
            <param name="count">Expression that defines number of records to select.</param>
            <returns>Query with limit applied.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.Take``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{System.Int32}},LinqToDB.TakeHints)">
            <summary>
            Limits number of records, returned from query. Allows to specify TAKE clause hints.
            Using this method may cause runtime <see cref="T:LinqToDB.Linq.LinqException"/> if take hints are not supported by database.
            </summary>
            <typeparam name="TSource">Source table record type.</typeparam>
            <param name="source">Source query.</param>
            <param name="count">Expression that defines SQL TAKE parameter value.</param>
            <param name="hints"><see cref="T:LinqToDB.TakeHints"/> hints for SQL TAKE clause.</param>
            <returns>Query with limit applied.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.Take``1(System.Linq.IQueryable{``0},System.Int32,LinqToDB.TakeHints)">
            <summary>
            Limits number of records, returned from query. Allows to specify TAKE clause hints.
            Using this method may cause runtime <see cref="T:LinqToDB.Linq.LinqException"/> if take hints are not supported by database.
            </summary>
            <typeparam name="TSource">Source table record type.</typeparam>
            <param name="source">Source query.</param>
            <param name="count">SQL TAKE parameter value.</param>
            <param name="hints"><see cref="T:LinqToDB.TakeHints"/> hints for SQL TAKE clause.</param>
            <returns>Query with limit applied.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.Skip``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{System.Int32}})">
            <summary>
            Ignores first N records from source query.
            </summary>
            <typeparam name="TSource">Source table record type.</typeparam>
            <param name="source">Source query.</param>
            <param name="count">Expression that defines number of records to skip.</param>
            <returns>Query without skipped records.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.ElementAt``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{System.Int32}})">
            <summary>
            Selects record at specified position from source query.
            If query doesn't return enough records, <see cref="T:System.InvalidOperationException"/> will be thrown.
            </summary>
            <typeparam name="TSource">Source table record type.</typeparam>
            <param name="source">Source query.</param>
            <param name="index">Expression that defines index of record to select.</param>
            <exception cref="T:System.InvalidOperationException">Source query doesn't have record with specified index.</exception>
            <returns>Record at specified position.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.ElementAtAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{System.Int32}},System.Threading.CancellationToken)">
            <summary>
            Selects record at specified position from source query asynchronously.
            If query doesn't return enough records, <see cref="T:System.InvalidOperationException"/> will be thrown.
            </summary>
            <typeparam name="TSource">Source table record type.</typeparam>
            <param name="source">Source query.</param>
            <param name="index">Expression that defines index of record to select.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <exception cref="T:System.InvalidOperationException">Source query doesn't have record with specified index.</exception>
            <returns>Record at specified position.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.ElementAtOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{System.Int32}})">
            <summary>
            Selects record at specified position from source query.
            </summary>
            <typeparam name="TSource">Source table record type.</typeparam>
            <param name="source">Source query.</param>
            <param name="index">Expression that defines index of record to select.</param>
            <returns>Record at specified position or default value, if source query doesn't have record with such index.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.ElementAtOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{System.Int32}},System.Threading.CancellationToken)">
            <summary>
            Selects record at specified position from source query asynchronously.
            </summary>
            <typeparam name="TSource">Source table record type.</typeparam>
            <param name="source">Source query.</param>
            <param name="index">Expression that defines index of record to select.</param>
            <param name="token">Optional asynchronous operation cancellation token.</param>
            <returns>Record at specified position or default value, if source query doesn't have record with such index.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.Having``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Filters source query using HAVING SQL clause.
            In general you don't need to use this method as linq2db is able to propely identify current context for
            <see cref="M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})"/> method and generate
            HAVING clause.
            <a href="https://github.com/linq2db/linq2db/issues/133">More details</a>.
            </summary>
            <typeparam name="TSource">Source query record type.</typeparam>
            <param name="source">Source query to filter.</param>
            <param name="predicate">Filtering expression.</param>
            <returns>Filtered query.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.ThenOrBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Adds ascending sort expression to a query.
            If query already sorted, existing sorting will be preserved and updated with new sort.
            </summary>
            <typeparam name="TSource">Source query record type.</typeparam>
            <typeparam name="TKey">Sort expression type.</typeparam>
            <param name="source">Source query.</param>
            <param name="keySelector">Sort expression selector.</param>
            <returns>Sorted query.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.ThenOrByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Adds descending sort expression to a query.
            If query already sorted, existing sorting will be preserved and updated with new sort.
            </summary>
            <typeparam name="TSource">Source query record type.</typeparam>
            <typeparam name="TKey">Sort expression type.</typeparam>
            <param name="source">Source query.</param>
            <param name="keySelector">Sort expression selector.</param>
            <returns>Sorted query.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.GetContext``1(System.Linq.IQueryable{``0})">
            <summary>
            Converts query to <see cref="T:LinqToDB.Linq.Builder.ContextParser.Context"/> object, used by merge operation generator.
            </summary>
            <typeparam name="TSource">Source query record type.</typeparam>
            <param name="source">Source query.</param>
            <returns>Query context object.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.Join``1(System.Linq.IQueryable{``0},LinqToDB.SqlJoinType,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Defines inner or outer join between two sub-queries or tables.
            </summary>
            <typeparam name="TSource">Type of record for right join operand.</typeparam>
            <param name="source">Right join operand.</param>
            <param name="joinType">Type of join.</param>
            <param name="predicate">Join predicate.</param>
            <returns>Right operand.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.InnerJoin``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Defines inner join between two sub-queries or tables.
            </summary>
            <typeparam name="TSource">Type of record for right join operand.</typeparam>
            <param name="source">Right join operand.</param>
            <param name="predicate">Join predicate.</param>
            <returns>Right operand.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.LeftJoin``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Defines left outer join between two sub-queries or tables.
            </summary>
            <typeparam name="TSource">Type of record for right join operand.</typeparam>
            <param name="source">Right join operand.</param>
            <param name="predicate">Join predicate.</param>
            <returns>Right operand.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.RightJoin``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Defines right outer join between two sub-queries or tables.
            </summary>
            <typeparam name="TSource">Type of record for right join operand.</typeparam>
            <param name="source">Right join operand.</param>
            <param name="predicate">Join predicate.</param>
            <returns>Right operand.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.FullJoin``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Defines full outer join between two sub-queries or tables.
            </summary>
            <typeparam name="TSource">Type of record for right join operand.</typeparam>
            <param name="source">Right join operand.</param>
            <param name="predicate">Join predicate.</param>
            <returns>Right operand.</returns>
        </member>
        <member name="M:LinqToDB.LinqExtensions.GenerateTestString(System.Linq.IQueryable,System.Boolean)">
            <summary>
            Generates test source code for specified query.
            This method could be usefull to debug queries and attach test code to linq2db issue reports.
            </summary>
            <param name="query">Query to test.</param>
            <param name="mangleNames">Should we use real names for used types, members and namespace or generate obfuscated names.</param>
            <returns>Test source code.</returns>
        </member>
        <member name="M:LinqToDB.Linq.Builder.ExpressionBuilder.Equal(LinqToDB.Mapping.MappingSchema,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Gets Expression.Equal if <paramref name="left"/> and <paramref name="right"/> expression types are not same
            <paramref name="right"/> would be converted to <paramref name="left"/>
            </summary>
            <param name="mappringSchema"></param>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="F:LinqToDB.Linq.Builder.RequestFor.Table">
            <summary>
            Checks the sequence if the expression is a table or an association.
            </summary>
        </member>
        <member name="F:LinqToDB.Linq.Builder.RequestFor.Association">
            <summary>
            Checks the sequence if the expression is an association.
            </summary>
        </member>
        <member name="F:LinqToDB.Linq.Builder.RequestFor.Object">
            <summary>
            Checks the sequence if the expression is a table, an association, new {}, or new MyClass {}.
            </summary>
        </member>
        <member name="F:LinqToDB.Linq.Builder.RequestFor.GroupJoin">
            <summary>
            Checks the sequence if the expression is a group join.
            </summary>
        </member>
        <member name="F:LinqToDB.Linq.Builder.RequestFor.Field">
            <summary>
            Checks the sequence if the expression is a field.
            </summary>
        </member>
        <member name="F:LinqToDB.Linq.Builder.RequestFor.Expression">
            <summary>
            Checks the sequence if the expression contains an SQL expression.
            </summary>
        </member>
        <member name="F:LinqToDB.Linq.Builder.RequestFor.SubQuery">
            <summary>
            Checks the context if it's a subquery.
            </summary>
        </member>
        <member name="F:LinqToDB.Linq.Builder.RequestFor.Root">
            <summary>
            Checks the context if it's a root of the expression.
            </summary>
        </member>
        <member name="T:LinqToDB.Linq.LinqException">
            <summary>
            Defines the base class for the namespace exceptions.
            </summary>
            <remarks>
            This class is the base class for exceptions that may occur during
            execution of the namespace members.
            </remarks>
        </member>
        <member name="M:LinqToDB.Linq.LinqException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LinqToDB.Linq.LinqException"/> class.
            </summary>
            <remarks>
            This constructor initializes the <see cref="P:System.Exception.Message"/>
            property of the new instance
            to a system-supplied message that describes the error,
            such as "LinqToDB Linq error has occurred."
            </remarks>
        </member>
        <member name="M:LinqToDB.Linq.LinqException.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:LinqToDB.Linq.LinqException"/> class
            with the specified error message.
            </summary>
            <param name="message">The message to display to the client when the exception is thrown.</param>
            <param name="args">An System.Object array containing zero or more objects to format.</param>
            <seealso cref="P:System.Exception.Message"/>
        </member>
        <member name="M:LinqToDB.Linq.LinqException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:LinqToDB.Linq.LinqException"/> class
            with the specified error message and InnerException property.
            </summary>
            <param name="message">The message to display to the client when the exception is thrown.</param>
            <param name="innerException">The InnerException, if any, that threw the current exception.</param>
            <seealso cref="P:System.Exception.Message"/>
            <seealso cref="P:System.Exception.InnerException"/>
        </member>
        <member name="M:LinqToDB.Linq.LinqException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:LinqToDB.Linq.LinqException"/> class
            with the InnerException property.
            </summary>
            <param name="innerException">The InnerException, if any, that threw the current exception.</param>
            <seealso cref="P:System.Exception.InnerException"/>
        </member>
        <member name="M:LinqToDB.Linq.Query.ClearCaches">
            <summary>
            Clears query caches for all typed queries.
            </summary>
        </member>
        <member name="F:LinqToDB.Linq.Query`1.CacheSize">
            <summary>
            LINQ query cache size (per entity type).
            </summary>
        </member>
        <member name="F:LinqToDB.Linq.Query`1._cacheVersion">
            <summary>
            LINQ query cache version. Changed when query added or removed from cache.
            Not changed when cache reordered.
            </summary>
        </member>
        <member name="F:LinqToDB.Linq.Query`1._sync">
            <summary>
            LINQ query cache synchronization object.
            </summary>
        </member>
        <member name="M:LinqToDB.Linq.Query`1.ClearCache">
            <summary>
            Empties LINQ query cache for <typeparamref name="T"/> entity type.
            </summary>
        </member>
        <member name="T:LinqToDB.Mapping.AssociationAttribute">
            <summary>
            Defines relation between tables or views.
            Could be applied to:
            - instance properties and fields;
            - instance and static methods.
            
            For associations, defined using static methods, <c>this</c> mapping side defined by type of first parameter.
            Also, optionally, you can pass data context object as extra method parameter.
            
            Based on association type - to one or to multiple records - result type should be target record's mapping type or
            <see cref="T:System.IEquatable`1"/> collection.
            
            By default associations are used only for joins generation in LINQ queries and will have <c>null</c> value for loaded
            records. To load data into association, you should explicitly specify it in your query using <see cref="M:LinqToDB.LinqExtensions.LoadWith``1(LinqToDB.ITable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})"/> method.
            </summary>
        </member>
        <member name="M:LinqToDB.Mapping.AssociationAttribute.#ctor">
            <summary>
            Creates attribute instance.
            </summary>
        </member>
        <member name="M:LinqToDB.Mapping.AssociationAttribute.GetThisKeys">
            <summary>
            Returns <see cref="P:LinqToDB.Mapping.AssociationAttribute.ThisKey"/> value as a list of key member names.
            </summary>
            <returns>List of key members.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.AssociationAttribute.GetOtherKeys">
            <summary>
            Returns <see cref="P:LinqToDB.Mapping.AssociationAttribute.OtherKey"/> value as a list of key member names.
            </summary>
            <returns>List of key members.</returns>
        </member>
        <member name="P:LinqToDB.Mapping.AssociationAttribute.Configuration">
            <summary>
            Gets or sets mapping schema configuration name, for which this attribute should be taken into account.
            <see cref="T:LinqToDB.ProviderName"/> for standard names.
            Attributes with <c>null</c> or empty string <see cref="P:LinqToDB.Mapping.AssociationAttribute.Configuration"/> value applied to all configurations (if no attribute found for current configuration).
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.AssociationAttribute.ThisKey">
            <summary>
            Gets or sets comma-separated list of association key members on this side of association.
            Those keys will be used for join predicate generation and must be compatible with <see cref="P:LinqToDB.Mapping.AssociationAttribute.OtherKey"/> keys.
            You must specify keys it you do not use custom predicate (see <see cref="P:LinqToDB.Mapping.AssociationAttribute.ExpressionPredicate"/>).
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.AssociationAttribute.OtherKey">
            <summary>
            Gets or sets comma-separated list of association key members on another side of association.
            Those keys will be used for join predicate generation and must be compatible with <see cref="P:LinqToDB.Mapping.AssociationAttribute.ThisKey"/> keys.
            You must specify keys it you do not use custom predicate (see <see cref="P:LinqToDB.Mapping.AssociationAttribute.ExpressionPredicate"/>).
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.AssociationAttribute.ExpressionPredicate">
            <summary>
            Specifies static property or method without parameters, that returns join predicate expression. This predicate will be used together with
            <see cref="P:LinqToDB.Mapping.AssociationAttribute.ThisKey"/>/<see cref="P:LinqToDB.Mapping.AssociationAttribute.OtherKey"/> join keys, if they are specified.
            Predicate expression lambda function takes two parameters: this record and other record and returns boolean result.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.AssociationAttribute.Storage">
            <summary>
            Specify name of property or field to store association value, loaded using <see cref="M:LinqToDB.LinqExtensions.LoadWith``1(LinqToDB.ITable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})"/> method.
            When not specified, current association memeber will be used.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.AssociationAttribute.CanBeNull">
            <summary>
            Defines type of join:
            - inner join for <c>CanBeNull = false</c>;
            - left join for <c>CanBeNull = true</c>.
            Default value: <c>true</c>.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.AssociationAttribute.KeyName">
            <summary>
            This property is not used by linq2db.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.AssociationAttribute.BackReferenceName">
            <summary>
            This property is not used by linq2db.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.AssociationAttribute.IsBackReference">
            <summary>
            This property is not used by linq2db.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.AssociationAttribute.Relationship">
            <summary>
            This property is not used by linq2db.
            </summary>
        </member>
        <member name="T:LinqToDB.Mapping.AssociationDescriptor">
            <summary>
            Stores association descriptor.
            </summary>
        </member>
        <member name="M:LinqToDB.Mapping.AssociationDescriptor.#ctor(System.Type,System.Reflection.MemberInfo,System.String[],System.String[],System.String,System.String,System.Boolean)">
            <summary>
            Creates descriptor instance.
            </summary>
            <param name="type">From (this) side entity mapping type.</param>
            <param name="memberInfo">Association member (field, property or method).</param>
            <param name="thisKey">List of names of from (this) key members.</param>
            <param name="otherKey">List of names of to (other) key members.</param>
            <param name="expressionPredicate">Optional predicate expresssion source property or method.</param>
            <param name="storage">Optional association value storage field or property name.</param>
            <param name="canBeNull">If <c>true</c>, association will generate outer join, otherwise - inner join.</param>
        </member>
        <member name="M:LinqToDB.Mapping.AssociationDescriptor.ParseKeys(System.String)">
            <summary>
            Parse comma-separated list of association key column members into string array.
            </summary>
            <param name="keys">Comma-separated (spaces allowed) list of association key column members.</param>
            <returns>Returns array with names of association key column members.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.AssociationDescriptor.GetPredicate(System.Type,System.Type)">
            <summary>
            Loads predicate expression from <see cref="P:LinqToDB.Mapping.AssociationDescriptor.ExpressionPredicate"/> member.
            </summary>
            <param name="parentType">Type of object that declares association</param>
            <param name="objectType">Type of object associated with expression predicate</param>
            <returns><c>null</c> of association has no custom predicate expression or predicate expression, specified
            by <see cref="P:LinqToDB.Mapping.AssociationDescriptor.ExpressionPredicate"/> member.</returns>
        </member>
        <member name="P:LinqToDB.Mapping.AssociationDescriptor.MemberInfo">
            <summary>
            Gets or sets association member (field, property or method).
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.AssociationDescriptor.ThisKey">
            <summary>
            Gets or sets list of names of from (this) key members. Could be empty, if association has predicate expression.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.AssociationDescriptor.OtherKey">
            <summary>
            Gets or sets list of names of to (other) key members. Could be empty, if association has predicate expression.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.AssociationDescriptor.ExpressionPredicate">
            <summary>
            Gets or sets optional predicate expresssion source property or method.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.AssociationDescriptor.Storage">
            <summary>
            Gets or sets optional association value storage field or property name. Used with LoadWith.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.AssociationDescriptor.CanBeNull">
            <summary>
            Gets or sets join type, generated for current association.
            If <c>true</c>, association will generate outer join, otherwise - inner join.
            </summary>
        </member>
        <member name="T:LinqToDB.Mapping.ColumnAliasAttribute">
            <summary>
            Specifies that current field or property is just an alias to another property or field.
            Currently this attribute has several issues:
            - you can apply it to class or interface - such attribute will be ignored by linq2db;
            - it is possible to define attribute without setting  <see cref="P:LinqToDB.Mapping.ColumnAliasAttribute.MemberName"/> value;
            - you can define alias to another alias property or field and potentially create loop.
            </summary>
        </member>
        <member name="M:LinqToDB.Mapping.ColumnAliasAttribute.#ctor">
            <summary>
            Use <see cref="M:LinqToDB.Mapping.ColumnAliasAttribute.#ctor(System.String)"/> constructor or specify <see cref="P:LinqToDB.Mapping.ColumnAliasAttribute.MemberName"/> value.
            </summary>
        </member>
        <member name="M:LinqToDB.Mapping.ColumnAliasAttribute.#ctor(System.String)">
            <summary>
            Creates attribute instance.
            </summary>
            <param name="memberName">Name of target property or field.</param>
        </member>
        <member name="P:LinqToDB.Mapping.ColumnAliasAttribute.Configuration">
            <summary>
            Mapping schema configuration name, for which this attribute should be taken into account.
            <see cref="T:LinqToDB.ProviderName"/> for standard names.
            Attributes with <c>null</c> or empty string <see cref="P:LinqToDB.Mapping.ColumnAliasAttribute.Configuration"/> value applied to all configurations (if no attribute found for current configuration).
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.ColumnAliasAttribute.MemberName">
            <summary>
            Gets or sets the name of target property or field.
            </summary>
        </member>
        <member name="T:LinqToDB.Mapping.ColumnAttribute">
            <summary>
            Configures mapping of mapping class member to database column.
            Could be applied directly to a property or field or to mapping class/interface.
            In latter case you should specify member name using <see cref="P:LinqToDB.Mapping.ColumnAttribute.MemberName"/> property.
            </summary>
        </member>
        <member name="M:LinqToDB.Mapping.ColumnAttribute.#ctor">
            <summary>
            Creates attribute instance.
            </summary>
        </member>
        <member name="M:LinqToDB.Mapping.ColumnAttribute.#ctor(System.String)">
            <summary>
            Creates attribute instance.
            </summary>
            <param name="columnName">Database column name.</param>
        </member>
        <member name="M:LinqToDB.Mapping.ColumnAttribute.#ctor(System.String,System.String)">
            <summary>
            Creates attribute instance.
            </summary>
            <param name="columnName">Database column name.</param>
            <param name="memberName">Name of mapped member. See <see cref="P:LinqToDB.Mapping.ColumnAttribute.MemberName"/> for more details.</param>
        </member>
        <member name="M:LinqToDB.Mapping.ColumnAttribute.#ctor(System.String,LinqToDB.Mapping.ColumnAttribute)">
            <summary>
            Copy constructor.
            </summary>
            <param name="memberName">Name of mapped member. See <see cref="P:LinqToDB.Mapping.ColumnAttribute.MemberName"/> for more details.</param>
            <param name="ca">Attribute to clone.</param>
        </member>
        <member name="M:LinqToDB.Mapping.ColumnAttribute.#ctor(LinqToDB.Mapping.ColumnAttribute)">
            <summary>
            Copy constructor.
            </summary>
            <param name="ca">Attribute to clone.</param>
        </member>
        <member name="M:LinqToDB.Mapping.ColumnAttribute.HasSkipOnInsert">
            <summary>
            Returns <c>true</c>, if <see cref="P:LinqToDB.Mapping.ColumnAttribute.SkipOnInsert"/> was configured for current attribute.
            </summary>
            <returns><c>true</c> if <see cref="P:LinqToDB.Mapping.ColumnAttribute.SkipOnInsert"/> property was set in attribute.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.ColumnAttribute.HasSkipOnUpdate">
            <summary>
            Returns <c>true</c>, if <see cref="P:LinqToDB.Mapping.ColumnAttribute.SkipOnUpdate"/> was configured for current attribute.
            </summary>
            <returns><c>true</c> if <see cref="P:LinqToDB.Mapping.ColumnAttribute.SkipOnUpdate"/> property was set in attribute.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.ColumnAttribute.HasIsIdentity">
            <summary>
            Returns <c>true</c>, if <see cref="P:LinqToDB.Mapping.ColumnAttribute.IsIdentity"/> was configured for current attribute.
            </summary>
            <returns><c>true</c> if <see cref="P:LinqToDB.Mapping.ColumnAttribute.IsIdentity"/> property was set in attribute.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.ColumnAttribute.HasIsPrimaryKey">
            <summary>
            Returns <c>true</c>, if <see cref="P:LinqToDB.Mapping.ColumnAttribute.IsPrimaryKey"/> was configured for current attribute.
            </summary>
            <returns><c>true</c> if <see cref="P:LinqToDB.Mapping.ColumnAttribute.IsPrimaryKey"/> property was set in attribute.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.ColumnAttribute.HasCanBeNull">
            <summary>
            Returns <c>true</c>, if <see cref="P:LinqToDB.Mapping.ColumnAttribute.CanBeNull"/> was configured for current attribute.
            </summary>
            <returns><c>true</c> if <see cref="P:LinqToDB.Mapping.ColumnAttribute.CanBeNull"/> property was set in attribute.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.ColumnAttribute.HasLength">
            <summary>
            Returns <c>true</c>, if <see cref="P:LinqToDB.Mapping.ColumnAttribute.Length"/> was configured for current attribute.
            </summary>
            <returns><c>true</c> if <see cref="P:LinqToDB.Mapping.ColumnAttribute.Length"/> property was set in attribute.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.ColumnAttribute.HasPrecision">
            <summary>
            Returns <c>true</c>, if <see cref="P:LinqToDB.Mapping.ColumnAttribute.Precision"/> was configured for current attribute.
            </summary>
            <returns><c>true</c> if <see cref="P:LinqToDB.Mapping.ColumnAttribute.Precision"/> property was set in attribute.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.ColumnAttribute.HasScale">
            <summary>
            Returns <c>true</c>, if <see cref="P:LinqToDB.Mapping.ColumnAttribute.Scale"/> was configured for current attribute.
            </summary>
            <returns><c>true</c> if <see cref="P:LinqToDB.Mapping.ColumnAttribute.Scale"/> property was set in attribute.</returns>
        </member>
        <member name="P:LinqToDB.Mapping.ColumnAttribute.Configuration">
            <summary>
            Gets or sets mapping schema configuration name, for which this attribute should be taken into account.
            <see cref="T:LinqToDB.ProviderName"/> for standard names.
            Attributes with <c>null</c> or empty string <see cref="P:LinqToDB.Mapping.ColumnAttribute.Configuration"/> value applied to all configurations (if no attribute found for current configuration).
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.ColumnAttribute.Name">
            <summary>
            Gets or sets the name of a column in database.
            If not specified, member name will be used.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.ColumnAttribute.MemberName">
            <summary>
            Gets or sets the name of mapped member.
            When applied to class or interface, should contain name of property of field.
            
            If column is mapped to a property or field of composite object, <see cref="P:LinqToDB.Mapping.ColumnAttribute.MemberName"/> should contain a path to that
            member using dot as separator.
            <example>
            public class Address
            {
                public string City     { get; set; }
                public string Street   { get; set; }
                public int    Building { get; set; }
            }
            
            [Column("city", "Residence.Street")]
            [Column("user_name", "Name")]
            public class User
            {
                public string Name;
                
                [Column("street", ".Street")]
                [Column("building_number", MemberName = ".Building")]
                public Address Residence { get; set; }
            }
            </example>
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.ColumnAttribute.DataType">
            <summary>
            Gets or sets linq2db type for column.
            Default value: default type, defined for member type in mapping schema.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.ColumnAttribute.DbType">
            <summary>
            Gets or sets the name of the database column type.
            Default value: default type, defined for member type in mapping schema.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.ColumnAttribute.IsColumn">
            <summary>
            Gets or sets flag that tells that current member should be included into mapping.
            Use NonColumnAttribute instead as a shorthand.
            Default value: <c>true</c>.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.ColumnAttribute.Storage">
            <summary>
            Gets or sets a storage property or field to hold the value from a column.
            Could be usefull e.g. in combination of private storage field and getter-only mapping property.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.ColumnAttribute.IsDiscriminator">
            <summary>
            Gets or sets whether a column contains a discriminator value for a LINQ to DB inheritance hierarchy.
            <see cref="T:LinqToDB.Mapping.InheritanceMappingAttribute"/> for more details.
            Default value: <c>false</c>.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.ColumnAttribute.SkipOnInsert">
            <summary>
            Gets or sets whether a column is insertable.
            This flag will affect only insert operations with implicit columns specification like
            <see cref="M:LinqToDB.DataExtensions.Insert``1(LinqToDB.IDataContext,``0,System.String,System.String,System.String)"/>
            method and will be ignored when user explicitly specifies value for this column.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.ColumnAttribute.SkipOnUpdate">
            <summary>
            Gets or sets whether a column is updatable.
            This flag will affect only update operations with implicit columns specification like
            <see cref="M:LinqToDB.DataExtensions.Update``1(LinqToDB.IDataContext,``0)"/>
            method and will be ignored when user explicitly specifies value for this column.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.ColumnAttribute.IsIdentity">
            <summary>
            Gets or sets whether a column contains values that the database auto-generates.
            Also see <see cref="T:LinqToDB.Mapping.IdentityAttribute"/>.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.ColumnAttribute.IsPrimaryKey">
            <summary>
            Gets or sets whether this class member represents a column that is part or all of the primary key of the table.
            Also see <see cref="T:LinqToDB.Mapping.PrimaryKeyAttribute"/>.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.ColumnAttribute.PrimaryKeyOrder">
            <summary>
            Gets or sets the Primary Key order.
            See <see cref="P:LinqToDB.Mapping.PrimaryKeyAttribute.Order"/> for more details.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.ColumnAttribute.CanBeNull">
            <summary>
            Gets or sets whether a column can contain <c>NULL</c> values.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.ColumnAttribute.Length">
            <summary>
            Gets or sets the length of the database column.
            Default value: value, defined for member type in mapping schema.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.ColumnAttribute.Precision">
            <summary>
            Gets or sets the precision of the database column.
            Default value: value, defined for member type in mapping schema.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.ColumnAttribute.Scale">
            <summary>
            Gets or sets the Scale of the database column.
            Default value: value, defined for member type in mapping schema.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.ColumnAttribute.CreateFormat">
            <summary>
            Custom template for column definition in create table SQL expression, generated using
            <see cref="M:LinqToDB.DataExtensions.CreateTable``1(LinqToDB.IDataContext,System.String,System.String,System.String,System.String,System.String,LinqToDB.SqlQuery.DefaulNullable)"/> methods.
            Template accepts following string parameters:
            - {0} - column name;
            - {1} - column type;
            - {2} - NULL specifier;
            - {3} - identity specification.
            </summary>
        </member>
        <member name="T:LinqToDB.Mapping.ColumnDescriptor">
            <summary>
            Stores mapping entity column descriptor.
            </summary>
        </member>
        <member name="M:LinqToDB.Mapping.ColumnDescriptor.#ctor(LinqToDB.Mapping.MappingSchema,LinqToDB.Mapping.ColumnAttribute,LinqToDB.Reflection.MemberAccessor)">
            <summary>
            Creates descriptor instance.
            </summary>
            <param name="mappingSchema">Mapping schema, associated with descriptor.</param>
            <param name="columnAttribute">Column attribute, from which descriptor data should be extracted.</param>
            <param name="memberAccessor">Column mapping member accessor.</param>
        </member>
        <member name="M:LinqToDB.Mapping.ColumnDescriptor.GetValue(LinqToDB.Mapping.MappingSchema,System.Object)">
            <summary>
            Extracts column value, converted to database type, from entity object.
            </summary>
            <param name="mappingSchema">Mapping schema with conversion information.</param>
            <param name="obj">Enity object to extract column value from.</param>
            <returns>Returns column value, converted to database type.</returns>
        </member>
        <member name="P:LinqToDB.Mapping.ColumnDescriptor.MemberAccessor">
            <summary>
            Gets column mapping member accessor.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.ColumnDescriptor.MemberInfo">
            <summary>
            Gets column mapping member (field or property).
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.ColumnDescriptor.StorageInfo">
            <summary>
            Gets value storage member (field or property).
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.ColumnDescriptor.MemberType">
            <summary>
            Gets type of column mapping member (field or property).
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.ColumnDescriptor.StorageType">
            <summary>
            Gets type of column value storage member (field or property).
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.ColumnDescriptor.MemberName">
             <summary>
             Gets the name of mapped member.
             When applied to class or interface, should contain name of property of field.
            
             If column is mapped to a property or field of composite object, <see cref="P:LinqToDB.Mapping.ColumnDescriptor.MemberName"/> should contain a path to that
             member using dot as separator.
             <example>
             public class Address
             {
                 public string City     { get; set; }
                 public string Street   { get; set; }
                 public int    Building { get; set; }
             }
            
             [Column("city", "Residence.Street")]
             [Column("user_name", "Name")]
             public class User
             {
                 public string Name;
            
                 [Column("street", ".Street")]
                 [Column("building_number", MemberName = ".Building")]
                 public Address Residence { get; set; }
             }
             </example>
             </summary>
        </member>
        <member name="P:LinqToDB.Mapping.ColumnDescriptor.ColumnName">
            <summary>
            Gets the name of a column in database.
            If not specified, <see cref="P:LinqToDB.Mapping.ColumnDescriptor.MemberName"/> value will be used.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.ColumnDescriptor.Storage">
            <summary>
            Gets storage property or field to hold the value from a column.
            Could be usefull e.g. in combination of private storage field and getter-only mapping property.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.ColumnDescriptor.IsDiscriminator">
            <summary>
            Gets whether a column contains a discriminator value for a LINQ to DB inheritance hierarchy.
            <see cref="T:LinqToDB.Mapping.InheritanceMappingAttribute"/> for more details.
            Default value: <c>false</c>.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.ColumnDescriptor.DataType">
            <summary>
            Gets LINQ to DB type for column.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.ColumnDescriptor.DbType">
            <summary>
            Gets the name of the database column type.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.ColumnDescriptor.IsIdentity">
            <summary>
            Gets whether a column contains values that the database auto-generates.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.ColumnDescriptor.SkipOnInsert">
            <summary>
            Gets whether a column is insertable.
            This flag will affect only insert operations with implicit columns specification like
            <see cref="M:LinqToDB.DataExtensions.Insert``1(LinqToDB.IDataContext,``0,System.String,System.String,System.String)"/>
            method and will be ignored when user explicitly specifies value for this column.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.ColumnDescriptor.SkipOnUpdate">
            <summary>
            Gets whether a column is updatable.
            This flag will affect only update operations with implicit columns specification like
            <see cref="M:LinqToDB.DataExtensions.Update``1(LinqToDB.IDataContext,``0)"/>
            method and will be ignored when user explicitly specifies value for this column.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.ColumnDescriptor.IsPrimaryKey">
            <summary>
            Gets whether this member represents a column that is part or all of the primary key of the table.
            Also see <see cref="T:LinqToDB.Mapping.PrimaryKeyAttribute"/>.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.ColumnDescriptor.PrimaryKeyOrder">
            <summary>
            Gets order of current column in composite primary key.
            Order is used for query generation to define in which order primary key columns must be mentioned in query
            from columns with smallest order value to greatest.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.ColumnDescriptor.CanBeNull">
            <summary>
            Gets whether a column can contain null values.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.ColumnDescriptor.Length">
            <summary>
            Gets the length of the database column.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.ColumnDescriptor.Precision">
            <summary>
            Gets the precision of the database column.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.ColumnDescriptor.Scale">
            <summary>
            Gets the Scale of the database column.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.ColumnDescriptor.CreateFormat">
            <summary>
            Custom template for column definition in create table SQL expression, generated using
            <see cref="M:LinqToDB.DataExtensions.CreateTable``1(LinqToDB.IDataContext,System.String,System.String,System.String,System.String,System.String,LinqToDB.SqlQuery.DefaulNullable)"/> methods.
            Template accepts following string parameters:
            - {0} - column name;
            - {1} - column type;
            - {2} - NULL specifier;
            - {3} - identity specification.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.ColumnDescriptor.SequenceName">
            <summary>
            Gets sequence name for specified column.
            </summary>
        </member>
        <member name="T:LinqToDB.Mapping.DataTypeAttribute">
            <summary>
            This attribute allows to override default types, defined in mapping schema, for current column.
            Also see <seealso cref="P:LinqToDB.Mapping.ColumnAttribute.DataType"/> and <seealso cref="P:LinqToDB.Mapping.ColumnAttribute.DbType"/>.
            Applying this attribute to class or interface will have no effect.
            </summary>
        </member>
        <member name="M:LinqToDB.Mapping.DataTypeAttribute.#ctor(LinqToDB.DataType)">
            <summary>
            Creates attribute instance.
            </summary>
            <param name="dataType">linq2db column type name.</param>
        </member>
        <member name="M:LinqToDB.Mapping.DataTypeAttribute.#ctor(System.String)">
            <summary>
            Creates attribute instance.
            </summary>
            <param name="dbType">SQL column type name.</param>
        </member>
        <member name="M:LinqToDB.Mapping.DataTypeAttribute.#ctor(LinqToDB.DataType,System.String)">
            <summary>
            Creates attribute instance.
            </summary>
            <param name="dataType">linq2db column type name.</param>
            <param name="dbType">SQL column type name.</param>
        </member>
        <member name="P:LinqToDB.Mapping.DataTypeAttribute.Configuration">
            <summary>
            Gets or sets mapping schema configuration name, for which this attribute should be taken into account.
            <see cref="T:LinqToDB.ProviderName"/> for standard names.
            Attributes with <c>null</c> or empty string <see cref="P:LinqToDB.Mapping.DataTypeAttribute.Configuration"/> value applied to all configurations (if no attribute found for current configuration).
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.DataTypeAttribute.DataType">
            <summary>
            Gets or sets linq2db type of the database column.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.DataTypeAttribute.DbType">
            <summary>
            Gets or sets the name of the database column type.
            </summary>
        </member>
        <member name="T:LinqToDB.Mapping.EntityDescriptor">
            <summary>
            Stores mapping entity descriptor.
            </summary>
        </member>
        <member name="M:LinqToDB.Mapping.EntityDescriptor.#ctor(LinqToDB.Mapping.MappingSchema,System.Type)">
            <summary>
            Creates descriptor instance.
            </summary>
            <param name="mappingSchema">Mapping schema, associated with descriptor.</param>
            <param name="type">Mapping class type.</param>
        </member>
        <member name="P:LinqToDB.Mapping.EntityDescriptor.TypeAccessor">
            <summary>
            Gets mapping type accessor.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.EntityDescriptor.TableName">
            <summary>
            Gets name of table or view in database.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.EntityDescriptor.SchemaName">
            <summary>
            Gets optional schema/owner name, to override default name. See <see cref="M:LinqToDB.LinqExtensions.SchemaName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.EntityDescriptor.DatabaseName">
            <summary>
            Gets optional database name, to override default database name. See <see cref="M:LinqToDB.LinqExtensions.DatabaseName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.EntityDescriptor.IsColumnAttributeRequired">
            <summary>
            Gets or sets column mapping rules for current mapping class or interface.
            If <c>true</c>, properties and fields should be marked with one of those attributes to be used for mapping:
            - <see cref="T:LinqToDB.Mapping.ColumnAttribute"/>;
            - <see cref="T:LinqToDB.Mapping.PrimaryKeyAttribute"/>;
            - <see cref="T:LinqToDB.Mapping.IdentityAttribute"/>;
            - <see cref="T:LinqToDB.Mapping.ColumnAliasAttribute"/>.
            Otherwise all supported members of scalar type will be used:
            - public instance fields and properties;
            - explicit interface implmentation properties.
            Also see <seealso cref="F:LinqToDB.Common.Configuration.IsStructIsScalarType"/> and <seealso cref="T:LinqToDB.Mapping.ScalarTypeAttribute"/>.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.EntityDescriptor.Columns">
            <summary>
            Gets list of column descriptors for current entity.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.EntityDescriptor.Associations">
            <summary>
            Gets list of association descriptors for current entity.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.EntityDescriptor.Aliases">
            <summary>
            Gets mapping dictionary to map column aliases to target columns or aliases.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.EntityDescriptor.InheritanceMapping">
            <summary>
            Gets list of inheritace mapping descriptors for current entity.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.EntityDescriptor.ObjectType">
            <summary>
            Gets mapping class type.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.EntityDescriptor.Item(System.String)">
            <summary>
            Gets column descriptor by member name.
            </summary>
            <param name="memberName">Member name.</param>
            <returns>Returns column descriptor or <c>null</c>, if descriptor not found.</returns>
        </member>
        <member name="T:LinqToDB.Mapping.EntityMappingBuilder`1">
            <summary>
            Fluent mapping entity builder.
            </summary>
            <typeparam name="T">Entity mapping type.</typeparam>
        </member>
        <member name="M:LinqToDB.Mapping.EntityMappingBuilder`1.#ctor(LinqToDB.Mapping.FluentMappingBuilder,System.String)">
            <summary>
            Creates enity mapping builder.
            </summary>
            <param name="builder">Fluent mapping builder.</param>
            <param name="configuration">Optional mapping schema configuration name, for which this entity builder should be taken into account.
            <see cref="T:LinqToDB.ProviderName"/> for standard configuration names.</param>
        </member>
        <member name="M:LinqToDB.Mapping.EntityMappingBuilder`1.GetAttributes``1">
            <summary>
            Returns attributes of specified type, applied to current entity type.
            </summary>
            <typeparam name="TA">Attribute type.</typeparam>
            <returns>Returns list of attributes, applied to current entity type.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.EntityMappingBuilder`1.GetAttributes``1(System.Type)">
            <summary>
            Returns attributes of specified type, applied to specified entity type.
            </summary>
            <typeparam name="TA">Attribute type.</typeparam>
            <param name="type">Entity type.</param>
            <returns>Returns list of attributes, applied to specified entity type.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.EntityMappingBuilder`1.GetAttributes``1(System.Reflection.MemberInfo)">
            <summary>
            Returns attributes of specified type, applied to specified entity member.
            Member could be inherited from parent classes.
            </summary>
            <typeparam name="TA">Attribute type.</typeparam>
            <param name="memberInfo">Member info object.</param>
            <returns>Returns list of attributes, applied to specified entity member.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.EntityMappingBuilder`1.GetAttributes``1(System.Func{``0,System.String})">
            <summary>
            Returns attributes of specified type, applied to current entity type and active for current configuration.
            </summary>
            <typeparam name="TA">Attribute type.</typeparam>
            <param name="configGetter">Function to extract configuration name from attribute instance.</param>
            <returns>Returns list of attributes.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.EntityMappingBuilder`1.GetAttributes``1(System.Type,System.Func{``0,System.String})">
            <summary>
            Returns attributes of specified type, applied to specified entity type and active for current configuration.
            </summary>
            <typeparam name="TA">Attribute type.</typeparam>
            <param name="type">Entity type.</param>
            <param name="configGetter">Function to extract configuration name from attribute instance.</param>
            <returns>Returns list of attributes.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.EntityMappingBuilder`1.GetAttributes``1(System.Reflection.MemberInfo,System.Func{``0,System.String})">
            <summary>
            Returns attributes of specified type, applied to specified entity member and active for current configuration.
            </summary>
            <typeparam name="TA">Attribute type.</typeparam>
            <param name="memberInfo">Member info object.</param>
            <param name="configGetter">Function to extract configuration name from attribute instance.</param>
            <returns>Returns list of attributes.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.EntityMappingBuilder`1.HasAttribute(System.Attribute)">
            <summary>
            Adds mapping attribute to current entity.
            </summary>
            <param name="attribute">Mapping attribute to add.</param>
            <returns>Returns current fluent entity mapping builder.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.EntityMappingBuilder`1.HasAttribute(System.Reflection.MemberInfo,System.Attribute)">
            <summary>
            Adds mapping attribute to specified member.
            </summary>
            <param name="memberInfo">Target member.</param>
            <param name="attribute">Mapping attribute to add to specified member.</param>
            <returns>Returns current fluent entity mapping builder.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.EntityMappingBuilder`1.HasAttribute(System.Linq.Expressions.LambdaExpression,System.Attribute)">
            <summary>
            Adds mapping attribute to a member, specified using lambda expression.
            </summary>
            <param name="func">Target member, specified using lambda expression.</param>
            <param name="attribute">Mapping attribute to add to specified member.</param>
            <returns>Returns current fluent entity mapping builder.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.EntityMappingBuilder`1.HasAttribute(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Attribute)">
            <summary>
            Adds mapping attribute to a member, specified using lambda expression.
            </summary>
            <param name="func">Target member, specified using lambda expression.</param>
            <param name="attribute">Mapping attribute to add to specified member.</param>
            <returns>Returns current fluent entity mapping builder.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.EntityMappingBuilder`1.Entity``1(System.String)">
            <summary>
            Creates entity builder for specified mapping type.
            </summary>
            <typeparam name="TE">Mapping type.</typeparam>
            <param name="configuration">Optional mapping schema configuration name, for which this entity builder should be taken into account.
            <see cref="T:LinqToDB.ProviderName"/> for standard configuration names.</param>
            <returns>Returns new fluent entity mapping builder.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.EntityMappingBuilder`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Adds column mapping to current entity.
            </summary>
            <param name="func">Column mapping property or field getter expression.</param>
            <returns>Returns fluent property mapping builder.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.EntityMappingBuilder`1.Association``3(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}})">
            <summary>
            Adds association mapping to current entity.
            </summary>
            <typeparam name="S">Association member type.</typeparam>
            <typeparam name="ID1">This association side key type.</typeparam>
            <typeparam name="ID2">Other association side key type.</typeparam>
            <param name="prop">Association member getter expression.</param>
            <param name="thisKey">This association key getter expression.</param>
            <param name="otherKey">Other association key getter expression.</param>
            <returns>Returns fluent property mapping builder.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.EntityMappingBuilder`1.HasPrimaryKey(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Int32)">
            <summary>
            Adds primary key mapping to current entity.
            </summary>
            <param name="func">Primary key getter expression.</param>
            <param name="order">Primary key field order.
            When multiple fields specified by getter expression, fields will be ordered from first menthioned
            field to last one starting from provided order with step <c>1</c>.</param>
            <returns>Returns current fluent entity mapping builder.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.EntityMappingBuilder`1.HasIdentity(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Adds identity column mappping to current entity.
            </summary>
            <param name="func">Identity field getter expression.</param>
            <returns>Returns current fluent entity mapping builder.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.EntityMappingBuilder`1.HasColumn(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Int32)">
            <summary>
            Adds column mapping to current entity.
            </summary>
            <param name="func">Column member getter expression.</param>
            <param name="order">Unused.</param>
            <returns>Returns current fluent entity mapping builder.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.EntityMappingBuilder`1.Ignore(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Int32)">
            <summary>
            Instruct LINQ to DB to not incude specified member into mapping.
            </summary>
            <param name="func">Member getter expression.</param>
            <param name="order">Unused.</param>
            <returns>Returns current fluent entity mapping builder.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.EntityMappingBuilder`1.HasTableName(System.String)">
            <summary>
            Sets database table name for current entity.
            </summary>
            <param name="tableName">Table name.</param>
            <returns>Returns current fluent entity mapping builder.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.EntityMappingBuilder`1.HasSchemaName(System.String)">
            <summary>
            Sets database schema/owner name for current entity, to override default name.
            See <see cref="M:LinqToDB.LinqExtensions.SchemaName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.
            </summary>
            <param name="schemaName">Schema/owner name.</param>
            <returns>Returns current fluent entity mapping builder.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.EntityMappingBuilder`1.HasDatabaseName(System.String)">
            <summary>
            Sets database name, to override default database name.
            See <see cref="M:LinqToDB.LinqExtensions.DatabaseName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.
            </summary>
            <param name="databaseName">Database name.</param>
            <returns>Returns current fluent entity mapping builder.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.EntityMappingBuilder`1.Inheritance``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0,System.Type,System.Boolean)">
            <summary>
            Adds inheritance mapping for specified discriminator value.
            </summary>
            <typeparam name="S">Discriminator value type.</typeparam>
            <param name="key">Discriminator member getter expression.</param>
            <param name="value">Discriminator value.</param>
            <param name="type">Mapping type, used with specified discriminator value.</param>
            <param name="isDefault">If <c>true</c>, current mapping type used by default.</param>
            <returns>Returns current fluent entity mapping builder.</returns>
        </member>
        <member name="P:LinqToDB.Mapping.EntityMappingBuilder`1.Configuration">
            <summary>
            Gets mapping schema configuration name, for which this entity builder should be taken into account.
            <see cref="T:LinqToDB.ProviderName"/> for standard configuration names.
            </summary>
        </member>
        <member name="T:LinqToDB.Mapping.FluentMappingBuilder">
            <summary>
            Fluent mapping builder.
            </summary>
        </member>
        <member name="M:LinqToDB.Mapping.FluentMappingBuilder.#ctor(LinqToDB.Mapping.MappingSchema)">
            <summary>
            Creates fluent mapping builder for specified mapping schema.
            </summary>
            <param name="mappingSchema">Mapping schema.</param>
        </member>
        <member name="M:LinqToDB.Mapping.FluentMappingBuilder.GetAttributes``1(System.Type)">
            <summary>
            Gets attributes of type <typeparamref name="T"/>, applied to specified type.
            </summary>
            <typeparam name="T">Attribute type.</typeparam>
            <param name="type">Type with attributes.</param>
            <returns>Returns attributes of specified type, applied to <paramref name="type"/>.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.FluentMappingBuilder.GetAttributes``1(System.Type,System.Reflection.MemberInfo)">
            <summary>
            Gets attributes of type <typeparamref name="T"/>, applied to specified member. Search for member in specified
            type or it's parents.
            </summary>
            <typeparam name="T">Attribute type.</typeparam>
            <param name="type">Member owner type.</param>
            <param name="memberInfo">Member descriptor.</param>
            <returns>Returns attributes of specified type, applied to <paramref name="memberInfo"/>.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.FluentMappingBuilder.HasAttribute(System.Type,System.Attribute)">
            <summary>
            Adds mapping attribute to specified type.
            </summary>
            <param name="type">Target type.</param>
            <param name="attribute">Mapping attribute to add to specified type.</param>
            <returns>Returns current fluent mapping builder.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.FluentMappingBuilder.HasAttribute``1(System.Attribute)">
            <summary>
            Adds mapping attribute to specified type.
            </summary>
            <typeparam name="T">Target type.</typeparam>
            <param name="attribute">Mapping attribute to add to specified type.</param>
            <returns>Returns current fluent mapping builder.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.FluentMappingBuilder.HasAttribute(System.Reflection.MemberInfo,System.Attribute)">
            <summary>
            Adds mapping attribute to specified member.
            </summary>
            <param name="memberInfo">Target member.</param>
            <param name="attribute">Mapping attribute to add to specified member.</param>
            <returns>Returns current fluent mapping builder.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.FluentMappingBuilder.HasAttribute(System.Linq.Expressions.LambdaExpression,System.Attribute)">
            <summary>
            Adds mapping attribute to a member, specified using lambda expression.
            </summary>
            <param name="func">Target member, specified using lambda expression.</param>
            <param name="attribute">Mapping attribute to add to specified member.</param>
            <returns>Returns current fluent mapping builder.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.FluentMappingBuilder.HasAttribute``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Attribute)">
            <summary>
            Adds mapping attribute to a member, specified using lambda expression.
            </summary>
            <typeparam name="T">Type of labmda expression parameter.</typeparam>
            <param name="func">Target member, specified using lambda expression.</param>
            <param name="attribute">Mapping attribute to add to specified member.</param>
            <returns>Returns current fluent mapping builder.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.FluentMappingBuilder.Entity``1(System.String)">
            <summary>
            Creates entity builder for specified mapping type.
            </summary>
            <typeparam name="T">Mapping type.</typeparam>
            <param name="configuration">Optional mapping schema configuration name, for which this entity builder should be taken into account.
            <see cref="T:LinqToDB.ProviderName"/> for standard configuration names.</param>
            <returns>Returns entity fluent mapping builder.</returns>
        </member>
        <member name="P:LinqToDB.Mapping.FluentMappingBuilder.MappingSchema">
            <summary>
            Gets builder's mapping schema.
            </summary>
        </member>
        <member name="T:LinqToDB.Mapping.IdentityAttribute">
            <summary>
            Marks target column as identity column with value, generated on database side during insert operations.
            Identity columns will be ignored for insert and update operations with implicit column list like 
            <see cref="M:LinqToDB.DataExtensions.Insert``1(LinqToDB.IDataContext,``0,System.String,System.String,System.String)"/> or
            <see cref="M:LinqToDB.DataExtensions.Update``1(LinqToDB.IDataContext,``0)"/> methods.
            </summary>
        </member>
        <member name="M:LinqToDB.Mapping.IdentityAttribute.#ctor">
            <summary>
            Creates attribute instance.
            </summary>
        </member>
        <member name="M:LinqToDB.Mapping.IdentityAttribute.#ctor(System.String)">
            <summary>
            Creates attribute instance.
            </summary>
            <param name="configuration">Mapping schema configuration name. See <see cref="P:LinqToDB.Mapping.IdentityAttribute.Configuration"/>.</param>
        </member>
        <member name="P:LinqToDB.Mapping.IdentityAttribute.Configuration">
            <summary>
            Gets or sets mapping schema configuration name, for which this attribute should be taken into account.
            <see cref="T:LinqToDB.ProviderName"/> for standard names.
            Attributes with <c>null</c> or empty string <see cref="P:LinqToDB.Mapping.IdentityAttribute.Configuration"/> value applied to all configurations (if no attribute found for current configuration).
            </summary>
        </member>
        <member name="T:LinqToDB.Mapping.InheritanceMapping">
            <summary>
            Stores inheritance mapping information for single discriminator value.
            </summary>
        </member>
        <member name="F:LinqToDB.Mapping.InheritanceMapping.Code">
            <summary>
            Inheritance discriminator value.
            </summary>
        </member>
        <member name="F:LinqToDB.Mapping.InheritanceMapping.IsDefault">
            <summary>
            Is it default mapping.
            </summary>
        </member>
        <member name="F:LinqToDB.Mapping.InheritanceMapping.Type">
            <summary>
            Mapping class type for current discriminator value.
            </summary>
        </member>
        <member name="F:LinqToDB.Mapping.InheritanceMapping.Discriminator">
            <summary>
            Discriminator column descriptor.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.InheritanceMapping.DiscriminatorName">
            <summary>
            Gets discriminator field or property name.
            </summary>
        </member>
        <member name="T:LinqToDB.Mapping.InheritanceMappingAttribute">
            <summary>
            Defines to which type linq2db should map record based on discriminator value. You can apply this attribute to
            a base class or insterface, implemented by all child classes.
            Don't forget to define discriminator value storage column using <see cref="P:LinqToDB.Mapping.ColumnAttribute.IsDiscriminator"/>.
            </summary>
            <remarks>
            You cannot configure inheritance mapping using this attribute for discriminator types, not supported by .NET
            attributes. See <a href="https://github.com/dotnet/csharplang/blob/master/spec/attributes.md#attribute-parameter-types">document</a>
            for a list of supported types.
            </remarks>
        </member>
        <member name="P:LinqToDB.Mapping.InheritanceMappingAttribute.Configuration">
            <summary>
            Gets or sets mapping schema configuration name, for which this attribute should be taken into account.
            <see cref="T:LinqToDB.ProviderName"/> for standard names.
            Attributes with <c>null</c> or empty string <see cref="P:LinqToDB.Mapping.InheritanceMappingAttribute.Configuration"/> value applied to all configurations (if no attribute found for current configuration).
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.InheritanceMappingAttribute.Code">
            <summary>
            Gets or sets discriminator value.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.InheritanceMappingAttribute.IsDefault">
            <summary>
            Get or sets flag, that tells linq2db that current mapping should be used by default if suitable mapping type not found.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.InheritanceMappingAttribute.Type">
            <summary>
            Gets or sets type, to which record with current discriminator value should be mapped.
            </summary>
        </member>
        <member name="M:LinqToDB.Mapping.MappingSchemaInfo.GetEntites">
            <summary>
                Enumerate types for cached <see cref="T:LinqToDB.Mapping.EntityDescriptor"/>s
            </summary>
            <seealso cref="M:LinqToDB.Mapping.MappingSchemaInfo.GetEntityDescriptor(LinqToDB.Mapping.MappingSchema,System.Type)"/>
            <returns>
                <see cref="T:LinqToDB.Common.Array`1"/>
            </returns>
        </member>
        <member name="T:LinqToDB.Mapping.MapValue">
            <summary>
            Stores enum mapping information for single enum value.
            </summary>
        </member>
        <member name="M:LinqToDB.Mapping.MapValue.#ctor(System.Object,LinqToDB.Mapping.MapValueAttribute[])">
            <summary>
            Creates instance of class.
            </summary>
            <param name="origValue">Mapped enum value.</param>
            <param name="mapValues">Enum value mappings.</param>
        </member>
        <member name="P:LinqToDB.Mapping.MapValue.OrigValue">
            <summary>
            Gets enum value.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.MapValue.MapValues">
            <summary>
            Gets enum value mappings.
            </summary>
        </member>
        <member name="T:LinqToDB.Mapping.MapValueAttribute">
            <summary>
            <para>
            Defines bidirectional mapping between enum field value, used on client and database value, stored in database and
            used in queries.
            Enumeration field could have multiple <see cref="T:LinqToDB.Mapping.MapValueAttribute"/> attributes.
            </para>
            <para>
            Mapping from database value to enumeration performed when you load data from database. Linq2db will search for
            enumeration field with <see cref="T:LinqToDB.Mapping.MapValueAttribute"/> with required value. If attribute with such value is not
            found, you will receive <see cref="T:LinqToDB.LinqToDBException"/> error. If you cannot specify all possible values using
            <see cref="T:LinqToDB.Mapping.MapValueAttribute"/>, you can specify custom mapping using methods like
            <see cref="M:LinqToDB.Mapping.MappingSchema.SetConvertExpression``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Boolean)"/>.
            </para>
            <para>
            Mapping from enumeration value performed when you save it to database or use in query. If your enum field has
            multiple <see cref="T:LinqToDB.Mapping.MapValueAttribute"/> attributes, you should mark one of them as default using <see cref="P:LinqToDB.Mapping.MapValueAttribute.IsDefault"/> property.
            </para>
            </summary>
        </member>
        <member name="M:LinqToDB.Mapping.MapValueAttribute.#ctor">
            <summary>
            Adds <see cref="T:LinqToDB.Mapping.MapValueAttribute"/> mapping to enum field. If you don't specify <see cref="P:LinqToDB.Mapping.MapValueAttribute.Value"/> property,
            <c>null</c> value will be used.
            </summary>
        </member>
        <member name="M:LinqToDB.Mapping.MapValueAttribute.#ctor(System.Object)">
            <summary>
            Adds <see cref="T:LinqToDB.Mapping.MapValueAttribute"/> to enum field.
            </summary>
            <param name="value">Database value, mapped to current enumeration field.</param>
        </member>
        <member name="M:LinqToDB.Mapping.MapValueAttribute.#ctor(System.String,System.Object)">
            <summary>
            Adds <see cref="T:LinqToDB.Mapping.MapValueAttribute"/> to enum field.
            </summary>
            <param name="configuration">Name of configuration, for which this attribute instance will be used.</param>
            <param name="value">Database value, mapped to current enumeration field.</param>
        </member>
        <member name="M:LinqToDB.Mapping.MapValueAttribute.#ctor(System.Object,System.Boolean)">
            <summary>
            Adds <see cref="T:LinqToDB.Mapping.MapValueAttribute"/> to enum field.
            </summary>
            <param name="value">Database value, mapped to current enumeration field.</param>
            <param name="isDefault">If <c>true</c>, database value from this attribute will be used for mapping
            to database value.</param>
        </member>
        <member name="M:LinqToDB.Mapping.MapValueAttribute.#ctor(System.String,System.Object,System.Boolean)">
            <summary>
            Adds <see cref="T:LinqToDB.Mapping.MapValueAttribute"/> to enum field.
            </summary>
            <param name="configuration">Name of configuration, for which this attribute instance will be used.</param>
            <param name="value">Database value, mapped to current enumeration field.</param>
            <param name="isDefault">If <c>true</c>, database value from this attribute will be used for mapping
            to database value.</param>
        </member>
        <member name="P:LinqToDB.Mapping.MapValueAttribute.Configuration">
            <summary>
            Mapping schema configuration name, for which this attribute should be taken into account.
            <see cref="T:LinqToDB.ProviderName"/> for standard names.
            Attributes with <c>null</c> or empty string <see cref="P:LinqToDB.Mapping.MapValueAttribute.Configuration"/> value applied to all configurations (if no attribute found for current configuration).
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.MapValueAttribute.Value">
            <summary>
            Database value, to which current enumeration field will be mapped when used in query or saved to database.
            This value, when loaded from database, will be converted to current enumeration field.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.MapValueAttribute.IsDefault">
            <summary>
            If <c>true</c>, <see cref="P:LinqToDB.Mapping.MapValueAttribute.Value"/> property value will be used for conversion from enumeration to
            database value.
            </summary>
        </member>
        <member name="T:LinqToDB.Mapping.NotColumnAttribute">
            <summary>
            Marks current property or column to be ignored for mapping when explicit column mapping disabled.
            See <see cref="P:LinqToDB.Mapping.TableAttribute.IsColumnAttributeRequired"/>.
            </summary>
        </member>
        <member name="M:LinqToDB.Mapping.NotColumnAttribute.#ctor">
            <summary>
            Creates attribute instance.
            </summary>
        </member>
        <member name="T:LinqToDB.Mapping.NotNullAttribute">
            <summary>
            Sets nullability flag for current column to <c>false</c>.
            See <see cref="T:LinqToDB.Mapping.NullableAttribute"/> for more details.
            </summary>
        </member>
        <member name="T:LinqToDB.Mapping.NullableAttribute">
            <summary>
            Explicitly specifies that associated column could contain <c>NULL</c> values.
            Overrides default nullability flag from current mapping schema for property/field type.
            Has lower priority over <seealso cref="P:LinqToDB.Mapping.ColumnAttribute.CanBeNull"/>.
            Using this attribute, you can allow <c>NULL</c> values for identity columns.
            </summary>
        </member>
        <member name="M:LinqToDB.Mapping.NullableAttribute.#ctor">
            <summary>
            Creates attribute isntance.
            </summary>
        </member>
        <member name="M:LinqToDB.Mapping.NullableAttribute.#ctor(System.Boolean)">
            <summary>
            Creates attribute isntance.
            </summary>
            <param name="isNullable">Nullability flag for current column.</param>
        </member>
        <member name="M:LinqToDB.Mapping.NullableAttribute.#ctor(System.String,System.Boolean)">
            <summary>
            Creates attribute isntance.
            </summary>
            <param name="configuration">Mapping schema configuration name. See <see cref="P:LinqToDB.Mapping.NullableAttribute.Configuration"/>.</param>
            <param name="isNullable">Nullability flag for current column.</param>
        </member>
        <member name="P:LinqToDB.Mapping.NullableAttribute.Configuration">
            <summary>
            Gets or sets mapping schema configuration name, for which this attribute should be taken into account.
            <see cref="T:LinqToDB.ProviderName"/> for standard names.
            Attributes with <c>null</c> or empty string <see cref="P:LinqToDB.Mapping.NullableAttribute.Configuration"/> value applied to all configurations (if no attribute found for current configuration).
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.NullableAttribute.CanBeNull">
            <summary>
            Gets or sets nullability flag for current column.
            Default value: <c>true</c>.
            </summary>
        </member>
        <member name="M:LinqToDB.Mapping.NotNullAttribute.#ctor">
            <summary>
            Creates attribute isntance.
            </summary>
        </member>
        <member name="M:LinqToDB.Mapping.NotNullAttribute.#ctor(System.String)">
            <summary>
            Creates attribute isntance.
            </summary>
            <param name="configuration">Mapping schema configuration name. See <see cref="!:Configuration"/>.</param>
        </member>
        <member name="T:LinqToDB.Mapping.PrimaryKeyAttribute">
            <summary>
            Marks property or field as a member of primary key for current mapping type.
            </summary>
        </member>
        <member name="M:LinqToDB.Mapping.PrimaryKeyAttribute.#ctor">
            <summary>
            Creates attribute instance.
            </summary>
        </member>
        <member name="M:LinqToDB.Mapping.PrimaryKeyAttribute.#ctor(System.Int32)">
            <summary>
            Creates attribute instance.
            </summary>
            <param name="order">Column order in composite primary key.</param>
        </member>
        <member name="M:LinqToDB.Mapping.PrimaryKeyAttribute.#ctor(System.String,System.Int32)">
            <summary>
            Creates attribute instance.
            </summary>
            <param name="configuration">Mapping schema configuration name. See <see cref="P:LinqToDB.Mapping.PrimaryKeyAttribute.Configuration"/>.</param>
            <param name="order">Column order in composite primary key.</param>
        </member>
        <member name="P:LinqToDB.Mapping.PrimaryKeyAttribute.Configuration">
            <summary>
            Gets or sets mapping schema configuration name, for which this attribute should be taken into account.
            <see cref="T:LinqToDB.ProviderName"/> for standard names.
            Attributes with <c>null</c> or empty string <see cref="P:LinqToDB.Mapping.PrimaryKeyAttribute.Configuration"/> value applied to all configurations (if no attribute found for current configuration).
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.PrimaryKeyAttribute.Order">
            <summary>
            Gets or sets order of current column in composite primary key.
            Order is used for query generation to define in which order primary key columns must be mentioned in query
            from columns with smallest order value to greatest.
            Default value: <c>-1</c>.
            </summary>
        </member>
        <member name="T:LinqToDB.Mapping.PropertyMappingBuilder`1">
            <summary>
            Column or association fluent mapping builder.
            </summary>
            <typeparam name="T">Column or asociation member type.</typeparam>
        </member>
        <member name="M:LinqToDB.Mapping.PropertyMappingBuilder`1.#ctor(LinqToDB.Mapping.EntityMappingBuilder{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Creates column or association fluent mapping builder.
            </summary>
            <param name="entity">Entity fluent mapping builder.</param>
            <param name="memberGetter">Column or association member getter expression.</param>
        </member>
        <member name="M:LinqToDB.Mapping.PropertyMappingBuilder`1.HasAttribute(System.Attribute)">
            <summary>
            Adds attribute to current mapping member.
            </summary>
            <param name="attribute">Mapping attribute to add to specified member.</param>
            <returns>Returns current column or association mapping builder.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.PropertyMappingBuilder`1.Entity``1(System.String)">
            <summary>
            Creates entity builder for specified mapping type.
            </summary>
            <typeparam name="TE">Mapping type.</typeparam>
            <param name="configuration">Optional mapping schema configuration name, for which this entity builder should be taken into account.
            <see cref="T:LinqToDB.ProviderName"/> for standard configuration names.</param>
            <returns>Returns entity mapping builder.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.PropertyMappingBuilder`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Adds new column mapping to current column's entity.
            </summary>
            <param name="func">Column mapping property or field getter expression.</param>
            <returns>Returns property mapping builder.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.PropertyMappingBuilder`1.Association``3(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}})">
            <summary>
            Adds association mapping to current column's entity.
            </summary>
            <typeparam name="S">Association member type.</typeparam>
            <typeparam name="ID1">This association side key type.</typeparam>
            <typeparam name="ID2">Other association side key type.</typeparam>
            <param name="prop">Association member getter expression.</param>
            <param name="thisKey">This association key getter expression.</param>
            <param name="otherKey">Other association key getter expression.</param>
            <returns>Returns association mapping builder.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.PropertyMappingBuilder`1.IsPrimaryKey(System.Int32)">
            <summary>
            Marks current column as primary key member.
            </summary>
            <param name="order">Order of property in primary key.</param>
            <returns>Returns current column mapping builder.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.PropertyMappingBuilder`1.IsIdentity">
            <summary>
            Marks current column as identity column.
            </summary>
            <returns>Returns current column mapping builder.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.PropertyMappingBuilder`1.HasColumnName(System.String)">
            <summary>
            Sets name for current column.
            </summary>
            <param name="columnName">Column name.</param>
            <returns>Returns current column mapping builder.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.PropertyMappingBuilder`1.HasDataType(LinqToDB.DataType)">
            <summary>
            Sets LINQ to DB type for current column.
            </summary>
            <param name="dataType">Data type.</param>
            <returns>Returns current column mapping builder.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.PropertyMappingBuilder`1.HasDbType(System.String)">
            <summary>
            Sets database type for current column.
            </summary>
            <param name="dbType">Column type.</param>
            <returns>Returns current column mapping builder.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.PropertyMappingBuilder`1.HasCreateFormat(System.String)">
            <summary>
            Sets custom column create SQL template.
            </summary>
            <param name="format">
            Custom template for column definition in create table SQL expression, generated using
            <see cref="M:LinqToDB.DataExtensions.CreateTable``1(LinqToDB.IDataContext,System.String,System.String,System.String,System.String,System.String,LinqToDB.SqlQuery.DefaulNullable)"/> methods.
            Template accepts following string parameters:
            - {0} - column name;
            - {1} - column type;
            - {2} - NULL specifier;
            - {3} - identity specification.
            </param>
            <returns>Returns current column mapping builder.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.PropertyMappingBuilder`1.HasStorage(System.String)">
            <summary>
            Adds data storage property or field for current column.
            </summary>
            <param name="storage">Name of storage property or field for current column.</param>
            <returns>Returns current column mapping builder.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.PropertyMappingBuilder`1.IsDiscriminator(System.Boolean)">
            <summary>
            Marks current column as discriminator column for inheritance mapping.
            </summary>
            <param name="isDiscriminator">If <c>true</c> - column is used as inheritance mapping discriminator.</param>
            <returns>Returns current column mapping builder.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.PropertyMappingBuilder`1.HasSkipOnInsert(System.Boolean)">
            <summary>
            Sets whether a column is insertable.
            This flag will affect only insert operations with implicit columns specification like
            <see cref="M:LinqToDB.DataExtensions.Insert``1(LinqToDB.IDataContext,``0,System.String,System.String,System.String)"/>
            method and will be ignored when user explicitly specifies value for this column.
            </summary>
            <param name="skipOnInsert">If <c>true</c> - column will be ignored for implicit insert operations.</param>
            <returns>Returns current column mapping builder.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.PropertyMappingBuilder`1.HasSkipOnUpdate(System.Boolean)">
            <summary>
            Sets whether a column is updatable.
            This flag will affect only update operations with implicit columns specification like
            <see cref="M:LinqToDB.DataExtensions.Update``1(LinqToDB.IDataContext,``0)"/>
            method and will be ignored when user explicitly specifies value for this column.
            </summary>
            <param name="skipOnUpdate">If <c>true</c> - column will be ignored for implicit update operations.</param>
            <returns>Returns current column mapping builder.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.PropertyMappingBuilder`1.IsNullable(System.Boolean)">
            <summary>
            Sets whether a column can contain <c>NULL</c> values.
            </summary>
            <param name="isNullable">If <c>true</c> - column could contain <c>NULL</c> values.</param>
            <returns>Returns current column mapping builder.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.PropertyMappingBuilder`1.IsNotColumn">
            <summary>
            Sets current member to be excluded from mapping.
            </summary>
            <returns>Returns current mapping builder.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.PropertyMappingBuilder`1.IsColumn">
            <summary>
            Sets current member to be included into mapping as column.
            </summary>
            <returns>Returns current column mapping builder.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.PropertyMappingBuilder`1.HasLength(System.Int32)">
            <summary>
            Sets the length of the database column.
            </summary>
            <param name="length">Column length.</param>
            <returns>Returns current column mapping builder.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.PropertyMappingBuilder`1.HasPrecision(System.Int32)">
            <summary>
            Sets the precision of the database column.
            </summary>
            <param name="precision">Column precision.</param>
            <returns>Returns current column mapping builder.</returns>
        </member>
        <member name="M:LinqToDB.Mapping.PropertyMappingBuilder`1.HasScale(System.Int32)">
            <summary>
            Sets the Scale of the database column.
            </summary>
            <param name="scale">Column scale.</param>
            <returns>Returns current column mapping builder.</returns>
        </member>
        <member name="T:LinqToDB.Mapping.Relationship">
            <summary>
            Defines relationship types for associations.
            See <see cref="P:LinqToDB.Mapping.AssociationAttribute.Relationship"/> for more details.
            </summary>
        </member>
        <member name="F:LinqToDB.Mapping.Relationship.OneToOne">
            <summary>
            One-to-one relationship.
            </summary>
        </member>
        <member name="F:LinqToDB.Mapping.Relationship.OneToMany">
            <summary>
            One-to-many relationship.
            </summary>
        </member>
        <member name="F:LinqToDB.Mapping.Relationship.ManyToOne">
            <summary>
            Many-to-one relationship.
            </summary>
        </member>
        <member name="T:LinqToDB.Mapping.ScalarTypeAttribute">
            <summary>
            Overrides default scalar detection for target class or structure.
            By default linq2db treats primitives and structs as scalar types.
            This attribute allows you to mark class or struct as scalar type or mark struct as non-scalar type.
            Also see <seealso cref="F:LinqToDB.Common.Configuration.IsStructIsScalarType"/>.
            Note that if you marks some type as scalar, you will need to define custom mapping logic between object of
            that type and data parameter using <seealso cref="M:LinqToDB.Mapping.MappingSchema.SetConvertExpression(System.Type,System.Type,System.Linq.Expressions.LambdaExpression,System.Boolean)"/> methods.
            </summary>
        </member>
        <member name="M:LinqToDB.Mapping.ScalarTypeAttribute.#ctor">
            <summary>
            Creates attribute instance.
            </summary>
        </member>
        <member name="M:LinqToDB.Mapping.ScalarTypeAttribute.#ctor(System.Boolean)">
            <summary>
            Creates attribute instance.
            </summary>
            <param name="isScalar">Should target type be treated as scalar type or not.</param>
        </member>
        <member name="M:LinqToDB.Mapping.ScalarTypeAttribute.#ctor(System.String)">
            <summary>
            Creates attribute instance.
            </summary>
            <param name="configuration">Mapping schema configuration name. See <see cref="P:LinqToDB.Mapping.ScalarTypeAttribute.Configuration"/>.</param>
        </member>
        <member name="M:LinqToDB.Mapping.ScalarTypeAttribute.#ctor(System.String,System.Boolean)">
            <summary>
            Creates attribute instance.
            </summary>
            <param name="configuration">Mapping schema configuration name. See <see cref="P:LinqToDB.Mapping.ScalarTypeAttribute.Configuration"/>.</param>
            <param name="isScalar">Should target type be treated as scalar type or not.</param>
        </member>
        <member name="P:LinqToDB.Mapping.ScalarTypeAttribute.Configuration">
            <summary>
            Mapping schema configuration name, for which this attribute should be taken into account.
            <see cref="T:LinqToDB.ProviderName"/> for standard names.
            Attributes with <c>null</c> or empty string <see cref="P:LinqToDB.Mapping.ScalarTypeAttribute.Configuration"/> value applied to all configurations (if no attribute found for current configuration).
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.ScalarTypeAttribute.IsScalar">
            <summary>
            Gets or sets scalar type flag.
            Default value: <c>true</c>.
            </summary>
        </member>
        <member name="T:LinqToDB.Mapping.SequenceNameAttribute">
            <summary>
            Specifies value generation sequence for mapped property of field.
            Currently it supported only for:
            - Firebird generators;
            - Oracle sequences.
            </summary>
        </member>
        <member name="M:LinqToDB.Mapping.SequenceNameAttribute.#ctor(System.String,System.String)">
            <summary>
            Creates attribute instance.
            </summary>
            <param name="configuration">Mapping schema configuration name. See <see cref="P:LinqToDB.Mapping.SequenceNameAttribute.Configuration"/>.</param>
            <param name="sequenceName">Sequence generator name.</param>
        </member>
        <member name="M:LinqToDB.Mapping.SequenceNameAttribute.#ctor(System.String)">
            <summary>
            Creates attribute instance.
            </summary>
            <param name="sequenceName">Sequence generator name.</param>
        </member>
        <member name="P:LinqToDB.Mapping.SequenceNameAttribute.Configuration">
            <summary>
            Gets or sets mapping schema configuration name, for which this attribute should be taken into account.
            <see cref="T:LinqToDB.ProviderName"/> for standard names.
            Attributes with <c>null</c> or empty string <see cref="P:LinqToDB.Mapping.SequenceNameAttribute.Configuration"/> value applied to all configurations (if no attribute found for current configuration).
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.SequenceNameAttribute.SequenceName">
            <summary>
            Gets or sets sequence generator name.
            </summary>
        </member>
        <member name="T:LinqToDB.Mapping.StoredProcedure">
            <summary>
            This attribute is not used by linq2db and will be ignored.
            </summary>
        </member>
        <member name="T:LinqToDB.Mapping.TableAttribute">
            <summary>
            Maps databse table or view to a class or interface.
            You can apply it to any class including non-public, nester or abstract classes.
            Applying it to interfaces will allow you to perform queries against target table, but you need to specify
            projection in your query explicitly, if you want to select data from such mapping.
            </summary>
        </member>
        <member name="M:LinqToDB.Mapping.TableAttribute.#ctor">
            <summary>
            Creates new table mapping atteribute.
            </summary>
        </member>
        <member name="M:LinqToDB.Mapping.TableAttribute.#ctor(System.String)">
            <summary>
            Creates new table mapping atteribute.
            </summary>
            <param name="tableName">Name of mapped table or view in database.</param>
        </member>
        <member name="P:LinqToDB.Mapping.TableAttribute.Configuration">
            <summary>
            Gets or sets mapping schema configuration name, for which this attribute should be taken into account.
            <see cref="T:LinqToDB.ProviderName"/> for standard names.
            Attributes with <c>null</c> or empty string <see cref="P:LinqToDB.Mapping.TableAttribute.Configuration"/> value applied to all configurations (if no attribute found for current configuration).
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.TableAttribute.Name">
            <summary>
            Gets or sets name of table or view in database.
            When not specified, name of class or interface will be used.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.TableAttribute.Schema">
            <summary>
            Gets or sets optional schema/owner name, to override default name. See <see cref="M:LinqToDB.LinqExtensions.SchemaName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.TableAttribute.Database">
            <summary>
            Gets or sets optional database name, to override default database name. See <see cref="M:LinqToDB.LinqExtensions.DatabaseName``1(LinqToDB.ITable{``0},System.String)"/> method for support information per provider.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.TableAttribute.IsColumnAttributeRequired">
            <summary>
            Gets or sets column mapping rules for current class or interface.
            If <c>true</c>, properties and fields should be marked with one of those attributes to be used for mapping:
            - <see cref="T:LinqToDB.Mapping.ColumnAttribute"/>;
            - <see cref="T:LinqToDB.Mapping.PrimaryKeyAttribute"/>;
            - <see cref="T:LinqToDB.Mapping.IdentityAttribute"/>;
            - <see cref="T:LinqToDB.Mapping.ColumnAliasAttribute"/>.
            Otherwise all supported members of scalar type will be used:
            - public instance fields and properties;
            - explicit interface implmentation properties.
            Also see <seealso cref="F:LinqToDB.Common.Configuration.IsStructIsScalarType"/> and <seealso cref="T:LinqToDB.Mapping.ScalarTypeAttribute"/>.
            Default value: <c>true</c>.
            </summary>
        </member>
        <member name="P:LinqToDB.Mapping.TableAttribute.IsView">
            <summary>
            This property currently not implemented and setting it will have no any effect.
            </summary>
        </member>
        <member name="T:LinqToDB.Metadata.MetadataException">
            <summary>
            Defines the base class for the namespace exceptions.
            </summary>
            <remarks>
            This class is the base class for exceptions that may occur during
            execution of the namespace members.
            </remarks>
        </member>
        <member name="M:LinqToDB.Metadata.MetadataException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:LinqToDB.Metadata.MetadataException"/> class.
            </summary>
            <remarks>
            This constructor initializes the <see cref="P:System.Exception.Message"/>
            property of the new instance such as "A Build Type exception has occurred."
            </remarks>
        </member>
        <member name="M:LinqToDB.Metadata.MetadataException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:LinqToDB.Metadata.MetadataException"/> class 
            with the specified error message.
            </summary>
            <param name="message">The message to display to the client when the
            exception is thrown.</param>
            <seealso cref="P:System.Exception.Message"/>
        </member>
        <member name="M:LinqToDB.Metadata.MetadataException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:LinqToDB.Metadata.MetadataException"/> class 
            with the specified error message and InnerException property.
            </summary>
            <param name="message">The message to display to the client when the
            exception is thrown.</param>
            <param name="innerException">The InnerException, if any, that threw
            the current exception.</param>
            <seealso cref="P:System.Exception.Message"/>
            <seealso cref="P:System.Exception.InnerException"/>
        </member>
        <member name="M:LinqToDB.Metadata.MetadataException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:LinqToDB.Metadata.MetadataException"/> class 
            with the specified InnerException property.
            </summary>
            <param name="innerException">The InnerException, if any, that threw
            the current exception.</param>
            <seealso cref="P:System.Exception.InnerException"/>
        </member>
        <member name="T:JetBrains.Annotations.CanBeNullAttribute">
            <summary>
            Indicates that the value of the marked element could be <c>null</c> sometimes,
            so the check for <c>null</c> is necessary before its usage.
            </summary>
            <example><code>
            [CanBeNull] object Test() => null;
            
            void UseTest() {
              var p = Test();
              var s = p.ToString(); // Warning: Possible 'System.NullReferenceException'
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.NotNullAttribute">
            <summary>
            Indicates that the value of the marked element could never be <c>null</c>.
            </summary>
            <example><code>
            [NotNull] object Foo() {
              return null; // Warning: Possible 'null' assignment
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.ItemNotNullAttribute">
            <summary>
            Can be appplied to symbols of types derived from IEnumerable as well as to symbols of Task
            and Lazy classes to indicate that the value of a collection item, of the Task.Result property
            or of the Lazy.Value property can never be null.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.ItemCanBeNullAttribute">
            <summary>
            Can be appplied to symbols of types derived from IEnumerable as well as to symbols of Task
            and Lazy classes to indicate that the value of a collection item, of the Task.Result property
            or of the Lazy.Value property can be null.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.StringFormatMethodAttribute">
            <summary>
            Indicates that the marked method builds string by format pattern and (optional) arguments.
            Parameter, which contains format string, should be given in constructor. The format string
            should be in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/>-like form.
            </summary>
            <example><code>
            [StringFormatMethod("message")]
            void ShowError(string message, params object[] args) { /* do something */ }
            
            void Foo() {
              ShowError("Failed: {0}"); // Warning: Non-existing argument in format string
            }
            </code></example>
        </member>
        <member name="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)">
            <param name="formatParameterName">
            Specifies which parameter of an annotated method should be treated as format-string
            </param>
        </member>
        <member name="T:JetBrains.Annotations.ValueProviderAttribute">
            <summary>
            For a parameter that is expected to be one of the limited set of values.
            Specify fields of which type should be used as values for this parameter.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.InvokerParameterNameAttribute">
            <summary>
            Indicates that the function argument should be string literal and match one
            of the parameters of the caller function. For example, ReSharper annotates
            the parameter of <see cref="T:System.ArgumentNullException"/>.
            </summary>
            <example><code>
            void Foo(string param) {
              if (param == null)
                throw new ArgumentNullException("par"); // Warning: Cannot resolve symbol
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.NotifyPropertyChangedInvocatorAttribute">
             <summary>
             Indicates that the method is contained in a type that implements
             <c>System.ComponentModel.INotifyPropertyChanged</c> interface and this method
             is used to notify that some property value changed.
             </summary>
             <remarks>
             The method should be non-static and conform to one of the supported signatures:
             <list>
             <item><c>NotifyChanged(string)</c></item>
             <item><c>NotifyChanged(params string[])</c></item>
             <item><c>NotifyChanged{T}(Expression{Func{T}})</c></item>
             <item><c>NotifyChanged{T,U}(Expression{Func{T,U}})</c></item>
             <item><c>SetProperty{T}(ref T, T, string)</c></item>
             </list>
             </remarks>
             <example><code>
             public class Foo : INotifyPropertyChanged {
               public event PropertyChangedEventHandler PropertyChanged;
             
               [NotifyPropertyChangedInvocator]
               protected virtual void NotifyChanged(string propertyName) { ... }
            
               string _name;
             
               public string Name {
                 get { return _name; }
                 set { _name = value; NotifyChanged("LastName"); /* Warning */ }
               }
             }
             </code>
             Examples of generated notifications:
             <list>
             <item><c>NotifyChanged("Property")</c></item>
             <item><c>NotifyChanged(() =&gt; Property)</c></item>
             <item><c>NotifyChanged((VM x) =&gt; x.Property)</c></item>
             <item><c>SetProperty(ref myField, value, "Property")</c></item>
             </list>
             </example>
        </member>
        <member name="T:JetBrains.Annotations.ContractAnnotationAttribute">
            <summary>
            Describes dependency between method input and output.
            </summary>
            <syntax>
            <p>Function Definition Table syntax:</p>
            <list>
            <item>FDT      ::= FDTRow [;FDTRow]*</item>
            <item>FDTRow   ::= Input =&gt; Output | Output &lt;= Input</item>
            <item>Input    ::= ParameterName: Value [, Input]*</item>
            <item>Output   ::= [ParameterName: Value]* {halt|stop|void|nothing|Value}</item>
            <item>Value    ::= true | false | null | notnull | canbenull</item>
            </list>
            If method has single input parameter, it's name could be omitted.<br/>
            Using <c>halt</c> (or <c>void</c>/<c>nothing</c>, which is the same)
            for method output means that the methos doesn't return normally.<br/>
            <c>canbenull</c> annotation is only applicable for output parameters.<br/>
            You can use multiple <c>[ContractAnnotation]</c> for each FDT row,
            or use single attribute with rows separated by semicolon.<br/>
            </syntax>
            <examples><list>
            <item><code>
            [ContractAnnotation("=> halt")]
            public void TerminationMethod()
            </code></item>
            <item><code>
            [ContractAnnotation("halt &lt;= condition: false")]
            public void Assert(bool condition, string text) // regular assertion method
            </code></item>
            <item><code>
            [ContractAnnotation("s:null => true")]
            public bool IsNullOrEmpty(string s) // string.IsNullOrEmpty()
            </code></item>
            <item><code>
            // A method that returns null if the parameter is null,
            // and not null if the parameter is not null
            [ContractAnnotation("null => null; notnull => notnull")]
            public object Transform(object data) 
            </code></item>
            <item><code>
            [ContractAnnotation("s:null=>false; =>true,result:notnull; =>false, result:null")]
            public bool TryParse(string s, out Person result)
            </code></item>
            </list></examples>
        </member>
        <member name="T:JetBrains.Annotations.LocalizationRequiredAttribute">
            <summary>
            Indicates that marked element should be localized or not.
            </summary>
            <example><code>
            [LocalizationRequiredAttribute(true)]
            class Foo {
              string str = "my string"; // Warning: Localizable string
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.CannotApplyEqualityOperatorAttribute">
            <summary>
            Indicates that the value of the marked type (or its derivatives)
            cannot be compared using '==' or '!=' operators and <c>Equals()</c>
            should be used instead. However, using '==' or '!=' for comparison
            with <c>null</c> is always permitted.
            </summary>
            <example><code>
            [CannotApplyEqualityOperator]
            class NoEquality { }
            
            class UsesNoEquality {
              void Test() {
                var ca1 = new NoEquality();
                var ca2 = new NoEquality();
                if (ca1 != null) { // OK
                  bool condition = ca1 == ca2; // Warning
                }
              }
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.BaseTypeRequiredAttribute">
            <summary>
            When applied to a target attribute, specifies a requirement for any type marked
            with the target attribute to implement or inherit specific type or types.
            </summary>
            <example><code>
            [BaseTypeRequired(typeof(IComponent)] // Specify requirement
            class ComponentAttribute : Attribute { }
            
            [Component] // ComponentAttribute requires implementing IComponent interface
            class MyComponent : IComponent { }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.UsedImplicitlyAttribute">
            <summary>
            Indicates that the marked symbol is used implicitly (e.g. via reflection, in external library),
            so this symbol will not be marked as unused (as well as by other usage inspections).
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.MeansImplicitUseAttribute">
            <summary>
            Should be used on attributes and causes ReSharper to not mark symbols marked with such attributes
            as unused (as well as by other usage inspections)
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.Access">
            <summary>Only entity marked with attribute considered used.</summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.Assign">
            <summary>Indicates implicit assignment to a member.</summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.InstantiatedWithFixedConstructorSignature">
            <summary>
            Indicates implicit instantiation of a type with fixed constructor signature.
            That means any unused constructor parameters won't be reported as such.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.InstantiatedNoFixedConstructorSignature">
            <summary>Indicates implicit instantiation of a type.</summary>
        </member>
        <member name="T:JetBrains.Annotations.ImplicitUseTargetFlags">
            <summary>
            Specify what is considered used implicitly when marked
            with <see cref="T:JetBrains.Annotations.MeansImplicitUseAttribute"/> or <see cref="T:JetBrains.Annotations.UsedImplicitlyAttribute"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseTargetFlags.Members">
            <summary>Members of entity marked with attribute are considered used.</summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseTargetFlags.WithMembers">
            <summary>Entity marked with attribute and all its members considered used.</summary>
        </member>
        <member name="T:JetBrains.Annotations.PublicAPIAttribute">
            <summary>
            This attribute is intended to mark publicly available API
            which should not be removed and so is treated as used.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.InstantHandleAttribute">
            <summary>
            Tells code analysis engine if the parameter is completely handled when the invoked method is on stack.
            If the parameter is a delegate, indicates that delegate is executed while the method is executed.
            If the parameter is an enumerable, indicates that it is enumerated while the method is executed.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.PureAttribute">
            <summary>
            Indicates that a method does not make any observable state changes.
            The same as <c>System.Diagnostics.Contracts.PureAttribute</c>.
            </summary>
            <example><code>
            [Pure] int Multiply(int x, int y) => x * y;
            
            void M() {
              Multiply(123, 42); // Waring: Return value of pure method is not used
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.MustUseReturnValueAttribute">
            <summary>
            Indicates that the return value of method invocation must be used.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.ProvidesContextAttribute">
            <summary>
            Indicates the type member or parameter of some type, that should be used instead of all other ways
            to get the value that type. This annotation is useful when you have some "context" value evaluated
            and stored somewhere, meaning that all other ways to get this value must be consolidated with existing one.
            </summary>
            <example><code>
            class Foo {
              [ProvidesContext] IBarService _barService = ...;
            
              void ProcessNode(INode node) {
                DoSomething(node, node.GetGlobalServices().Bar);
                //              ^ Warning: use value of '_barService' field
              }
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.PathReferenceAttribute">
            <summary>
            Indicates that a parameter is a path to a file or a folder within a web project.
            Path can be relative or absolute, starting from web root (~).
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.SourceTemplateAttribute">
            <summary>
            An extension method marked with this attribute is processed by ReSharper code completion
            as a 'Source Template'. When extension method is completed over some expression, it's source code
            is automatically expanded like a template at call site.
            </summary>
            <remarks>
            Template method body can contain valid source code and/or special comments starting with '$'.
            Text inside these comments is added as source code when the template is applied. Template parameters
            can be used either as additional method parameters or as identifiers wrapped in two '$' signs.
            Use the <see cref="T:JetBrains.Annotations.MacroAttribute"/> attribute to specify macros for parameters.
            </remarks>
            <example>
            In this example, the 'forEach' method is a source template available over all values
            of enumerable types, producing ordinary C# 'foreach' statement and placing caret inside block:
            <code>
            [SourceTemplate]
            public static void forEach&lt;T&gt;(this IEnumerable&lt;T&gt; xs) {
              foreach (var x in xs) {
                 //$ $END$
              }
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.MacroAttribute">
            <summary>
            Allows specifying a macro for a parameter of a <see cref="T:JetBrains.Annotations.SourceTemplateAttribute">source template</see>.
            </summary>
            <remarks>
            You can apply the attribute on the whole method or on any of its additional parameters. The macro expression
            is defined in the <see cref="P:JetBrains.Annotations.MacroAttribute.Expression"/> property. When applied on a method, the target
            template parameter is defined in the <see cref="P:JetBrains.Annotations.MacroAttribute.Target"/> property. To apply the macro silently
            for the parameter, set the <see cref="P:JetBrains.Annotations.MacroAttribute.Editable"/> property value = -1.
            </remarks>
            <example>
            Applying the attribute on a source template method:
            <code>
            [SourceTemplate, Macro(Target = "item", Expression = "suggestVariableName()")]
            public static void forEach&lt;T&gt;(this IEnumerable&lt;T&gt; collection) {
              foreach (var item in collection) {
                //$ $END$
              }
            }
            </code>
            Applying the attribute on a template method parameter:
            <code>
            [SourceTemplate]
            public static void something(this Entity x, [Macro(Expression = "guid()", Editable = -1)] string newguid) {
              /*$ var $x$Id = "$newguid$" + x.ToString();
              x.DoSomething($x$Id); */
            }
            </code>
            </example>
        </member>
        <member name="P:JetBrains.Annotations.MacroAttribute.Expression">
            <summary>
            Allows specifying a macro that will be executed for a <see cref="T:JetBrains.Annotations.SourceTemplateAttribute">source template</see>
            parameter when the template is expanded.
            </summary>
        </member>
        <member name="P:JetBrains.Annotations.MacroAttribute.Editable">
            <summary>
            Allows specifying which occurrence of the target parameter becomes editable when the template is deployed.
            </summary>
            <remarks>
            If the target parameter is used several times in the template, only one occurrence becomes editable;
            other occurrences are changed synchronously. To specify the zero-based index of the editable occurrence,
            use values >= 0. To make the parameter non-editable when the template is expanded, use -1.
            </remarks>>
        </member>
        <member name="P:JetBrains.Annotations.MacroAttribute.Target">
            <summary>
            Identifies the target parameter of a <see cref="T:JetBrains.Annotations.SourceTemplateAttribute">source template</see> if the
            <see cref="T:JetBrains.Annotations.MacroAttribute"/> is applied on a template method.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcActionAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC action. If applied to a method, the MVC action name is calculated
            implicitly from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcAreaAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC area.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcControllerAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter is
            an MVC controller. If applied to a method, the MVC controller name is calculated
            implicitly from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcMasterAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC Master. Use this attribute
            for custom wrappers similar to <c>System.Web.Mvc.Controller.View(String, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcModelTypeAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC model type. Use this attribute
            for custom wrappers similar to <c>System.Web.Mvc.Controller.View(String, Object)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcPartialViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter is an MVC
            partial view. If applied to a method, the MVC partial view name is calculated implicitly
            from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.RenderPartialExtensions.RenderPartial(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcSuppressViewErrorAttribute">
            <summary>
            ASP.NET MVC attribute. Allows disabling inspections for MVC views within a class or a method.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcDisplayTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC display template.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.Mvc.Html.DisplayExtensions.DisplayForModel(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcEditorTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC editor template.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.EditorExtensions.EditorForModel(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC template.
            Use this attribute for custom wrappers similar to
            <c>System.ComponentModel.DataAnnotations.UIHintAttribute(System.String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view component. If applied to a method, the MVC view name is calculated implicitly
            from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Controller.View(Object)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcViewComponentAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view component name.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcViewComponentViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view component view. If applied to a method, the MVC view component view name is default.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcActionSelectorAttribute">
            <summary>
            ASP.NET MVC attribute. When applied to a parameter of an attribute,
            indicates that this parameter is an MVC action name.
            </summary>
            <example><code>
            [ActionName("Foo")]
            public ActionResult Login(string returnUrl) {
              ViewBag.ReturnUrl = Url.Action("Foo"); // OK
              return RedirectToAction("Bar"); // Error: Cannot resolve action
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.RazorSectionAttribute">
            <summary>
            Razor attribute. Indicates that a parameter or a method is a Razor section.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.WebPages.WebPageBase.RenderSection(String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.CollectionAccessAttribute">
            <summary>
            Indicates how method, constructor invocation or property access
            over collection type affects content of the collection.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.CollectionAccessType.None">
            <summary>Method does not use or modify content of the collection.</summary>
        </member>
        <member name="F:JetBrains.Annotations.CollectionAccessType.Read">
            <summary>Method only reads content of the collection but does not modify it.</summary>
        </member>
        <member name="F:JetBrains.Annotations.CollectionAccessType.ModifyExistingContent">
            <summary>Method can change content of the collection but does not add new elements.</summary>
        </member>
        <member name="F:JetBrains.Annotations.CollectionAccessType.UpdatedContent">
            <summary>Method can add new elements to the collection.</summary>
        </member>
        <member name="T:JetBrains.Annotations.AssertionMethodAttribute">
            <summary>
            Indicates that the marked method is assertion method, i.e. it halts control flow if
            one of the conditions is satisfied. To set the condition, mark one of the parameters with 
            <see cref="T:JetBrains.Annotations.AssertionConditionAttribute"/> attribute.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AssertionConditionAttribute">
            <summary>
            Indicates the condition parameter of the assertion method. The method itself should be
            marked by <see cref="T:JetBrains.Annotations.AssertionMethodAttribute"/> attribute. The mandatory argument of
            the attribute is the assertion type.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AssertionConditionType">
            <summary>
            Specifies assertion type. If the assertion method argument satisfies the condition,
            then the execution continues. Otherwise, execution is assumed to be halted.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_TRUE">
            <summary>Marked parameter should be evaluated to true.</summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_FALSE">
            <summary>Marked parameter should be evaluated to false.</summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_NULL">
            <summary>Marked parameter should be evaluated to null value.</summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_NOT_NULL">
            <summary>Marked parameter should be evaluated to not null value.</summary>
        </member>
        <member name="T:JetBrains.Annotations.LinqTunnelAttribute">
            <summary>
            Indicates that method is pure LINQ method, with postponed enumeration (like Enumerable.Select,
            .Where). This annotation allows inference of [InstantHandle] annotation for parameters
            of delegate type by analyzing LINQ method chains.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.NoEnumerationAttribute">
            <summary>
            Indicates that IEnumerable, passed as parameter, is not enumerated.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.RegexPatternAttribute">
            <summary>
            Indicates that parameter is regular expression pattern.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.XamlItemsControlAttribute">
            <summary>
            XAML attribute. Indicates the type that has <c>ItemsSource</c> property and should be treated
            as <c>ItemsControl</c>-derived type, to enable inner items <c>DataContext</c> type resolve.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.XamlItemBindingOfItemsControlAttribute">
            <summary>
            XAML attribute. Indicates the property of some <c>BindingBase</c>-derived type, that
            is used to bind some item of <c>ItemsControl</c>-derived type. This annotation will
            enable the <c>DataContext</c> type resolve for XAML bindings for such properties.
            </summary>
            <remarks>
            Property should have the tree ancestor of the <c>ItemsControl</c> type or
            marked with the <see cref="T:JetBrains.Annotations.XamlItemsControlAttribute"/> attribute.
            </remarks>
        </member>
        <member name="T:JetBrains.Annotations.NoReorder">
            <summary>
            Prevents the Member Reordering feature from tossing members of the marked class.
            </summary>
            <remarks>
            The attribute must be mentioned in your member reordering patterns
            </remarks>
        </member>
        <member name="T:LinqToDB.ProviderName">
            <summary>
            Default names for providers.
            </summary>
        </member>
        <member name="F:LinqToDB.ProviderName.Access">
            <summary>
            Microsoft Access provider.
            Used as configuration name for Access mapping schema <see cref="!:DataProvider.Access.AccessMappingSchema"/>.
            </summary>
        </member>
        <member name="F:LinqToDB.ProviderName.DB2">
            <summary>
            IBM DB2 default provider (DB2 LUW).
            Used as configuration name for both DB2 base mapping schema <see cref="!:DataProvider.DB2.DB2MappingSchema"/>.
            </summary>
        </member>
        <member name="F:LinqToDB.ProviderName.DB2LUW">
            <summary>
            IBM DB2 LUW provider.
            Used as configuration name for DB2 LUW mapping schema <see cref="!:DataProvider.DB2.DB2LUWMappingSchema"/>.
            </summary>
        </member>
        <member name="F:LinqToDB.ProviderName.DB2zOS">
            <summary>
            IBM DB2 for z/OS provider.
            Used as configuration name for DB2 z/OS mapping schema <see cref="!:DataProvider.DB2.DB2zOSMappingSchema"/>.
            </summary>
        </member>
        <member name="F:LinqToDB.ProviderName.Firebird">
            <summary>
            Firebird provider.
            Used as configuration name for Firebird mapping schema <see cref="!:DataProvider.Firebird.FirebirdMappingSchema"/>.
            </summary>
        </member>
        <member name="F:LinqToDB.ProviderName.Informix">
            <summary>
            Informix provider.
            Used as configuration name for Informix mapping schema <see cref="!:DataProvider.Informix.InformixMappingSchema"/>.
            </summary>
        </member>
        <member name="F:LinqToDB.ProviderName.SqlServer">
            <summary>
            Microsoft SQL Server default provider (SQL Server 2008).
            Used as configuration name for SQL Server base mapping schema <see cref="!:DataProvider.SqlServer.SqlServerMappingSchema"/>.
            </summary>
        </member>
        <member name="F:LinqToDB.ProviderName.SqlServer2000">
            <summary>
            Microsoft SQL Server 2000 provider.
            Used as configuration name for SQL Server 2000 mapping schema <see cref="!:DataProvider.SqlServer.SqlServer2000MappingSchema"/>.
            </summary>
        </member>
        <member name="F:LinqToDB.ProviderName.SqlServer2005">
            <summary>
            Microsoft SQL Server 2005 provider.
            Used as configuration name for SQL Server 2005 mapping schema <see cref="!:DataProvider.SqlServer.SqlServer2005MappingSchema"/>.
            </summary>
        </member>
        <member name="F:LinqToDB.ProviderName.SqlServer2008">
            <summary>
            Microsoft SQL Server 2008 provider.
            Used as configuration name for SQL Server 2008 mapping schema <see cref="!:DataProvider.SqlServer.SqlServer2008MappingSchema"/>.
            </summary>
        </member>
        <member name="F:LinqToDB.ProviderName.SqlServer2012">
            <summary>
            Microsoft SQL Server 2012 provider.
            Used as configuration name for SQL Server 2012 mapping schema <see cref="!:DataProvider.SqlServer.SqlServer2012MappingSchema"/>.
            </summary>
        </member>
        <member name="F:LinqToDB.ProviderName.SqlServer2014">
            <summary>
            Microsoft SQL Server 2012 provider.
            </summary>
        </member>
        <member name="F:LinqToDB.ProviderName.MySql">
            <summary>
            MySql provider.
            Used as configuration name for MySql mapping schema <see cref="!:DataProvider.MySql.MySqlMappingSchema"/>.
            </summary>
        </member>
        <member name="F:LinqToDB.ProviderName.Oracle">
            <summary>
            Oracle ODP.NET autodetected provider (native or managed).
            Used as configuration name for Oracle base mapping schema <see cref="!:DataProvider.Oracle.OracleMappingSchema"/>.
            </summary>
        </member>
        <member name="F:LinqToDB.ProviderName.OracleNative">
            <summary>
            Oracle ODP.NET native provider.
            Used as configuration name for Oracle native provider mapping schema <see cref="!:DataProvider.Oracle.OracleMappingSchema.NativeMappingSchema"/>.
            </summary>
        </member>
        <member name="F:LinqToDB.ProviderName.OracleManaged">
            <summary>
            Oracle ODP.NET managed provider.
            Used as configuration name for Oracle managed provider mapping schema <see cref="!:DataProvider.Oracle.OracleMappingSchema.ManagedMappingSchema"/>.
            </summary>
        </member>
        <member name="F:LinqToDB.ProviderName.PostgreSQL">
            <summary>
            PostgreSQL 9.2- data provider.
            Used as configuration name for PostgreSQL mapping schema <see cref="!:DataProvider.PostgreSQL.PostgreSQLMappingSchema"/>.
            </summary>
        </member>
        <member name="F:LinqToDB.ProviderName.PostgreSQL92">
            <summary>
            PostgreSQL 9.2- data provider.
            </summary>
        </member>
        <member name="F:LinqToDB.ProviderName.PostgreSQL93">
            <summary>
            PostgreSQL 9.3+ data provider.
            </summary>
        </member>
        <member name="F:LinqToDB.ProviderName.SqlCe">
            <summary>
            Microsoft SQL Server Compact Edition provider.
            Used as configuration name for SQL CE mapping schema <see cref="!:DataProvider.SqlCe.SqlCeMappingSchema"/>.
            </summary>
        </member>
        <member name="F:LinqToDB.ProviderName.SQLite">
            <summary>
            SQLite provider.
            Used as configuration name for SQLite mapping schema <see cref="!:DataProvider.SQLite.SQLiteMappingSchema"/>.
            </summary>
        </member>
        <member name="F:LinqToDB.ProviderName.Sybase">
            <summary>
            Sybase ASE provider.
            Used as configuration name for Sybase ASE mapping schema <see cref="!:DataProvider.Sybase.SybaseMappingSchema"/>.
            </summary>
        </member>
        <member name="F:LinqToDB.ProviderName.SapHana">
            <summary>
            SAP HANA provider.
            Used as configuration name for SAP HANA mapping schema <see cref="!:DataProvider.SapHana.SapHanaMappingSchema"/>.
            </summary>
        </member>
        <member name="F:LinqToDB.SqlProvider.ConvertType.NameToQueryParameter">
            <summary>
            Provided name should be converted to query parameter name.
            For example:
                firstName -> @firstName
            for the following query:
                SELECT * FROM Person WHERE FirstName = @firstName
                                                       ^ here
            </summary>
        </member>
        <member name="F:LinqToDB.SqlProvider.ConvertType.NameToCommandParameter">
            <summary>
            Provided name should be converted to command parameter name.
            For example:
                firstName -> @firstName
            for the following query:
                db.Parameter("@firstName") = "John";
                              ^ here
            </summary>
        </member>
        <member name="F:LinqToDB.SqlProvider.ConvertType.NameToSprocParameter">
            <summary>
            Provided name should be converted to stored procedure parameter name.
            For example:
                firstName -> @firstName
            for the following query:
                db.Parameter("@firstName") = "John";
                              ^ here
            </summary>
        </member>
        <member name="F:LinqToDB.SqlProvider.ConvertType.NameToQueryField">
            <summary>
            Provided name should be converted to query field name.
            For example:
                FirstName -> [FirstName]
            for the following query:
                SELECT [FirstName] FROM Person WHERE ID = 1
                       ^   and   ^
            </summary>
        </member>
        <member name="F:LinqToDB.SqlProvider.ConvertType.NameToQueryFieldAlias">
            <summary>
            Provided name should be converted to query field alias.
            For example:
                ID -> "ID"
            for the following query:
                SELECT "ID" as "ID" FROM Person WHERE "ID" = 1
                               ^  ^ here
            </summary>
        </member>
        <member name="F:LinqToDB.SqlProvider.ConvertType.NameToDatabase">
            <summary>
            Provided name should be converted to query database.
            For example:
                MyDatabase -> [MyDatabase]
            for the following query:
                SELECT * FROM [MyDatabase]..[Person]
                              ^ and      ^
            </summary>
        </member>
        <member name="F:LinqToDB.SqlProvider.ConvertType.NameToOwner">
            <summary>
            Provided name should be converted to query database.
            For example:
                dbo -> [dbo]
            for the following query:
                SELECT * FROM [ dbo ].[Person]
                              ^ and ^
            </summary>
        </member>
        <member name="F:LinqToDB.SqlProvider.ConvertType.NameToQueryTable">
            <summary>
            Provided name should be converted to query table name.
            For example:
                Person -> [Person]
            for the following query:
                SELECT * FROM [Person]
                              ^ and  ^
            </summary>
        </member>
        <member name="F:LinqToDB.SqlProvider.ConvertType.NameToQueryTableAlias">
            <summary>
            Provided name should be converted to query table alias.
            For example:
                table1 -> [table1]
            for the following query:
                SELECT * FROM [Person] [table1]
                                       ^ and  ^
            </summary>
        </member>
        <member name="F:LinqToDB.SqlProvider.ConvertType.SprocParameterToName">
            <summary>
            Provided stored procedure parameter name should be converted to name.
            For example:
                @firstName -> firstName
            for the following query:
                db.Parameter("@firstName") = "John";
                              ^ '@' has to be removed
            </summary>
        </member>
        <member name="F:LinqToDB.SqlProvider.ConvertType.ExceptionToErrorNumber">
            <summary>
            Gets error number from a native exception.
            For example:
                SqlException -> SqlException.Number,
              OleDbException -> OleDbException.Errors[0].NativeError
            </summary>
        </member>
        <member name="F:LinqToDB.SqlProvider.ConvertType.ExceptionToErrorMessage">
            <summary>
            Gets error message from a native exception.
            For example:
                SqlException -> SqlException.Message,
              OleDbException -> OleDbException.Errors[0].Message
            </summary>
        </member>
        <member name="P:LinqToDB.SqlProvider.SqlProviderFlags.IsCrossJoinSupported">
            <summary>
            Provider supports:
            CROSS JOIN a Supported
            </summary>
        </member>
        <member name="P:LinqToDB.SqlProvider.SqlProviderFlags.IsInnerJoinAsCrossSupported">
            <summary>
            Provider supports:
            INNER JOIN a ON 1 = 1 
            </summary>
        </member>
        <member name="M:LinqToDB.SqlQuery.SelectQuery.SelectClause.AddOrFindColumn(LinqToDB.SqlQuery.SelectQuery.Column)">
            <summary>
            Adds column if it is not added yet.
            </summary>
            <returns>Returns index of column in Columns list.</returns>
        </member>
        <member name="P:LinqToDB.SqlQuery.SqlValue.DataType">
            <summary>
            This implementation is hack to fix <a href="https://github.com/linq2db/linq2db/issues/271">issue 271</a> 
            <a href="https://github.com/linq2db/linq2db/pull/608">PR</a>.
            </summary>
        </member>
        <member name="T:LinqToDB.TakeHints">
            <summary>
            Hints for Take
            <see cref="M:LinqToDB.LinqExtensions.Take``1(System.Linq.IQueryable{``0},System.Int32,LinqToDB.TakeHints)"/>
            <see cref="M:LinqToDB.LinqExtensions.Take``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{System.Int32}},LinqToDB.TakeHints)"/>.
            </summary>
        </member>
        <member name="F:LinqToDB.TakeHints.Percent">
            <summary>
            SELECT TOP 10 PERCENT.
            </summary>
        </member>
        <member name="F:LinqToDB.TakeHints.WithTies">
            <summary>
            SELECT TOP 10 WITH TIES.
            </summary>
        </member>
        <member name="T:LinqToDB.SqlJoinType">
            <summary>
            Defines join type. Used with join LINQ helpers.
            </summary>
        </member>
        <member name="F:LinqToDB.SqlJoinType.Inner">
            <summary>
            Inner join.
            </summary>
        </member>
        <member name="F:LinqToDB.SqlJoinType.Left">
            <summary>
            Left outer join.
            </summary>
        </member>
        <member name="F:LinqToDB.SqlJoinType.Right">
            <summary>
            Right outer join.
            </summary>
        </member>
        <member name="F:LinqToDB.SqlJoinType.Full">
            <summary>
            Full outer join.
            </summary>
        </member>
    </members>
</doc>
